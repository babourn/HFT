#ifdef MAXCOMPILER_VERSION_INFO
#define MAXCOMPILER_VERSION_INFO_PRESENT 1
#define MAXFILE_MAXCOMPILER_VERSION_YEAR         2014
#define MAXFILE_MAXCOMPILER_VERSION_NUM          2
#define MAXFILE_MAXCOMPILER_VERSION_POINT        0
#define MAXFILE_MAXCOMPILER_VERSION_PATCH        ""
#define MAXFILE_MAXCOMPILER_VERSION_REV          44158
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_DATE "2015-01-23"
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_MODE true
#endif

#ifdef MAXFILE_BUILD_INFO
#define MAXFILE_BUILD_INFO_PRESENT 1
#define MAXFILE_BUILD_NAME "MovingAverageSimple"
#define MAXFILE_BUILD_DIR  "/home/demo/Desktop/MaxCompiler-Builds/MovingAverageSimple_VECTIS_DFE_SIM"
#define MAXFILE_BUILD_DATE  20150413
#define MAXFILE_BUILD_REV   1
#endif

#ifdef PARAM
#define PARAM_PRESENT 1
PARAM(APP_ID, 0)
PARAM(REV_ID, 0)
PARAM(CHAIN_LENGTH, 35)
PARAM(IS_SIMULATION, 1)
PARAM(MEC_SUPPORTED, 1)
PARAM(PCIE_SLAVE_STREAMING, 0)
PARAM(PCIE_ALIGNMENT, 16)
PARAM(NUM_IFPGA_LINKS, 0)
#endif

#ifdef STRING_PARAM
#define STRING_PARAM_PRESENT 1
STRING_PARAM(BOARD_MODEL, "MAX3424A")
#endif



#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "MovingAverageSimpleKernel.h"
#endif










#ifdef MANAGER_NODE
#define MANAGER_NODE_PRESENT 1
MANAGER_NODE(MovingAverageSimpleKernel, Kernel)
MANAGER_NODE(x, PCIe_From_Host_fwd)
MANAGER_NODE(y, PCIe_To_Host_fwd)
MANAGER_NODE(Stream_1, DualAspectMux)
MANAGER_NODE(Stream_6, DualAspectReg)
MANAGER_NODE(Stream_14, StreamPullPushAdapter)
MANAGER_NODE(Stream_10, Fifo)
MANAGER_NODE(Stream_12, Fifo)
#endif

#ifdef MANAGER_NODE_IO
#define MANAGER_NODE_IO_PRESENT 1
MANAGER_NODE_IO(MovingAverageSimpleKernel, x, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(MovingAverageSimpleKernel, y, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(x, x, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(y, y, IN, STREAM, 128, PUSH)
MANAGER_NODE_IO(Stream_1, input, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_1, output, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_6, input, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_6, output, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_14, input, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_14, output, OUT, STREAM, 128, PUSH)
MANAGER_NODE_IO(Stream_10, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_10, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_12, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_12, output, OUT, STREAM, 32, PULL)
#endif

#ifdef MANAGER_STREAM
#define MANAGER_STREAM_PRESENT 1
MANAGER_STREAM(x, x, Stream_1, input, 128)
MANAGER_STREAM(MovingAverageSimpleKernel, y, Stream_12, input, 32)
MANAGER_STREAM(Stream_1, output, Stream_10, input, 32)
MANAGER_STREAM(Stream_6, output, Stream_14, input, 128)
MANAGER_STREAM(Stream_14, output, y, y, 128)
MANAGER_STREAM(Stream_10, output, MovingAverageSimpleKernel, x, 32)
MANAGER_STREAM(Stream_12, output, Stream_6, input, 32)
#endif

#ifdef MANAGER_NODE_STACK_TRACE
#define MANAGER_NODE_STACK_TRACE_PRESENT 1
MANAGER_NODE_STACK_TRACE(MovingAverageSimpleKernel, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nmovingaveragesimple.MovingAverageSimpleManager.main(MovingAverageSimpleManager.maxj:27)\n")
MANAGER_NODE_STACK_TRACE(x, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nmovingaveragesimple.MovingAverageSimpleManager.main(MovingAverageSimpleManager.maxj:27)\n")
MANAGER_NODE_STACK_TRACE(y, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nmovingaveragesimple.MovingAverageSimpleManager.main(MovingAverageSimpleManager.maxj:27)\n")
MANAGER_NODE_STACK_TRACE(Stream_1, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nmovingaveragesimple.MovingAverageSimpleManager.main(MovingAverageSimpleManager.maxj:27)\n")
MANAGER_NODE_STACK_TRACE(Stream_6, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nmovingaveragesimple.MovingAverageSimpleManager.main(MovingAverageSimpleManager.maxj:27)\n")
MANAGER_NODE_STACK_TRACE(Stream_14, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nmovingaveragesimple.MovingAverageSimpleManager.main(MovingAverageSimpleManager.maxj:27)\n")
MANAGER_NODE_STACK_TRACE(Stream_10, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nmovingaveragesimple.MovingAverageSimpleManager.main(MovingAverageSimpleManager.maxj:27)\n")
MANAGER_NODE_STACK_TRACE(Stream_12, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nmovingaveragesimple.MovingAverageSimpleManager.main(MovingAverageSimpleManager.maxj:27)\n")
#endif


#ifdef MANAGER_NODE_PROPERTY
#define MANAGER_NODE_PROPERTY_PRESENT 1
MANAGER_NODE_PROPERTY(MovingAverageSimpleKernel, control_pipelining_depth, 2)
#endif


#ifdef KERNEL_CORE
#define KERNEL_CORE_PRESENT 1
KERNEL_CORE(MovingAverageSimpleKernel)
#endif

#ifdef KERNEL_HOST_CONTROLLED
#define KERNEL_HOST_CONTROLLED_PRESENT 1
KERNEL_HOST_CONTROLLED(MovingAverageSimpleKernel, MovingAverageSimpleKernel)
#endif

#ifdef DEBUG_INPUT_BITS
#define DEBUG_INPUT_BITS_PRESENT 1
DEBUG_INPUT_BITS(MovingAverageSimpleKernel, x, 0)
#endif

#ifdef DEBUG_OUTPUT_BITS
#define DEBUG_OUTPUT_BITS_PRESENT 1
DEBUG_OUTPUT_BITS(MovingAverageSimpleKernel, y, 0)
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_CTOR
#define MANAGER_NODE_CPP_SIM_MODEL_CTOR_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_CTOR(x, PCIePullSourceSyncMax3, "x")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_1, DualAspectMuxSync, "Stream_1", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_10, FifoPushToPullSync, "Stream_10", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(MovingAverageSimpleKernel, MovingAverageSimpleKernel, "MovingAverageSimpleKernel")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_12, FifoPushToPullSync, "Stream_12", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_6, DualAspectRegSync, "Stream_6", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_14, PullToPushAdapterSync, "Stream_14")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(y, PCIePushSinkSyncMax3, "y")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(CapabilityReg, CapRegs, "CapabilityReg", 0, 1, 1, 0, 0, 0, 0, 0, 35)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ifpga, IFPGARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(sfa, SFARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ChecksumMemory, ChecksumMem, "ChecksumMemory", "0527a05224a763bee72376b2ead5591e538febad490af6819f3c4fd40085e628")
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_SETUP
#define MANAGER_NODE_CPP_SIM_MODEL_SETUP_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MovingAverageSimpleKernel, addDebugRegister, reg_dbg_ctld_almost_empty, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MovingAverageSimpleKernel, addDebugRegister, reg_dbg_ctld_done, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MovingAverageSimpleKernel, addDebugRegister, reg_dbg_ctld_empty, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MovingAverageSimpleKernel, addDebugRegister, reg_dbg_ctld_read, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MovingAverageSimpleKernel, addDebugRegister, reg_dbg_ctld_read_pipe_dbg, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MovingAverageSimpleKernel, addDebugRegister, reg_dbg_ctld_request, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MovingAverageSimpleKernel, addDebugRegister, reg_dbg_done_out, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MovingAverageSimpleKernel, addDebugRegister, reg_dbg_fill_level, 6, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MovingAverageSimpleKernel, addDebugRegister, reg_dbg_flush_level, 6, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MovingAverageSimpleKernel, addDebugRegister, reg_dbg_flush_start, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MovingAverageSimpleKernel, addDebugRegister, reg_dbg_flush_start_level, 6, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MovingAverageSimpleKernel, addDebugRegister, reg_dbg_flushing, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MovingAverageSimpleKernel, addDebugRegister, reg_dbg_full_level, 6, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MovingAverageSimpleKernel, addDebugRegister, reg_dbg_out_stall, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MovingAverageSimpleKernel, addDebugRegister, reg_dbg_out_valid, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MovingAverageSimpleKernel, addDebugRegister, reg_dbg_stall_vector, 1, 0)
#endif

#ifdef PCIE_STREAM
#define PCIE_STREAM_PRESENT 1
PCIE_STREAM(x, STREAM_FROM_HOST, 0)
PCIE_STREAM(y, STREAM_TO_HOST, 0)
#endif

#ifdef REG
#define REG_PRESENT 1
REG(MovingAverageSimpleKernel.io_x_force_disabled, 0x0, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(MovingAverageSimpleKernel.io_y_force_disabled, 0x1, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(MovingAverageSimpleKernel.run_cycle_count, 0x2, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(MovingAverageSimpleKernel.current_run_cycle_count, 0x8, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(MovingAverageSimpleKernel.dbg_ctld_almost_empty, 0xe, 1, hwBits(1))
REG(MovingAverageSimpleKernel.dbg_ctld_done, 0xf, 1, hwBits(1))
REG(MovingAverageSimpleKernel.dbg_ctld_empty, 0x10, 1, hwBits(1))
REG(MovingAverageSimpleKernel.dbg_ctld_read, 0x11, 1, hwBits(1))
REG(MovingAverageSimpleKernel.dbg_ctld_read_pipe_dbg, 0x12, 1, hwBits(3))
REG(MovingAverageSimpleKernel.dbg_ctld_request, 0x13, 1, hwBits(1))
REG(MovingAverageSimpleKernel.dbg_done_out, 0x14, 1, hwBits(1))
REG(MovingAverageSimpleKernel.dbg_fill_level, 0x15, 1, hwBits(6))
REG(MovingAverageSimpleKernel.dbg_flush_level, 0x16, 1, hwBits(6))
REG(MovingAverageSimpleKernel.dbg_flush_start, 0x17, 1, hwBits(1))
REG(MovingAverageSimpleKernel.dbg_flush_start_level, 0x18, 1, hwBits(6))
REG(MovingAverageSimpleKernel.dbg_flushing, 0x19, 1, hwBits(1))
REG(MovingAverageSimpleKernel.dbg_full_level, 0x1a, 1, hwBits(6))
REG(MovingAverageSimpleKernel.dbg_out_stall, 0x1b, 1, hwBits(1))
REG(MovingAverageSimpleKernel.dbg_out_valid, 0x1c, 1, hwBits(1))
REG(MovingAverageSimpleKernel.dbg_stall_vector, 0x1d, 1, hwBits(1))
REG(ifpga.ifpga_ctrl, 0x1e, 1, hwBits(8))
REG(SignalForwardingAdapter.SFA_FORWARD_EN, 0x1f, 4, hwBits(32))
#endif

#ifdef REG_V2
#define REG_V2_PRESENT 1
REG_V2(MovingAverageSimpleKernel.io_x_force_disabled, 0x0, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(MovingAverageSimpleKernel.io_y_force_disabled, 0x1, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(MovingAverageSimpleKernel.run_cycle_count, 0x2, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(MovingAverageSimpleKernel.current_run_cycle_count, 0x8, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(MovingAverageSimpleKernel.dbg_ctld_almost_empty, 0xe, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(MovingAverageSimpleKernel.dbg_ctld_done, 0xf, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(MovingAverageSimpleKernel.dbg_ctld_empty, 0x10, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(MovingAverageSimpleKernel.dbg_ctld_read, 0x11, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(MovingAverageSimpleKernel.dbg_ctld_read_pipe_dbg, 0x12, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(MovingAverageSimpleKernel.dbg_ctld_request, 0x13, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(MovingAverageSimpleKernel.dbg_done_out, 0x14, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(MovingAverageSimpleKernel.dbg_fill_level, 0x15, 1, hwBits(6), HOST_READ_ONLY, false)
REG_V2(MovingAverageSimpleKernel.dbg_flush_level, 0x16, 1, hwBits(6), HOST_READ_ONLY, false)
REG_V2(MovingAverageSimpleKernel.dbg_flush_start, 0x17, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(MovingAverageSimpleKernel.dbg_flush_start_level, 0x18, 1, hwBits(6), HOST_READ_ONLY, false)
REG_V2(MovingAverageSimpleKernel.dbg_flushing, 0x19, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(MovingAverageSimpleKernel.dbg_full_level, 0x1a, 1, hwBits(6), HOST_READ_ONLY, false)
REG_V2(MovingAverageSimpleKernel.dbg_out_stall, 0x1b, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(MovingAverageSimpleKernel.dbg_out_valid, 0x1c, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(MovingAverageSimpleKernel.dbg_stall_vector, 0x1d, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(ifpga.ifpga_ctrl, 0x1e, 1, hwBits(8), HOST_READ_WRITE, false)
REG_V2(SignalForwardingAdapter.SFA_FORWARD_EN, 0x1f, 4, hwBits(32), HOST_READ_WRITE, false)
#endif




#ifdef CHECKSUM
#define CHECKSUM_PRESENT 1
CHECKSUM("0527a05224a763bee72376b2ead5591e538febad490af6819f3c4fd40085e628")
#endif

#ifdef CAPABILITY
#define CAPABILITY_PRESENT 1
CAPABILITY(MAX3REV, MAX3REVA)
CAPABILITY(MAX3RAM, DDR3_24GB)
CAPABILITY(MAX3FPGA, SXT475_2ES)
#endif

#ifdef DEFINE_DESIGN_NAME
#define DESIGN_NAME MovingAverageSimple
#endif /* DEFINE_DESIGN_NAME */

#ifndef SLIC_NO_DECLARATIONS
/**\file */
#ifndef SLIC_DECLARATIONS_MovingAverageSimple_H
#define SLIC_DECLARATIONS_MovingAverageSimple_H
#include "MaxSLiCInterface.h"
#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#define MovingAverageSimple_PCIE_ALIGNMENT (16)


/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/




/**
 * \brief Basic static function for the interface 'default'.
 * 
 * \param [in] param_N Interface Parameter "N".: Number of data items to process
 * \param [in] instream_x The stream should be of size (param_N * 4) bytes.
 * \param [out] outstream_y The stream should be of size (param_N * 4) bytes.
 */
void MovingAverageSimple(
	int32_t param_N,
	const float *instream_x,
	float *outstream_y);

/**
 * \brief Basic static non-blocking function for the interface 'default'.
 * 
 * Schedule to run on an engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 * 
 * 
 * \param [in] param_N Interface Parameter "N".: Number of data items to process
 * \param [in] instream_x The stream should be of size (param_N * 4) bytes.
 * \param [out] outstream_y The stream should be of size (param_N * 4) bytes.
 * \return A handle on the execution status, or NULL in case of error.
 */
max_run_t *MovingAverageSimple_nonblock(
	int32_t param_N,
	const float *instream_x,
	float *outstream_y);

/**
 * \brief Advanced static interface, structure for the engine interface 'default'
 * 
 */
typedef struct { 
	int32_t param_N; /**<  [in] Interface Parameter "N".: Number of data items to process */
	const float *instream_x; /**<  [in] The stream should be of size (param_N * 4) bytes. */
	float *outstream_y; /**<  [out] The stream should be of size (param_N * 4) bytes. */
} MovingAverageSimple_actions_t;

/**
 * \brief Advanced static function for the interface 'default'.
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in,out] interface_actions Actions to be executed.
 */
void MovingAverageSimple_run(
	max_engine_t *engine,
	MovingAverageSimple_actions_t *interface_actions);

/**
 * \brief Advanced static non-blocking function for the interface 'default'.
 *
 * Schedule the actions to run on the engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in] interface_actions Actions to be executed.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *MovingAverageSimple_run_nonblock(
	max_engine_t *engine,
	MovingAverageSimple_actions_t *interface_actions);

/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void MovingAverageSimple_run_group(max_group_t *group, MovingAverageSimple_actions_t *interface_actions);

/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *MovingAverageSimple_run_group_nonblock(max_group_t *group, MovingAverageSimple_actions_t *interface_actions);

/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void MovingAverageSimple_run_array(max_engarray_t *engarray, MovingAverageSimple_actions_t *interface_actions[]);

/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *MovingAverageSimple_run_array_nonblock(max_engarray_t *engarray, MovingAverageSimple_actions_t *interface_actions[]);

/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* MovingAverageSimple_convert(max_file_t *maxfile, MovingAverageSimple_actions_t *interface_actions);

/**
 * \brief Initialise a maxfile.
 */
max_file_t* MovingAverageSimple_init(void);

/* Error handling functions */
int MovingAverageSimple_has_errors(void);
const char* MovingAverageSimple_get_errors(void);
void MovingAverageSimple_clear_errors(void);
/* Free statically allocated maxfile data */
void MovingAverageSimple_free(void);
/* returns: -1 = error running command; 0 = no error reported */
int MovingAverageSimple_simulator_start(void);
/* returns: -1 = error running command; 0 = no error reported */
int MovingAverageSimple_simulator_stop(void);

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* SLIC_DECLARATIONS_MovingAverageSimple_H */

#endif /* SLIC_NO_DECLARATIONS */

#ifdef PHOTON_NODE_DATA
#define PHOTON_NODE_DATA_PRESENT 1
PHOTON_NODE_DATA(MovingAverageSimpleKernel, 10, NodeInputMappedReg, "Scalar input (io_y_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nmovingaveragesimple.SpreadHftKernel.<init>(SpreadHftKernel.maxj:26)\nmovingaveragesimple.MovingAverageSimpleManager.main(MovingAverageSimpleManager.maxj:22)\n")
PHOTON_NODE_DATA(MovingAverageSimpleKernel, 11, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nmovingaveragesimple.SpreadHftKernel.<init>(SpreadHftKernel.maxj:26)\nmovingaveragesimple.MovingAverageSimpleManager.main(MovingAverageSimpleManager.maxj:22)\n")
PHOTON_NODE_DATA(MovingAverageSimpleKernel, 0, NodeInputMappedReg, "Scalar input (io_x_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nmovingaveragesimple.SpreadHftKernel.<init>(SpreadHftKernel.maxj:19)\nmovingaveragesimple.MovingAverageSimpleManager.main(MovingAverageSimpleManager.maxj:22)\n")
PHOTON_NODE_DATA(MovingAverageSimpleKernel, 1, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nmovingaveragesimple.SpreadHftKernel.<init>(SpreadHftKernel.maxj:19)\nmovingaveragesimple.MovingAverageSimpleManager.main(MovingAverageSimpleManager.maxj:22)\n")
PHOTON_NODE_DATA(MovingAverageSimpleKernel, 2, NodeInput, "Input(x)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nmovingaveragesimple.SpreadHftKernel.<init>(SpreadHftKernel.maxj:19)\nmovingaveragesimple.MovingAverageSimpleManager.main(MovingAverageSimpleManager.maxj:22)\n")
PHOTON_NODE_DATA(MovingAverageSimpleKernel, 26, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nmovingaveragesimple.MovingAverageSimpleManager.main(MovingAverageSimpleManager.maxj:27)\n")
PHOTON_NODE_DATA(MovingAverageSimpleKernel, 3, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:245)\nmovingaveragesimple.SpreadHftKernel.<init>(SpreadHftKernel.maxj:21)\nmovingaveragesimple.MovingAverageSimpleManager.main(MovingAverageSimpleManager.maxj:22)\n")
PHOTON_NODE_DATA(MovingAverageSimpleKernel, 5, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:868)\nmovingaveragesimple.SpreadHftKernel.<init>(SpreadHftKernel.maxj:23)\nmovingaveragesimple.MovingAverageSimpleManager.main(MovingAverageSimpleManager.maxj:22)\n")
PHOTON_NODE_DATA(MovingAverageSimpleKernel, 4, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:245)\nmovingaveragesimple.SpreadHftKernel.<init>(SpreadHftKernel.maxj:22)\nmovingaveragesimple.MovingAverageSimpleManager.main(MovingAverageSimpleManager.maxj:22)\n")
PHOTON_NODE_DATA(MovingAverageSimpleKernel, 28, NodeFIFO, "FIFO(10)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nmovingaveragesimple.MovingAverageSimpleManager.main(MovingAverageSimpleManager.maxj:27)\n")
PHOTON_NODE_DATA(MovingAverageSimpleKernel, 6, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:868)\nmovingaveragesimple.SpreadHftKernel.<init>(SpreadHftKernel.maxj:23)\nmovingaveragesimple.MovingAverageSimpleManager.main(MovingAverageSimpleManager.maxj:22)\n")
PHOTON_NODE_DATA(MovingAverageSimpleKernel, 31, NodeConstantRawBits, "{HWFloat:8, 24}\n0x40400000; 3.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.div(DFEVar.java:1021)\nmovingaveragesimple.SpreadHftKernel.<init>(SpreadHftKernel.maxj:24)\nmovingaveragesimple.MovingAverageSimpleManager.main(MovingAverageSimpleManager.maxj:22)\n")
PHOTON_NODE_DATA(MovingAverageSimpleKernel, 8, NodeDiv, "/", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.div(DFEVar.java:1021)\nmovingaveragesimple.SpreadHftKernel.<init>(SpreadHftKernel.maxj:24)\nmovingaveragesimple.MovingAverageSimpleManager.main(MovingAverageSimpleManager.maxj:22)\n")
PHOTON_NODE_DATA(MovingAverageSimpleKernel, 13, NodeOutput, "Output(y)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nmovingaveragesimple.SpreadHftKernel.<init>(SpreadHftKernel.maxj:26)\nmovingaveragesimple.MovingAverageSimpleManager.main(MovingAverageSimpleManager.maxj:22)\n")
PHOTON_NODE_DATA(MovingAverageSimpleKernel, 18, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nmovingaveragesimple.MovingAverageSimpleManager.main(MovingAverageSimpleManager.maxj:27)\n")
PHOTON_NODE_DATA(MovingAverageSimpleKernel, 30, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nmovingaveragesimple.MovingAverageSimpleManager.main(MovingAverageSimpleManager.maxj:27)\n")
PHOTON_NODE_DATA(MovingAverageSimpleKernel, 15, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nmovingaveragesimple.MovingAverageSimpleManager.main(MovingAverageSimpleManager.maxj:27)\n")
PHOTON_NODE_DATA(MovingAverageSimpleKernel, 16, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nmovingaveragesimple.MovingAverageSimpleManager.main(MovingAverageSimpleManager.maxj:27)\n")
PHOTON_NODE_DATA(MovingAverageSimpleKernel, 17, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nmovingaveragesimple.MovingAverageSimpleManager.main(MovingAverageSimpleManager.maxj:27)\n")
PHOTON_NODE_DATA(MovingAverageSimpleKernel, 19, NodeOutputMappedReg, "Scalar output (current_run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nmovingaveragesimple.MovingAverageSimpleManager.main(MovingAverageSimpleManager.maxj:27)\n")
PHOTON_NODE_DATA(MovingAverageSimpleKernel, 29, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nmovingaveragesimple.MovingAverageSimpleManager.main(MovingAverageSimpleManager.maxj:27)\n")
PHOTON_NODE_DATA(MovingAverageSimpleKernel, 21, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nmovingaveragesimple.MovingAverageSimpleManager.main(MovingAverageSimpleManager.maxj:27)\n")
PHOTON_NODE_DATA(MovingAverageSimpleKernel, 22, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nmovingaveragesimple.MovingAverageSimpleManager.main(MovingAverageSimpleManager.maxj:27)\n")
PHOTON_NODE_DATA(MovingAverageSimpleKernel, 24, NodeInputMappedReg, "Scalar input (run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nmovingaveragesimple.MovingAverageSimpleManager.main(MovingAverageSimpleManager.maxj:27)\n")
PHOTON_NODE_DATA(MovingAverageSimpleKernel, 25, NodeEq, "==", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nmovingaveragesimple.MovingAverageSimpleManager.main(MovingAverageSimpleManager.maxj:27)\n")
PHOTON_NODE_DATA(MovingAverageSimpleKernel, 23, NodeFlush, "flush on trigger", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nmovingaveragesimple.MovingAverageSimpleManager.main(MovingAverageSimpleManager.maxj:27)\n")
#endif

#ifdef SLIC_USE_DEFINITIONS
#include <stdio.h>
#include <math.h>
#include <pthread.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
static max_file_t *stored_maxfile = NULL;
static max_engine_t *stored_engine = NULL;
static char *stored_error = NULL;
static int stored_has_error = 0;
static pthread_once_t slic_bs_is_initialised = PTHREAD_ONCE_INIT;

static void set_error(const char *error_str)
{
	stored_has_error = 1; 
	if(stored_error == NULL) {
		stored_error = strdup(error_str);
	} else {
		char *nerr = malloc(strlen(stored_error) + strlen(error_str) + 2);
		sprintf(nerr, "%s\n%s", stored_error, error_str);
		free(stored_error);
		stored_error = nerr;
	}
}
static void set_error_and_free(char *error_str){
	set_error(error_str);
	free(error_str);
}
int MovingAverageSimple_has_errors(void)
{	return stored_has_error; }
const char* MovingAverageSimple_get_errors(void)
{	return stored_error; }
void MovingAverageSimple_clear_errors(void)
{
	free(stored_error);
	stored_error = NULL;
	stored_has_error = 0;
}

static char MovingAverageSimple_use_simulation[16];
static void MovingAverageSimple_def_use_simulation(void)
{
	long pid = ((long) getpid()) % 100000;
	snprintf(MovingAverageSimple_use_simulation, 16, "MovingAv_%05ld_", pid);
}
static const char *MovingAverageSimple_check_use_simulation(void)
{
	MovingAverageSimple_def_use_simulation();
	const char *use_sim = max_config_get_string(MAX_CONFIG_USE_SIMULATION);
	if (use_sim == NULL) {
		use_sim = MovingAverageSimple_use_simulation;
		max_config_set_string(MAX_CONFIG_USE_SIMULATION, use_sim);
	}
	return use_sim;
}

static int MovingAverageSimple_simulation_launch = 0;
int MovingAverageSimple_simulator_start(void)
{
	int retval = 0;
	const char *use_sim = MovingAverageSimple_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX3424A -S simutils restart", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		if (strstr(buff, "Error")) {
			set_error(buff);
			retval = -1;
		}
	}
	pclose(pipe_fp);
	return retval;
}

int MovingAverageSimple_simulator_stop(void)
{
	const char *use_sim = MovingAverageSimple_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX3424A -S simutils stop", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		;
	}
	pclose(pipe_fp);
	return 0;
}

static void MovingAverageSimple_static_init(void) 
{
	stored_maxfile = MovingAverageSimple_init();
	if (stored_maxfile == NULL || !max_ok(stored_maxfile->errors)) {
		stored_maxfile = NULL;
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to load maxfile"); return; }
	}
	if(!max_ok(max_global_errors())) {
		set_error_and_free(max_errors_trace(max_global_errors()));
		return;
	}
	if(!max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR))
		max_errors_mode(stored_maxfile->errors, 0);
	time_t timeout_previous = max_load_timeout(stored_maxfile, 30);
	const char *use_sim = MovingAverageSimple_check_use_simulation();
	if (max_ping_daemon(stored_maxfile, use_sim) == 0) {
		int sim_stat = MovingAverageSimple_simulator_start();
		if ((sim_stat == 0) && (max_ping_daemon(stored_maxfile, use_sim) == 1)) {
			MovingAverageSimple_simulation_launch = 1;
		} else {
			set_error("Error: An error occurred while trying to start the simulation infrastructure automatically.");
			set_error("Error: Check that 'use_simulation=<simulator_name>' is set correctly in your SLiC configuration");
			set_error("Error: and that the associated simulated system daemon is running.");
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		}
	}
	stored_engine = max_load(stored_maxfile, "*");
	if (!max_ok(stored_maxfile->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) {
			fprintf(stderr, "\nUnable to load engine: aborting now.\n\n");
			fflush(stderr);
			abort();
		} else {
			set_error_and_free(max_errors_trace(stored_maxfile->errors));
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		} 
	} 
	max_load_timeout(stored_maxfile, timeout_previous);
}
void MovingAverageSimple_free(void)
{
	if (stored_engine != NULL) {
		max_unload(stored_engine);
		stored_engine = NULL;
	}
	if (stored_maxfile != NULL) {
		max_file_free(stored_maxfile);
		stored_maxfile = NULL;
	}
	if (stored_error != NULL) {
		free(stored_error);
		stored_error = NULL;
	}
	if (MovingAverageSimple_simulation_launch == 1) {
		int sim_stat = MovingAverageSimple_simulator_stop();
		if (sim_stat != 0 ) {
			fprintf(stderr, "Error stopping simulator.");
		}
		MovingAverageSimple_simulation_launch = 0;
	}
}

static int MovingAverageSimple_get_pcie_alignment(void)
{
#ifdef MovingAverageSimple_PCIE_ALIGNMENT
	return ((MovingAverageSimple_PCIE_ALIGNMENT < 1) ? 16 : MovingAverageSimple_PCIE_ALIGNMENT);
#else
	return 16;
#endif
}

static int MovingAverageSimple_check_aligned(const void *data)
{
	uintptr_t pointer = (uintptr_t) data;
	int alignment = MovingAverageSimple_get_pcie_alignment();
	return (pointer % alignment) ? 1 : 0;
}

static void *MovingAverageSimple_malloc_aligned(const size_t size)
{
	void *ptr;
	int alignment = MovingAverageSimple_get_pcie_alignment();
	posix_memalign(&ptr, alignment, size);
	return ptr;
}



/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/



#define CHECK_ERRORS_ST(ST, RET) if(!max_ok(ST->errors)) { if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n", max_errors_trace(ST->errors)); abort(); } set_error_and_free(max_errors_trace(ST->errors)); return RET; } 
#define CHECK_NULL(VALUE, MESSAGE, RET) if(VALUE == NULL) { if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n%s\n", (stored_error == NULL) ? "" : stored_error, MESSAGE); abort(); } set_error(MESSAGE); return RET; }

 
typedef struct MovingAverageSimple_callback_stream {
	uint8_t *user_ptr;
	uint8_t *aligned_ptr;
	size_t   size;
	int      is_output;
} MovingAverageSimple_callback_stream_t;

typedef struct MovingAverageSimple_callback_data {
	MovingAverageSimple_callback_stream_t stream[2]; 
	int count;
	int max_count;
} MovingAverageSimple_callback_data_t;

static void MovingAverageSimple_callback_internal(void *cb_data)
{
	MovingAverageSimple_callback_data_t *data = (MovingAverageSimple_callback_data_t*) cb_data;
	for (int i = 0 ; i < data->count ; i++ ) {
		MovingAverageSimple_callback_stream_t *s = &data->stream[i];
		if (s->is_output && (s->size > 0)) {
			memcpy(s->user_ptr, s->aligned_ptr, s->size);
		}
		free(s->aligned_ptr);
	}
	free(data);
}

static max_actions_t* MovingAverageSimple_convert_internal(
	max_file_t *maxfile,
	MovingAverageSimple_actions_t *interface_actions,
	int  is_internal_call,
	void (**callback_func)(void*),
	void **callback_data)
{
	max_actions_t *actions = max_actions_init(maxfile, NULL);
	if(actions == NULL) return NULL;

#define CHECK_ERRORS if(!max_ok(actions->errors)) { set_error_and_free(max_errors_trace(actions->errors)); return NULL; } 

	MovingAverageSimple_callback_data_t *cb_data = NULL;
	int use_callback = (callback_func != NULL) && (callback_data != NULL);
	if (use_callback) {
		cb_data = malloc(sizeof(MovingAverageSimple_callback_data_t));
		if (cb_data == NULL) {
			fprintf(stderr, "Unable to allocate memory for stream callback data in function MovingAverageSimple_convert_internal\n");
			return NULL;
		}
		cb_data->max_count = 2;
		cb_data->count     = 0;
		*callback_data     = cb_data;
		*callback_func     = &MovingAverageSimple_callback_internal;
	}

	int32_t param_N = interface_actions->param_N;
	
	/* code for scalar MovingAverageSimpleKernel.run_cycle_count */
	uint64_t ticks_MovingAverageSimpleKernel = param_N;
	max_set_ticks(actions, "MovingAverageSimpleKernel", param_N);
	CHECK_ERRORS;
	/* end of code for scalar MovingAverageSimpleKernel.run_cycle_count*/
	
	int64_t tmp_0 = (param_N * 4);
	
	/* code for stream x */
	size_t instream_size_x = tmp_0;
	if (instream_size_x > 0) {
		const float *stream_ptr = interface_actions->instream_x;
		if (use_callback && (1 == MovingAverageSimple_check_aligned(interface_actions->instream_x))) {
			float *aligned_instream_x = malloc(instream_size_x);
			if (aligned_instream_x == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'x'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->instream_x;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_instream_x;
			(&cb_data->stream[cb_data->count])->size        = instream_size_x;
			(&cb_data->stream[cb_data->count])->is_output   = 0;
			cb_data->count += 1;
			memcpy(aligned_instream_x, interface_actions->instream_x, instream_size_x);
			stream_ptr = aligned_instream_x;
		}
		max_queue_input(actions, "x", stream_ptr, instream_size_x);
		CHECK_ERRORS;
	}
	/* end of code for stream x */
	
	int64_t tmp_1 = (param_N * 4);
	
	/* code for stream y */
	size_t outstream_size_y = tmp_1;
	if (outstream_size_y > 0) {
		float *stream_ptr = interface_actions->outstream_y;
		if (use_callback && (1 == MovingAverageSimple_check_aligned(interface_actions->outstream_y))) {
			float *aligned_outstream_y = malloc(outstream_size_y);
			if (aligned_outstream_y == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'y'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->outstream_y;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_outstream_y;
			(&cb_data->stream[cb_data->count])->size        = outstream_size_y;
			(&cb_data->stream[cb_data->count])->is_output   = 1;
			cb_data->count += 1;
			stream_ptr = aligned_outstream_y;
		}
		max_queue_output(actions, "y", stream_ptr, outstream_size_y);
		CHECK_ERRORS;
	}
	/* end of code for stream y */
	
	if (use_callback && cb_data->count == 0) {
		*callback_data = NULL;
		*callback_func = NULL;
		free(cb_data);
	}
	return actions;
#undef CHECK_ERRORS
}

void MovingAverageSimple(
	int32_t param_N,
	const float *instream_x,
	float *outstream_y)
{
	(void) pthread_once(&slic_bs_is_initialised, MovingAverageSimple_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", );
	max_run_t *run = MovingAverageSimple_nonblock(param_N, instream_x, outstream_y);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *MovingAverageSimple_nonblock(
	int32_t param_N,
	const float *instream_x,
	float *outstream_y)
{
	MovingAverageSimple_actions_t interface_actions;
	interface_actions.param_N = param_N;
	interface_actions.instream_x = instream_x;
	interface_actions.outstream_y = outstream_y;
	(void) pthread_once(&slic_bs_is_initialised, MovingAverageSimple_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", NULL);
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = MovingAverageSimple_convert_internal(stored_maxfile, &interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	CHECK_ERRORS_ST(stored_engine, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(stored_engine, actions);
	} else {
		run = max_run_nonblock_with_cb(stored_engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	CHECK_ERRORS_ST(actions, NULL);
	max_actions_free(actions);
	return run;
}

void MovingAverageSimple_run(
	max_engine_t *engine,
	MovingAverageSimple_actions_t *interface_actions)
{
	max_run_t *run = MovingAverageSimple_run_nonblock(engine, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *MovingAverageSimple_run_nonblock(
	max_engine_t *engine,
	MovingAverageSimple_actions_t *interface_actions)
{
	max_file_t *maxfile = max_engine_get_max_file(engine); 
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = MovingAverageSimple_convert_internal(maxfile, interface_actions, 1, &cb_func, &cb_data);
	CHECK_ERRORS_ST(actions, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(engine, actions);
	} else {
		run = max_run_nonblock_with_cb(engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void MovingAverageSimple_run_group(max_group_t *group, MovingAverageSimple_actions_t *interface_actions)
{
	max_run_t *run = MovingAverageSimple_run_group_nonblock(group, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *MovingAverageSimple_run_group_nonblock(max_group_t *group, MovingAverageSimple_actions_t *interface_actions)
{
	max_file_t *maxfile = max_group_get_max_file(group);
	max_actions_t *actions = MovingAverageSimple_convert_internal(maxfile, interface_actions, 1, NULL, NULL);
	if(actions == NULL) return NULL;
	if(!max_ok(actions->errors)) return NULL;
	max_validate(actions);
	max_run_t *run = max_run_group_nonblock(group, actions);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void MovingAverageSimple_run_array(max_engarray_t *engarray, MovingAverageSimple_actions_t *interface_actions[])
{
	max_run_t *run = MovingAverageSimple_run_array_nonblock(engarray, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *MovingAverageSimple_run_array_nonblock(max_engarray_t *engarray, MovingAverageSimple_actions_t *interface_actions[])
{
	max_file_t *maxfile = max_engarray_get_max_file(engarray, 0);
	int i;
	max_actarray_t *actarray = max_actarray_init(maxfile, engarray->size);
	if (actarray == NULL) return NULL;
	max_actions_t **arr_actions = malloc(engarray->size * sizeof(max_actions_t*));
	for ( i = 0 ; i < actarray->size; i++ ) {
		max_actions_t *actions = MovingAverageSimple_convert_internal(maxfile, interface_actions[i], 1, NULL, NULL);
		if (actions == NULL) return NULL;
		arr_actions[i] = actions;
		max_set_action(actarray, i, actions);
	}
	max_run_t *run = max_run_array_nonblock(engarray, actarray);
	for ( i = 0 ; i < actarray->size ; i++ ) { max_actions_free(arr_actions[i]); }
	max_actarray_free(actarray);
	free(arr_actions);
	return run;
}


/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* MovingAverageSimple_convert(max_file_t *maxfile, MovingAverageSimple_actions_t *interface_actions)
{
	return MovingAverageSimple_convert_internal(maxfile, interface_actions, 0, NULL, NULL);
}

#undef CHECK_ERRORS_ST
#undef CHECK_NULL



#endif /* SLIC_USE_DEFINITIONS */

#ifdef SLIC_DYNAMIC_CODE
SLIC_MODE_START(default)	
SLIC_PARAMETER_UINT64(int32_t, N, param_N)	
SLIC_SET_TICKS(MovingAverageSimpleKernel, param_N)	
SLIC_TEMP_VAR(int64_t tmp_0 = (param_N * 4);)	
SLIC_STREAM(x, tmp_0)	
SLIC_TEMP_VAR(int64_t tmp_1 = (param_N * 4);)	
SLIC_STREAM(y, tmp_1)	
SLIC_MODE_END(default)

#endif /* SLIC_DYNAMIC_CODE */

#ifdef SKIN_META_DATA
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PG1h
eGZpbGUgZm9ybWF0LXZlcnNpb249IjIwMTIwMjAwIiBoZWFkZXI9Ik1vdmluZ0F2ZXJhZ2VTaW1w
bGUuaCIgbmFtZT0iTW92aW5nQXZlcmFnZVNpbXBsZSI+PGNvbnN0YW50IG5hbWU9IlBDSUVfQUxJ
R05NRU5UIiB0eXBlPSJsb25nIiB2YWx1ZT0iMTYiLz48ZW5naW5lbW9kZSBuYW1lPSJkZWZhdWx0
Ij48ZnVuY3Rpb24gbmFtZT0iTW92aW5nQXZlcmFnZVNpbXBsZSIgcmV0dXJuLXZhbHVlPSJ2b2lk
Ij48c2NhbGFyIGRlc2M9IkludGVyZmFjZSBQYXJhbWV0ZXIgJnF1b3Q7TiZxdW90Oy46IE51bWJl
ciBvZiBkYXRhIGl0ZW1zIHRvIHByb2Nlc3MiIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9InBhcmFt
X04iIHR5cGU9ImludDMyX3QiLz48YXJyYXkgZGVzYz0iVGhlIHN0cmVhbSBzaG91bGQgYmUgb2Yg
c2l6ZSAocGFyYW1fTiAqIDQpIGJ5dGVzLiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0iaW5zdHJl
YW1feCIgc2l6ZT0iKHBhcmFtX04gKiA0KSIgdHJhbnNwb3NlPSJ0cnVlIiB0eXBlPSJmbG9hdCI+
PGRpbWVuc2lvbiBpbmRleD0iMCI+PGxlbmd0aD48ZnVuY3Rpb25DYWxsPjxudW1CaW5hcnlPcGVy
YXRvciBvcGVyYXRvcj0iLyIgdmFsdWU9IigocGFyYW1fTiAqIDQpIC8gNCkiPjxmdW5jdGlvbkNh
bGw+PG51bUJpbmFyeU9wZXJhdG9yIG9wZXJhdG9yPSIqIiB2YWx1ZT0iKHBhcmFtX04gKiA0KSI+
PHVzZXJQYXJhbSB2YWx1ZT0icGFyYW1fTiIvPjxjb25zdGFudFZhbHVlIHZhbHVlPSI0Ii8+PC9u
dW1CaW5hcnlPcGVyYXRvcj48L2Z1bmN0aW9uQ2FsbD48Y29uc3RhbnRWYWx1ZSB2YWx1ZT0iNCIv
PjwvbnVtQmluYXJ5T3BlcmF0b3I+PC9mdW5jdGlvbkNhbGw+PC9sZW5ndGg+PC9kaW1lbnNpb24+
PC9hcnJheT48YXJyYXkgZGVzYz0iVGhlIHN0cmVhbSBzaG91bGQgYmUgb2Ygc2l6ZSAocGFyYW1f
TiAqIDQpIGJ5dGVzLiIgZGlyZWN0aW9uPSJPdXRwdXQiIG5hbWU9Im91dHN0cmVhbV95IiBzaXpl
PSIocGFyYW1fTiAqIDQpIiB0cmFuc3Bvc2U9InRydWUiIHR5cGU9ImZsb2F0Ij48ZGltZW5zaW9u
IGluZGV4PSIwIj48bGVuZ3RoPjxmdW5jdGlvbkNhbGw+PG51bUJpbmFyeU9wZXJhdG9yIG9wZXJh
dG9yPSIvIiB2YWx1ZT0iKChwYXJhbV9OICogNCkgLyA0KSI+PGZ1bmN0aW9uQ2FsbD48bnVtQmlu
YXJ5T3BlcmF0b3Igb3BlcmF0b3I9IioiIHZhbHVlPSIocGFyYW1fTiAqIDQpIj48dXNlclBhcmFt
IHZhbHVlPSJwYXJhbV9OIi8+PGNvbnN0YW50VmFsdWUgdmFsdWU9IjQiLz48L251bUJpbmFyeU9w
ZXJhdG9yPjwvZnVuY3Rpb25DYWxsPjxjb25zdGFudFZhbHVlIHZhbHVlPSI0Ii8+PC9udW1CaW5h
cnlPcGVyYXRvcj48L2Z1bmN0aW9uQ2FsbD48L2xlbmd0aD48L2RpbWVuc2lvbj48L2FycmF5Pjwv
ZnVuY3Rpb24+PC9lbmdpbmVtb2RlPjwvbWF4ZmlsZT4=
#endif /* SKIN_META_DATA */

#ifdef SLIC_B64_DEFINITIONS
I2luY2x1ZGUgPHN0ZGlvLmg+CiNpbmNsdWRlIDxtYXRoLmg+CiNpbmNsdWRlIDxwdGhyZWFkLmg+
CiNpbmNsdWRlIDxzdHJpbmcuaD4KI2luY2x1ZGUgPHVuaXN0ZC5oPgojaW5jbHVkZSA8c3RkbGli
Lmg+CnN0YXRpYyBtYXhfZmlsZV90ICpzdG9yZWRfbWF4ZmlsZSA9IE5VTEw7CnN0YXRpYyBtYXhf
ZW5naW5lX3QgKnN0b3JlZF9lbmdpbmUgPSBOVUxMOwpzdGF0aWMgY2hhciAqc3RvcmVkX2Vycm9y
ID0gTlVMTDsKc3RhdGljIGludCBzdG9yZWRfaGFzX2Vycm9yID0gMDsKc3RhdGljIHB0aHJlYWRf
b25jZV90IHNsaWNfYnNfaXNfaW5pdGlhbGlzZWQgPSBQVEhSRUFEX09OQ0VfSU5JVDsKCnN0YXRp
YyB2b2lkIHNldF9lcnJvcihjb25zdCBjaGFyICplcnJvcl9zdHIpCnsKCXN0b3JlZF9oYXNfZXJy
b3IgPSAxOyAKCWlmKHN0b3JlZF9lcnJvciA9PSBOVUxMKSB7CgkJc3RvcmVkX2Vycm9yID0gc3Ry
ZHVwKGVycm9yX3N0cik7Cgl9IGVsc2UgewoJCWNoYXIgKm5lcnIgPSBtYWxsb2Moc3RybGVuKHN0
b3JlZF9lcnJvcikgKyBzdHJsZW4oZXJyb3Jfc3RyKSArIDIpOwoJCXNwcmludGYobmVyciwgIiVz
XG4lcyIsIHN0b3JlZF9lcnJvciwgZXJyb3Jfc3RyKTsKCQlmcmVlKHN0b3JlZF9lcnJvcik7CgkJ
c3RvcmVkX2Vycm9yID0gbmVycjsKCX0KfQpzdGF0aWMgdm9pZCBzZXRfZXJyb3JfYW5kX2ZyZWUo
Y2hhciAqZXJyb3Jfc3RyKXsKCXNldF9lcnJvcihlcnJvcl9zdHIpOwoJZnJlZShlcnJvcl9zdHIp
Owp9CmludCBNb3ZpbmdBdmVyYWdlU2ltcGxlX2hhc19lcnJvcnModm9pZCkKewlyZXR1cm4gc3Rv
cmVkX2hhc19lcnJvcjsgfQpjb25zdCBjaGFyKiBNb3ZpbmdBdmVyYWdlU2ltcGxlX2dldF9lcnJv
cnModm9pZCkKewlyZXR1cm4gc3RvcmVkX2Vycm9yOyB9CnZvaWQgTW92aW5nQXZlcmFnZVNpbXBs
ZV9jbGVhcl9lcnJvcnModm9pZCkKewoJZnJlZShzdG9yZWRfZXJyb3IpOwoJc3RvcmVkX2Vycm9y
ID0gTlVMTDsKCXN0b3JlZF9oYXNfZXJyb3IgPSAwOwp9CgpzdGF0aWMgY2hhciBNb3ZpbmdBdmVy
YWdlU2ltcGxlX3VzZV9zaW11bGF0aW9uWzE2XTsKc3RhdGljIHZvaWQgTW92aW5nQXZlcmFnZVNp
bXBsZV9kZWZfdXNlX3NpbXVsYXRpb24odm9pZCkKewoJbG9uZyBwaWQgPSAoKGxvbmcpIGdldHBp
ZCgpKSAlIDEwMDAwMDsKCXNucHJpbnRmKE1vdmluZ0F2ZXJhZ2VTaW1wbGVfdXNlX3NpbXVsYXRp
b24sIDE2LCAiTW92aW5nQXZfJTA1bGRfIiwgcGlkKTsKfQpzdGF0aWMgY29uc3QgY2hhciAqTW92
aW5nQXZlcmFnZVNpbXBsZV9jaGVja191c2Vfc2ltdWxhdGlvbih2b2lkKQp7CglNb3ZpbmdBdmVy
YWdlU2ltcGxlX2RlZl91c2Vfc2ltdWxhdGlvbigpOwoJY29uc3QgY2hhciAqdXNlX3NpbSA9IG1h
eF9jb25maWdfZ2V0X3N0cmluZyhNQVhfQ09ORklHX1VTRV9TSU1VTEFUSU9OKTsKCWlmICh1c2Vf
c2ltID09IE5VTEwpIHsKCQl1c2Vfc2ltID0gTW92aW5nQXZlcmFnZVNpbXBsZV91c2Vfc2ltdWxh
dGlvbjsKCQltYXhfY29uZmlnX3NldF9zdHJpbmcoTUFYX0NPTkZJR19VU0VfU0lNVUxBVElPTiwg
dXNlX3NpbSk7Cgl9CglyZXR1cm4gdXNlX3NpbTsKfQoKc3RhdGljIGludCBNb3ZpbmdBdmVyYWdl
U2ltcGxlX3NpbXVsYXRpb25fbGF1bmNoID0gMDsKaW50IE1vdmluZ0F2ZXJhZ2VTaW1wbGVfc2lt
dWxhdG9yX3N0YXJ0KHZvaWQpCnsKCWludCByZXR2YWwgPSAwOwoJY29uc3QgY2hhciAqdXNlX3Np
bSA9IE1vdmluZ0F2ZXJhZ2VTaW1wbGVfY2hlY2tfdXNlX3NpbXVsYXRpb24oKTsKCWNoYXIgYnVm
ZlsxMDI0XTsKCXNucHJpbnRmKGJ1ZmYsIDEwMjQsICJQQVRIPXNpbXV0aWxzOiRQQVRIIG1heGNv
bXBpbGVyc2ltIC1kIDEgLW4gJXMgLWMgTUFYMzQyNEEgLVMgc2ltdXRpbHMgcmVzdGFydCIsIHVz
ZV9zaW0pOwoJRklMRSAqcGlwZV9mcCA9IHBvcGVuKGJ1ZmYsICJyIik7CglpZiAocGlwZV9mcCA9
PSBOVUxMKSB7CgkJc3RybmNhdChidWZmLCAiIDogZmFpbGVkIHRvIGV4ZWN1dGUuIiwgKDEwMjQg
LSBzdHJsZW4oYnVmZikpKTsKCQlzZXRfZXJyb3IoYnVmZik7CgkJcmV0dXJuIC0xOwoJfQoJd2hp
bGUgKGZnZXRzKGJ1ZmYsIDEwMjQsIHBpcGVfZnApICE9IE5VTEwpIHsKCQkvKiBVbmNvbW1lbnQg
dGhpcyB0byBnZXQgc2ltdWxhdG9yIGNvbW1hbmQgb3V0cHV0ICovCgkJLyogZnByaW50ZihzdGRl
cnIsIGJ1ZmYpOyAqLwoJCWlmIChzdHJzdHIoYnVmZiwgIkVycm9yIikpIHsKCQkJc2V0X2Vycm9y
KGJ1ZmYpOwoJCQlyZXR2YWwgPSAtMTsKCQl9Cgl9CglwY2xvc2UocGlwZV9mcCk7CglyZXR1cm4g
cmV0dmFsOwp9CgppbnQgTW92aW5nQXZlcmFnZVNpbXBsZV9zaW11bGF0b3Jfc3RvcCh2b2lkKQp7
Cgljb25zdCBjaGFyICp1c2Vfc2ltID0gTW92aW5nQXZlcmFnZVNpbXBsZV9jaGVja191c2Vfc2lt
dWxhdGlvbigpOwoJY2hhciBidWZmWzEwMjRdOwoJc25wcmludGYoYnVmZiwgMTAyNCwgIlBBVEg9
c2ltdXRpbHM6JFBBVEggbWF4Y29tcGlsZXJzaW0gLWQgMSAtbiAlcyAtYyBNQVgzNDI0QSAtUyBz
aW11dGlscyBzdG9wIiwgdXNlX3NpbSk7CglGSUxFICpwaXBlX2ZwID0gcG9wZW4oYnVmZiwgInIi
KTsKCWlmIChwaXBlX2ZwID09IE5VTEwpIHsKCQlzdHJuY2F0KGJ1ZmYsICIgOiBmYWlsZWQgdG8g
ZXhlY3V0ZS4iLCAoMTAyNCAtIHN0cmxlbihidWZmKSkpOwoJCXNldF9lcnJvcihidWZmKTsKCQly
ZXR1cm4gLTE7Cgl9Cgl3aGlsZSAoZmdldHMoYnVmZiwgMTAyNCwgcGlwZV9mcCkgIT0gTlVMTCkg
ewoJCS8qIFVuY29tbWVudCB0aGlzIHRvIGdldCBzaW11bGF0b3IgY29tbWFuZCBvdXRwdXQgKi8K
CQkvKiBmcHJpbnRmKHN0ZGVyciwgYnVmZik7ICovCgkJOwoJfQoJcGNsb3NlKHBpcGVfZnApOwoJ
cmV0dXJuIDA7Cn0KCnN0YXRpYyB2b2lkIE1vdmluZ0F2ZXJhZ2VTaW1wbGVfc3RhdGljX2luaXQo
dm9pZCkgCnsKCXN0b3JlZF9tYXhmaWxlID0gTW92aW5nQXZlcmFnZVNpbXBsZV9pbml0KCk7Cglp
ZiAoc3RvcmVkX21heGZpbGUgPT0gTlVMTCB8fCAhbWF4X29rKHN0b3JlZF9tYXhmaWxlLT5lcnJv
cnMpKSB7CgkJc3RvcmVkX21heGZpbGUgPSBOVUxMOwoJCWlmKG1heF9jb25maWdfZ2V0X2Jvb2wo
TUFYX0NPTkZJR19TVEFUSUNfSU5URVJGQUNFX0FCT1JUX09OX0VSUk9SKSkgYWJvcnQoKTsKCQll
bHNlIHsgc2V0X2Vycm9yKCJVbmFibGUgdG8gbG9hZCBtYXhmaWxlIik7IHJldHVybjsgfQoJfQoJ
aWYoIW1heF9vayhtYXhfZ2xvYmFsX2Vycm9ycygpKSkgewoJCXNldF9lcnJvcl9hbmRfZnJlZSht
YXhfZXJyb3JzX3RyYWNlKG1heF9nbG9iYWxfZXJyb3JzKCkpKTsKCQlyZXR1cm47Cgl9CglpZigh
bWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05f
RVJST1IpKQoJCW1heF9lcnJvcnNfbW9kZShzdG9yZWRfbWF4ZmlsZS0+ZXJyb3JzLCAwKTsKCXRp
bWVfdCB0aW1lb3V0X3ByZXZpb3VzID0gbWF4X2xvYWRfdGltZW91dChzdG9yZWRfbWF4ZmlsZSwg
MzApOwoJY29uc3QgY2hhciAqdXNlX3NpbSA9IE1vdmluZ0F2ZXJhZ2VTaW1wbGVfY2hlY2tfdXNl
X3NpbXVsYXRpb24oKTsKCWlmIChtYXhfcGluZ19kYWVtb24oc3RvcmVkX21heGZpbGUsIHVzZV9z
aW0pID09IDApIHsKCQlpbnQgc2ltX3N0YXQgPSBNb3ZpbmdBdmVyYWdlU2ltcGxlX3NpbXVsYXRv
cl9zdGFydCgpOwoJCWlmICgoc2ltX3N0YXQgPT0gMCkgJiYgKG1heF9waW5nX2RhZW1vbihzdG9y
ZWRfbWF4ZmlsZSwgdXNlX3NpbSkgPT0gMSkpIHsKCQkJTW92aW5nQXZlcmFnZVNpbXBsZV9zaW11
bGF0aW9uX2xhdW5jaCA9IDE7CgkJfSBlbHNlIHsKCQkJc2V0X2Vycm9yKCJFcnJvcjogQW4gZXJy
b3Igb2NjdXJyZWQgd2hpbGUgdHJ5aW5nIHRvIHN0YXJ0IHRoZSBzaW11bGF0aW9uIGluZnJhc3Ry
dWN0dXJlIGF1dG9tYXRpY2FsbHkuIik7CgkJCXNldF9lcnJvcigiRXJyb3I6IENoZWNrIHRoYXQg
J3VzZV9zaW11bGF0aW9uPTxzaW11bGF0b3JfbmFtZT4nIGlzIHNldCBjb3JyZWN0bHkgaW4geW91
ciBTTGlDIGNvbmZpZ3VyYXRpb24iKTsKCQkJc2V0X2Vycm9yKCJFcnJvcjogYW5kIHRoYXQgdGhl
IGFzc29jaWF0ZWQgc2ltdWxhdGVkIHN5c3RlbSBkYWVtb24gaXMgcnVubmluZy4iKTsKCQkJbWF4
X2ZpbGVfZnJlZShzdG9yZWRfbWF4ZmlsZSk7CgkJCXN0b3JlZF9tYXhmaWxlID0gTlVMTDsKCQkJ
cmV0dXJuOwoJCX0KCX0KCXN0b3JlZF9lbmdpbmUgPSBtYXhfbG9hZChzdG9yZWRfbWF4ZmlsZSwg
IioiKTsKCWlmICghbWF4X29rKHN0b3JlZF9tYXhmaWxlLT5lcnJvcnMpKSB7CgkJaWYobWF4X2Nv
bmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1Ip
KSB7CgkJCWZwcmludGYoc3RkZXJyLCAiXG5VbmFibGUgdG8gbG9hZCBlbmdpbmU6IGFib3J0aW5n
IG5vdy5cblxuIik7CgkJCWZmbHVzaChzdGRlcnIpOwoJCQlhYm9ydCgpOwoJCX0gZWxzZSB7CgkJ
CXNldF9lcnJvcl9hbmRfZnJlZShtYXhfZXJyb3JzX3RyYWNlKHN0b3JlZF9tYXhmaWxlLT5lcnJv
cnMpKTsKCQkJbWF4X2ZpbGVfZnJlZShzdG9yZWRfbWF4ZmlsZSk7CgkJCXN0b3JlZF9tYXhmaWxl
ID0gTlVMTDsKCQkJcmV0dXJuOwoJCX0gCgl9IAoJbWF4X2xvYWRfdGltZW91dChzdG9yZWRfbWF4
ZmlsZSwgdGltZW91dF9wcmV2aW91cyk7Cn0Kdm9pZCBNb3ZpbmdBdmVyYWdlU2ltcGxlX2ZyZWUo
dm9pZCkKewoJaWYgKHN0b3JlZF9lbmdpbmUgIT0gTlVMTCkgewoJCW1heF91bmxvYWQoc3RvcmVk
X2VuZ2luZSk7CgkJc3RvcmVkX2VuZ2luZSA9IE5VTEw7Cgl9CglpZiAoc3RvcmVkX21heGZpbGUg
IT0gTlVMTCkgewoJCW1heF9maWxlX2ZyZWUoc3RvcmVkX21heGZpbGUpOwoJCXN0b3JlZF9tYXhm
aWxlID0gTlVMTDsKCX0KCWlmIChzdG9yZWRfZXJyb3IgIT0gTlVMTCkgewoJCWZyZWUoc3RvcmVk
X2Vycm9yKTsKCQlzdG9yZWRfZXJyb3IgPSBOVUxMOwoJfQoJaWYgKE1vdmluZ0F2ZXJhZ2VTaW1w
bGVfc2ltdWxhdGlvbl9sYXVuY2ggPT0gMSkgewoJCWludCBzaW1fc3RhdCA9IE1vdmluZ0F2ZXJh
Z2VTaW1wbGVfc2ltdWxhdG9yX3N0b3AoKTsKCQlpZiAoc2ltX3N0YXQgIT0gMCApIHsKCQkJZnBy
aW50ZihzdGRlcnIsICJFcnJvciBzdG9wcGluZyBzaW11bGF0b3IuIik7CgkJfQoJCU1vdmluZ0F2
ZXJhZ2VTaW1wbGVfc2ltdWxhdGlvbl9sYXVuY2ggPSAwOwoJfQp9CgpzdGF0aWMgaW50IE1vdmlu
Z0F2ZXJhZ2VTaW1wbGVfZ2V0X3BjaWVfYWxpZ25tZW50KHZvaWQpCnsKI2lmZGVmIE1vdmluZ0F2
ZXJhZ2VTaW1wbGVfUENJRV9BTElHTk1FTlQKCXJldHVybiAoKE1vdmluZ0F2ZXJhZ2VTaW1wbGVf
UENJRV9BTElHTk1FTlQgPCAxKSA/IDE2IDogTW92aW5nQXZlcmFnZVNpbXBsZV9QQ0lFX0FMSUdO
TUVOVCk7CiNlbHNlCglyZXR1cm4gMTY7CiNlbmRpZgp9CgpzdGF0aWMgaW50IE1vdmluZ0F2ZXJh
Z2VTaW1wbGVfY2hlY2tfYWxpZ25lZChjb25zdCB2b2lkICpkYXRhKQp7Cgl1aW50cHRyX3QgcG9p
bnRlciA9ICh1aW50cHRyX3QpIGRhdGE7CglpbnQgYWxpZ25tZW50ID0gTW92aW5nQXZlcmFnZVNp
bXBsZV9nZXRfcGNpZV9hbGlnbm1lbnQoKTsKCXJldHVybiAocG9pbnRlciAlIGFsaWdubWVudCkg
PyAxIDogMDsKfQoKc3RhdGljIHZvaWQgKk1vdmluZ0F2ZXJhZ2VTaW1wbGVfbWFsbG9jX2FsaWdu
ZWQoY29uc3Qgc2l6ZV90IHNpemUpCnsKCXZvaWQgKnB0cjsKCWludCBhbGlnbm1lbnQgPSBNb3Zp
bmdBdmVyYWdlU2ltcGxlX2dldF9wY2llX2FsaWdubWVudCgpOwoJcG9zaXhfbWVtYWxpZ24oJnB0
ciwgYWxpZ25tZW50LCBzaXplKTsKCXJldHVybiBwdHI7Cn0KCgoKLyotLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tKi8KLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEludGVyZmFjZSBkZWZhdWx0IC0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCgoK
I2RlZmluZSBDSEVDS19FUlJPUlNfU1QoU1QsIFJFVCkgaWYoIW1heF9vayhTVC0+ZXJyb3JzKSkg
eyBpZihtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9S
VF9PTl9FUlJPUikpIHsgZnByaW50ZihzdGRlcnIsICIlc1xuIiwgbWF4X2Vycm9yc190cmFjZShT
VC0+ZXJyb3JzKSk7IGFib3J0KCk7IH0gc2V0X2Vycm9yX2FuZF9mcmVlKG1heF9lcnJvcnNfdHJh
Y2UoU1QtPmVycm9ycykpOyByZXR1cm4gUkVUOyB9IAojZGVmaW5lIENIRUNLX05VTEwoVkFMVUUs
IE1FU1NBR0UsIFJFVCkgaWYoVkFMVUUgPT0gTlVMTCkgeyBpZiAobWF4X2NvbmZpZ19nZXRfYm9v
bChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKSB7IGZwcmludGYo
c3RkZXJyLCAiJXNcbiVzXG4iLCAoc3RvcmVkX2Vycm9yID09IE5VTEwpID8gIiIgOiBzdG9yZWRf
ZXJyb3IsIE1FU1NBR0UpOyBhYm9ydCgpOyB9IHNldF9lcnJvcihNRVNTQUdFKTsgcmV0dXJuIFJF
VDsgfQoKIAp0eXBlZGVmIHN0cnVjdCBNb3ZpbmdBdmVyYWdlU2ltcGxlX2NhbGxiYWNrX3N0cmVh
bSB7Cgl1aW50OF90ICp1c2VyX3B0cjsKCXVpbnQ4X3QgKmFsaWduZWRfcHRyOwoJc2l6ZV90ICAg
c2l6ZTsKCWludCAgICAgIGlzX291dHB1dDsKfSBNb3ZpbmdBdmVyYWdlU2ltcGxlX2NhbGxiYWNr
X3N0cmVhbV90OwoKdHlwZWRlZiBzdHJ1Y3QgTW92aW5nQXZlcmFnZVNpbXBsZV9jYWxsYmFja19k
YXRhIHsKCU1vdmluZ0F2ZXJhZ2VTaW1wbGVfY2FsbGJhY2tfc3RyZWFtX3Qgc3RyZWFtWzJdOyAK
CWludCBjb3VudDsKCWludCBtYXhfY291bnQ7Cn0gTW92aW5nQXZlcmFnZVNpbXBsZV9jYWxsYmFj
a19kYXRhX3Q7CgpzdGF0aWMgdm9pZCBNb3ZpbmdBdmVyYWdlU2ltcGxlX2NhbGxiYWNrX2ludGVy
bmFsKHZvaWQgKmNiX2RhdGEpCnsKCU1vdmluZ0F2ZXJhZ2VTaW1wbGVfY2FsbGJhY2tfZGF0YV90
ICpkYXRhID0gKE1vdmluZ0F2ZXJhZ2VTaW1wbGVfY2FsbGJhY2tfZGF0YV90KikgY2JfZGF0YTsK
CWZvciAoaW50IGkgPSAwIDsgaSA8IGRhdGEtPmNvdW50IDsgaSsrICkgewoJCU1vdmluZ0F2ZXJh
Z2VTaW1wbGVfY2FsbGJhY2tfc3RyZWFtX3QgKnMgPSAmZGF0YS0+c3RyZWFtW2ldOwoJCWlmIChz
LT5pc19vdXRwdXQgJiYgKHMtPnNpemUgPiAwKSkgewoJCQltZW1jcHkocy0+dXNlcl9wdHIsIHMt
PmFsaWduZWRfcHRyLCBzLT5zaXplKTsKCQl9CgkJZnJlZShzLT5hbGlnbmVkX3B0cik7Cgl9Cglm
cmVlKGRhdGEpOwp9CgpzdGF0aWMgbWF4X2FjdGlvbnNfdCogTW92aW5nQXZlcmFnZVNpbXBsZV9j
b252ZXJ0X2ludGVybmFsKAoJbWF4X2ZpbGVfdCAqbWF4ZmlsZSwKCU1vdmluZ0F2ZXJhZ2VTaW1w
bGVfYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucywKCWludCAgaXNfaW50ZXJuYWxfY2FsbCwK
CXZvaWQgKCoqY2FsbGJhY2tfZnVuYykodm9pZCopLAoJdm9pZCAqKmNhbGxiYWNrX2RhdGEpCnsK
CW1heF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBtYXhfYWN0aW9uc19pbml0KG1heGZpbGUsIE5VTEwp
OwoJaWYoYWN0aW9ucyA9PSBOVUxMKSByZXR1cm4gTlVMTDsKCiNkZWZpbmUgQ0hFQ0tfRVJST1JT
IGlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgeyBzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vy
cm9yc190cmFjZShhY3Rpb25zLT5lcnJvcnMpKTsgcmV0dXJuIE5VTEw7IH0gCgoJTW92aW5nQXZl
cmFnZVNpbXBsZV9jYWxsYmFja19kYXRhX3QgKmNiX2RhdGEgPSBOVUxMOwoJaW50IHVzZV9jYWxs
YmFjayA9IChjYWxsYmFja19mdW5jICE9IE5VTEwpICYmIChjYWxsYmFja19kYXRhICE9IE5VTEwp
OwoJaWYgKHVzZV9jYWxsYmFjaykgewoJCWNiX2RhdGEgPSBtYWxsb2Moc2l6ZW9mKE1vdmluZ0F2
ZXJhZ2VTaW1wbGVfY2FsbGJhY2tfZGF0YV90KSk7CgkJaWYgKGNiX2RhdGEgPT0gTlVMTCkgewoJ
CQlmcHJpbnRmKHN0ZGVyciwgIlVuYWJsZSB0byBhbGxvY2F0ZSBtZW1vcnkgZm9yIHN0cmVhbSBj
YWxsYmFjayBkYXRhIGluIGZ1bmN0aW9uIE1vdmluZ0F2ZXJhZ2VTaW1wbGVfY29udmVydF9pbnRl
cm5hbFxuIik7CgkJCXJldHVybiBOVUxMOwoJCX0KCQljYl9kYXRhLT5tYXhfY291bnQgPSAyOwoJ
CWNiX2RhdGEtPmNvdW50ICAgICA9IDA7CgkJKmNhbGxiYWNrX2RhdGEgICAgID0gY2JfZGF0YTsK
CQkqY2FsbGJhY2tfZnVuYyAgICAgPSAmTW92aW5nQXZlcmFnZVNpbXBsZV9jYWxsYmFja19pbnRl
cm5hbDsKCX0KCglpbnQzMl90IHBhcmFtX04gPSBpbnRlcmZhY2VfYWN0aW9ucy0+cGFyYW1fTjsK
CQoJLyogY29kZSBmb3Igc2NhbGFyIE1vdmluZ0F2ZXJhZ2VTaW1wbGVLZXJuZWwucnVuX2N5Y2xl
X2NvdW50ICovCgl1aW50NjRfdCB0aWNrc19Nb3ZpbmdBdmVyYWdlU2ltcGxlS2VybmVsID0gcGFy
YW1fTjsKCW1heF9zZXRfdGlja3MoYWN0aW9ucywgIk1vdmluZ0F2ZXJhZ2VTaW1wbGVLZXJuZWwi
LCBwYXJhbV9OKTsKCUNIRUNLX0VSUk9SUzsKCS8qIGVuZCBvZiBjb2RlIGZvciBzY2FsYXIgTW92
aW5nQXZlcmFnZVNpbXBsZUtlcm5lbC5ydW5fY3ljbGVfY291bnQqLwoJCglpbnQ2NF90IHRtcF8w
ID0gKHBhcmFtX04gKiA0KTsKCQoJLyogY29kZSBmb3Igc3RyZWFtIHggKi8KCXNpemVfdCBpbnN0
cmVhbV9zaXplX3ggPSB0bXBfMDsKCWlmIChpbnN0cmVhbV9zaXplX3ggPiAwKSB7CgkJY29uc3Qg
ZmxvYXQgKnN0cmVhbV9wdHIgPSBpbnRlcmZhY2VfYWN0aW9ucy0+aW5zdHJlYW1feDsKCQlpZiAo
dXNlX2NhbGxiYWNrICYmICgxID09IE1vdmluZ0F2ZXJhZ2VTaW1wbGVfY2hlY2tfYWxpZ25lZChp
bnRlcmZhY2VfYWN0aW9ucy0+aW5zdHJlYW1feCkpKSB7CgkJCWZsb2F0ICphbGlnbmVkX2luc3Ry
ZWFtX3ggPSBtYWxsb2MoaW5zdHJlYW1fc2l6ZV94KTsKCQkJaWYgKGFsaWduZWRfaW5zdHJlYW1f
eCA9PSBOVUxMKSB7CgkJCQltYXhfcmVwb3J0X2Vycm9yX3NsaWMoYWN0aW9ucy0+ZXJyb3JzLCBf
X0ZJTEVfXywgX19MSU5FX18sIDUyNiwgIkZhaWxlZCB0byBhbGxvY2F0ZSBhbGlnbmVkIG1lbW9y
eSBmb3Igc3RyZWFtICd4JyIpOwoJCQkJQ0hFQ0tfRVJST1JTOwoJCQl9CgkJCSgmY2JfZGF0YS0+
c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPnVzZXJfcHRyICAgID0gKHVpbnQ4X3QqKSBpbnRlcmZh
Y2VfYWN0aW9ucy0+aW5zdHJlYW1feDsKCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291
bnRdKS0+YWxpZ25lZF9wdHIgPSAodWludDhfdCopIGFsaWduZWRfaW5zdHJlYW1feDsKCQkJKCZj
Yl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+c2l6ZSAgICAgICAgPSBpbnN0cmVhbV9z
aXplX3g7CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPmlzX291dHB1dCAg
ID0gMDsKCQkJY2JfZGF0YS0+Y291bnQgKz0gMTsKCQkJbWVtY3B5KGFsaWduZWRfaW5zdHJlYW1f
eCwgaW50ZXJmYWNlX2FjdGlvbnMtPmluc3RyZWFtX3gsIGluc3RyZWFtX3NpemVfeCk7CgkJCXN0
cmVhbV9wdHIgPSBhbGlnbmVkX2luc3RyZWFtX3g7CgkJfQoJCW1heF9xdWV1ZV9pbnB1dChhY3Rp
b25zLCAieCIsIHN0cmVhbV9wdHIsIGluc3RyZWFtX3NpemVfeCk7CgkJQ0hFQ0tfRVJST1JTOwoJ
fQoJLyogZW5kIG9mIGNvZGUgZm9yIHN0cmVhbSB4ICovCgkKCWludDY0X3QgdG1wXzEgPSAocGFy
YW1fTiAqIDQpOwoJCgkvKiBjb2RlIGZvciBzdHJlYW0geSAqLwoJc2l6ZV90IG91dHN0cmVhbV9z
aXplX3kgPSB0bXBfMTsKCWlmIChvdXRzdHJlYW1fc2l6ZV95ID4gMCkgewoJCWZsb2F0ICpzdHJl
YW1fcHRyID0gaW50ZXJmYWNlX2FjdGlvbnMtPm91dHN0cmVhbV95OwoJCWlmICh1c2VfY2FsbGJh
Y2sgJiYgKDEgPT0gTW92aW5nQXZlcmFnZVNpbXBsZV9jaGVja19hbGlnbmVkKGludGVyZmFjZV9h
Y3Rpb25zLT5vdXRzdHJlYW1feSkpKSB7CgkJCWZsb2F0ICphbGlnbmVkX291dHN0cmVhbV95ID0g
bWFsbG9jKG91dHN0cmVhbV9zaXplX3kpOwoJCQlpZiAoYWxpZ25lZF9vdXRzdHJlYW1feSA9PSBO
VUxMKSB7CgkJCQltYXhfcmVwb3J0X2Vycm9yX3NsaWMoYWN0aW9ucy0+ZXJyb3JzLCBfX0ZJTEVf
XywgX19MSU5FX18sIDUyNiwgIkZhaWxlZCB0byBhbGxvY2F0ZSBhbGlnbmVkIG1lbW9yeSBmb3Ig
c3RyZWFtICd5JyIpOwoJCQkJQ0hFQ0tfRVJST1JTOwoJCQl9CgkJCSgmY2JfZGF0YS0+c3RyZWFt
W2NiX2RhdGEtPmNvdW50XSktPnVzZXJfcHRyICAgID0gKHVpbnQ4X3QqKSBpbnRlcmZhY2VfYWN0
aW9ucy0+b3V0c3RyZWFtX3k7CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSkt
PmFsaWduZWRfcHRyID0gKHVpbnQ4X3QqKSBhbGlnbmVkX291dHN0cmVhbV95OwoJCQkoJmNiX2Rh
dGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5zaXplICAgICAgICA9IG91dHN0cmVhbV9zaXpl
X3k7CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPmlzX291dHB1dCAgID0g
MTsKCQkJY2JfZGF0YS0+Y291bnQgKz0gMTsKCQkJc3RyZWFtX3B0ciA9IGFsaWduZWRfb3V0c3Ry
ZWFtX3k7CgkJfQoJCW1heF9xdWV1ZV9vdXRwdXQoYWN0aW9ucywgInkiLCBzdHJlYW1fcHRyLCBv
dXRzdHJlYW1fc2l6ZV95KTsKCQlDSEVDS19FUlJPUlM7Cgl9CgkvKiBlbmQgb2YgY29kZSBmb3Ig
c3RyZWFtIHkgKi8KCQoJaWYgKHVzZV9jYWxsYmFjayAmJiBjYl9kYXRhLT5jb3VudCA9PSAwKSB7
CgkJKmNhbGxiYWNrX2RhdGEgPSBOVUxMOwoJCSpjYWxsYmFja19mdW5jID0gTlVMTDsKCQlmcmVl
KGNiX2RhdGEpOwoJfQoJcmV0dXJuIGFjdGlvbnM7CiN1bmRlZiBDSEVDS19FUlJPUlMKfQoKdm9p
ZCBNb3ZpbmdBdmVyYWdlU2ltcGxlKAoJaW50MzJfdCBwYXJhbV9OLAoJY29uc3QgZmxvYXQgKmlu
c3RyZWFtX3gsCglmbG9hdCAqb3V0c3RyZWFtX3kpCnsKCSh2b2lkKSBwdGhyZWFkX29uY2UoJnNs
aWNfYnNfaXNfaW5pdGlhbGlzZWQsIE1vdmluZ0F2ZXJhZ2VTaW1wbGVfc3RhdGljX2luaXQpOwoJ
Q0hFQ0tfTlVMTChzdG9yZWRfbWF4ZmlsZSwgIk1heGZpbGUgd2FzIG5vdCBsb2FkZWQiLCApOwoJ
bWF4X3J1bl90ICpydW4gPSBNb3ZpbmdBdmVyYWdlU2ltcGxlX25vbmJsb2NrKHBhcmFtX04sIGlu
c3RyZWFtX3gsIG91dHN0cmVhbV95KTsKCUNIRUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBh
Y3Rpb25zIiwgKTsKCW1heF93YWl0KHJ1bik7Cn0KCm1heF9ydW5fdCAqTW92aW5nQXZlcmFnZVNp
bXBsZV9ub25ibG9jaygKCWludDMyX3QgcGFyYW1fTiwKCWNvbnN0IGZsb2F0ICppbnN0cmVhbV94
LAoJZmxvYXQgKm91dHN0cmVhbV95KQp7CglNb3ZpbmdBdmVyYWdlU2ltcGxlX2FjdGlvbnNfdCBp
bnRlcmZhY2VfYWN0aW9uczsKCWludGVyZmFjZV9hY3Rpb25zLnBhcmFtX04gPSBwYXJhbV9OOwoJ
aW50ZXJmYWNlX2FjdGlvbnMuaW5zdHJlYW1feCA9IGluc3RyZWFtX3g7CglpbnRlcmZhY2VfYWN0
aW9ucy5vdXRzdHJlYW1feSA9IG91dHN0cmVhbV95OwoJKHZvaWQpIHB0aHJlYWRfb25jZSgmc2xp
Y19ic19pc19pbml0aWFsaXNlZCwgTW92aW5nQXZlcmFnZVNpbXBsZV9zdGF0aWNfaW5pdCk7CglD
SEVDS19OVUxMKHN0b3JlZF9tYXhmaWxlLCAiTWF4ZmlsZSB3YXMgbm90IGxvYWRlZCIsIE5VTEwp
OwoJdm9pZCAoKmNiX2Z1bmMpKHZvaWQqKSA9IE5VTEw7Cgl2b2lkICAqY2JfZGF0YSAgICAgICAg
ID0gTlVMTDsKCW1heF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBNb3ZpbmdBdmVyYWdlU2ltcGxlX2Nv
bnZlcnRfaW50ZXJuYWwoc3RvcmVkX21heGZpbGUsICZpbnRlcmZhY2VfYWN0aW9ucywgMSwgJmNi
X2Z1bmMsICZjYl9kYXRhKTsKCUNIRUNLX05VTEwoYWN0aW9ucywgIlVuYWJsZSB0byBidWlsZCBh
Y3Rpb25zIiwgTlVMTCk7CgltYXhfdmFsaWRhdGUoYWN0aW9ucyk7CglDSEVDS19FUlJPUlNfU1Qo
YWN0aW9ucywgTlVMTCk7CglDSEVDS19FUlJPUlNfU1Qoc3RvcmVkX2VuZ2luZSwgTlVMTCk7Cglt
YXhfcnVuX3QgKnJ1bjsKCWlmIChjYl9mdW5jID09IE5VTEwpIHsKCQlydW4gPSBtYXhfcnVuX25v
bmJsb2NrKHN0b3JlZF9lbmdpbmUsIGFjdGlvbnMpOwoJfSBlbHNlIHsKCQlydW4gPSBtYXhfcnVu
X25vbmJsb2NrX3dpdGhfY2Ioc3RvcmVkX2VuZ2luZSwgYWN0aW9ucywgY2JfZnVuYywgY2JfZGF0
YSk7Cgl9CglDSEVDS19OVUxMKHJ1biwgIlVuYWJsZSB0byBydW4gYWN0aW9ucyIsIE5VTEwpOwoJ
Q0hFQ0tfRVJST1JTX1NUKGFjdGlvbnMsIE5VTEwpOwoJbWF4X2FjdGlvbnNfZnJlZShhY3Rpb25z
KTsKCXJldHVybiBydW47Cn0KCnZvaWQgTW92aW5nQXZlcmFnZVNpbXBsZV9ydW4oCgltYXhfZW5n
aW5lX3QgKmVuZ2luZSwKCU1vdmluZ0F2ZXJhZ2VTaW1wbGVfYWN0aW9uc190ICppbnRlcmZhY2Vf
YWN0aW9ucykKewoJbWF4X3J1bl90ICpydW4gPSBNb3ZpbmdBdmVyYWdlU2ltcGxlX3J1bl9ub25i
bG9jayhlbmdpbmUsIGludGVyZmFjZV9hY3Rpb25zKTsKCUNIRUNLX05VTEwocnVuLCAiVW5hYmxl
IHRvIHJ1biBhY3Rpb25zIiwgKTsKCW1heF93YWl0KHJ1bik7Cn0KCm1heF9ydW5fdCAqTW92aW5n
QXZlcmFnZVNpbXBsZV9ydW5fbm9uYmxvY2soCgltYXhfZW5naW5lX3QgKmVuZ2luZSwKCU1vdmlu
Z0F2ZXJhZ2VTaW1wbGVfYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucykKewoJbWF4X2ZpbGVf
dCAqbWF4ZmlsZSA9IG1heF9lbmdpbmVfZ2V0X21heF9maWxlKGVuZ2luZSk7IAoJdm9pZCAoKmNi
X2Z1bmMpKHZvaWQqKSA9IE5VTEw7Cgl2b2lkICAqY2JfZGF0YSAgICAgICAgID0gTlVMTDsKCW1h
eF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBNb3ZpbmdBdmVyYWdlU2ltcGxlX2NvbnZlcnRfaW50ZXJu
YWwobWF4ZmlsZSwgaW50ZXJmYWNlX2FjdGlvbnMsIDEsICZjYl9mdW5jLCAmY2JfZGF0YSk7CglD
SEVDS19FUlJPUlNfU1QoYWN0aW9ucywgTlVMTCk7CgltYXhfcnVuX3QgKnJ1bjsKCWlmIChjYl9m
dW5jID09IE5VTEwpIHsKCQlydW4gPSBtYXhfcnVuX25vbmJsb2NrKGVuZ2luZSwgYWN0aW9ucyk7
Cgl9IGVsc2UgewoJCXJ1biA9IG1heF9ydW5fbm9uYmxvY2tfd2l0aF9jYihlbmdpbmUsIGFjdGlv
bnMsIGNiX2Z1bmMsIGNiX2RhdGEpOwoJfQoJQ0hFQ0tfTlVMTChydW4sICJVbmFibGUgdG8gcnVu
IGFjdGlvbnMiLCBOVUxMKTsKCW1heF9hY3Rpb25zX2ZyZWUoYWN0aW9ucyk7CglyZXR1cm4gcnVu
Owp9CgoKLyoqCiAqIFxicmllZiBHcm91cCBydW4gYWR2YW5jZWQgc3RhdGljIGZ1bmN0aW9uIGZv
ciB0aGUgaW50ZXJmYWNlICdkZWZhdWx0Jy4KICogCiAqIFxwYXJhbSBbaW5dIGdyb3VwIEdyb3Vw
IHRvIHVzZS4KICogXHBhcmFtIFtpbixvdXRdIGludGVyZmFjZV9hY3Rpb25zIEFjdGlvbnMgdG8g
cnVuLgogKgogKiBSdW4gdGhlIGFjdGlvbnMgb24gdGhlIGZpcnN0IGRldmljZSBhdmFpbGFibGUg
aW4gdGhlIGdyb3VwLgogKi8Kdm9pZCBNb3ZpbmdBdmVyYWdlU2ltcGxlX3J1bl9ncm91cChtYXhf
Z3JvdXBfdCAqZ3JvdXAsIE1vdmluZ0F2ZXJhZ2VTaW1wbGVfYWN0aW9uc190ICppbnRlcmZhY2Vf
YWN0aW9ucykKewoJbWF4X3J1bl90ICpydW4gPSBNb3ZpbmdBdmVyYWdlU2ltcGxlX3J1bl9ncm91
cF9ub25ibG9jayhncm91cCwgaW50ZXJmYWNlX2FjdGlvbnMpOwoJQ0hFQ0tfTlVMTChydW4sICJV
bmFibGUgdG8gcnVuIGFjdGlvbnMiLCApOwoJbWF4X3dhaXQocnVuKTsKfQoKCi8qKgogKiBcYnJp
ZWYgR3JvdXAgcnVuIGFkdmFuY2VkIHN0YXRpYyBub24tYmxvY2tpbmcgZnVuY3Rpb24gZm9yIHRo
ZSBpbnRlcmZhY2UgJ2RlZmF1bHQnLgogKiAKICoKICogU2NoZWR1bGUgdGhlIGFjdGlvbnMgdG8g
cnVuIG9uIHRoZSBmaXJzdCBkZXZpY2UgYXZhaWxhYmxlIGluIHRoZSBncm91cCBhbmQgcmV0dXJu
IGltbWVkaWF0ZWx5LgogKiBUaGUgc3RhdHVzIG9mIHRoZSBydW4gbXVzdCBiZSBjaGVja2VkIHdp
dGggOjptYXhfd2FpdC4gCiAqIE5vdGUgdGhhdCB1c2Ugb2YgOjptYXhfbm93YWl0IGlzIHByb2hp
Yml0ZWQgd2l0aCBub24tYmxvY2tpbmcgcnVubmluZyBvbiBncm91cHM6CiAqIHNlZSB0aGUgOjpt
YXhfcnVuX2dyb3VwX25vbmJsb2NrIGRvY3VtZW50YXRpb24gZm9yIG1vcmUgZXhwbGFuYXRpb24u
CiAqCiAqIFxwYXJhbSBbaW5dIGdyb3VwIEdyb3VwIHRvIHVzZS4KICogXHBhcmFtIFtpbl0gaW50
ZXJmYWNlX2FjdGlvbnMgQWN0aW9ucyB0byBydW4uCiAqIFxyZXR1cm4gQSBoYW5kbGUgb24gdGhl
IGV4ZWN1dGlvbiBzdGF0dXMgb2YgdGhlIGFjdGlvbnMsIG9yIE5VTEwgaW4gY2FzZSBvZiBlcnJv
ci4KICovCm1heF9ydW5fdCAqTW92aW5nQXZlcmFnZVNpbXBsZV9ydW5fZ3JvdXBfbm9uYmxvY2so
bWF4X2dyb3VwX3QgKmdyb3VwLCBNb3ZpbmdBdmVyYWdlU2ltcGxlX2FjdGlvbnNfdCAqaW50ZXJm
YWNlX2FjdGlvbnMpCnsKCW1heF9maWxlX3QgKm1heGZpbGUgPSBtYXhfZ3JvdXBfZ2V0X21heF9m
aWxlKGdyb3VwKTsKCW1heF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBNb3ZpbmdBdmVyYWdlU2ltcGxl
X2NvbnZlcnRfaW50ZXJuYWwobWF4ZmlsZSwgaW50ZXJmYWNlX2FjdGlvbnMsIDEsIE5VTEwsIE5V
TEwpOwoJaWYoYWN0aW9ucyA9PSBOVUxMKSByZXR1cm4gTlVMTDsKCWlmKCFtYXhfb2soYWN0aW9u
cy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgltYXhfdmFsaWRhdGUoYWN0aW9ucyk7CgltYXhfcnVu
X3QgKnJ1biA9IG1heF9ydW5fZ3JvdXBfbm9uYmxvY2soZ3JvdXAsIGFjdGlvbnMpOwoJbWF4X2Fj
dGlvbnNfZnJlZShhY3Rpb25zKTsKCXJldHVybiBydW47Cn0KCgovKioKICogXGJyaWVmIEFycmF5
IHJ1biBhZHZhbmNlZCBzdGF0aWMgZnVuY3Rpb24gZm9yIHRoZSBpbnRlcmZhY2UgJ2RlZmF1bHQn
LgogKiAKICogXHBhcmFtIFtpbl0gZW5nYXJyYXkgVGhlIGFycmF5IG9mIGRldmljZXMgdG8gdXNl
LgogKiBccGFyYW0gW2luLG91dF0gaW50ZXJmYWNlX2FjdGlvbnMgVGhlIGFycmF5IG9mIGFjdGlv
bnMgdG8gcnVuLgogKgogKiBSdW4gdGhlIGFycmF5IG9mIGFjdGlvbnMgb24gdGhlIGFycmF5IG9m
IGVuZ2luZXMuICBUaGUgbGVuZ3RoIG9mIGludGVyZmFjZV9hY3Rpb25zCiAqIG11c3QgbWF0Y2gg
dGhlIHNpemUgb2YgZW5nYXJyYXkuCiAqLwp2b2lkIE1vdmluZ0F2ZXJhZ2VTaW1wbGVfcnVuX2Fy
cmF5KG1heF9lbmdhcnJheV90ICplbmdhcnJheSwgTW92aW5nQXZlcmFnZVNpbXBsZV9hY3Rpb25z
X3QgKmludGVyZmFjZV9hY3Rpb25zW10pCnsKCW1heF9ydW5fdCAqcnVuID0gTW92aW5nQXZlcmFn
ZVNpbXBsZV9ydW5fYXJyYXlfbm9uYmxvY2soZW5nYXJyYXksIGludGVyZmFjZV9hY3Rpb25zKTsK
CUNIRUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgKTsKCW1heF93YWl0KHJ1
bik7Cn0KCgovKioKICogXGJyaWVmIEFycmF5IHJ1biBhZHZhbmNlZCBzdGF0aWMgbm9uLWJsb2Nr
aW5nIGZ1bmN0aW9uIGZvciB0aGUgaW50ZXJmYWNlICdkZWZhdWx0Jy4KICogCiAqCiAqIFNjaGVk
dWxlIHRvIHJ1biB0aGUgYXJyYXkgb2YgYWN0aW9ucyBvbiB0aGUgYXJyYXkgb2YgZW5naW5lcywg
YW5kIHJldHVybiBpbW1lZGlhdGVseS4KICogVGhlIGxlbmd0aCBvZiBpbnRlcmZhY2VfYWN0aW9u
cyBtdXN0IG1hdGNoIHRoZSBzaXplIG9mIGVuZ2FycmF5LgogKiBUaGUgc3RhdHVzIG9mIHRoZSBy
dW4gY2FuIGJlIGNoZWNrZWQgZWl0aGVyIGJ5IDo6bWF4X3dhaXQgb3IgOjptYXhfbm93YWl0Owog
KiBub3RlIHRoYXQgb25lIG9mIHRoZXNlICptdXN0KiBiZSBjYWxsZWQsIHNvIHRoYXQgYXNzb2Np
YXRlZCBtZW1vcnkgY2FuIGJlIHJlbGVhc2VkLgogKgogKiBccGFyYW0gW2luXSBlbmdhcnJheSBU
aGUgYXJyYXkgb2YgZGV2aWNlcyB0byB1c2UuCiAqIFxwYXJhbSBbaW5dIGludGVyZmFjZV9hY3Rp
b25zIFRoZSBhcnJheSBvZiBhY3Rpb25zIHRvIHJ1bi4KICogXHJldHVybiBBIGhhbmRsZSBvbiB0
aGUgZXhlY3V0aW9uIHN0YXR1cyBvZiB0aGUgYWN0aW9ucywgb3IgTlVMTCBpbiBjYXNlIG9mIGVy
cm9yLgogKi8KbWF4X3J1bl90ICpNb3ZpbmdBdmVyYWdlU2ltcGxlX3J1bl9hcnJheV9ub25ibG9j
ayhtYXhfZW5nYXJyYXlfdCAqZW5nYXJyYXksIE1vdmluZ0F2ZXJhZ2VTaW1wbGVfYWN0aW9uc190
ICppbnRlcmZhY2VfYWN0aW9uc1tdKQp7CgltYXhfZmlsZV90ICptYXhmaWxlID0gbWF4X2VuZ2Fy
cmF5X2dldF9tYXhfZmlsZShlbmdhcnJheSwgMCk7CglpbnQgaTsKCW1heF9hY3RhcnJheV90ICph
Y3RhcnJheSA9IG1heF9hY3RhcnJheV9pbml0KG1heGZpbGUsIGVuZ2FycmF5LT5zaXplKTsKCWlm
IChhY3RhcnJheSA9PSBOVUxMKSByZXR1cm4gTlVMTDsKCW1heF9hY3Rpb25zX3QgKiphcnJfYWN0
aW9ucyA9IG1hbGxvYyhlbmdhcnJheS0+c2l6ZSAqIHNpemVvZihtYXhfYWN0aW9uc190KikpOwoJ
Zm9yICggaSA9IDAgOyBpIDwgYWN0YXJyYXktPnNpemU7IGkrKyApIHsKCQltYXhfYWN0aW9uc190
ICphY3Rpb25zID0gTW92aW5nQXZlcmFnZVNpbXBsZV9jb252ZXJ0X2ludGVybmFsKG1heGZpbGUs
IGludGVyZmFjZV9hY3Rpb25zW2ldLCAxLCBOVUxMLCBOVUxMKTsKCQlpZiAoYWN0aW9ucyA9PSBO
VUxMKSByZXR1cm4gTlVMTDsKCQlhcnJfYWN0aW9uc1tpXSA9IGFjdGlvbnM7CgkJbWF4X3NldF9h
Y3Rpb24oYWN0YXJyYXksIGksIGFjdGlvbnMpOwoJfQoJbWF4X3J1bl90ICpydW4gPSBtYXhfcnVu
X2FycmF5X25vbmJsb2NrKGVuZ2FycmF5LCBhY3RhcnJheSk7Cglmb3IgKCBpID0gMCA7IGkgPCBh
Y3RhcnJheS0+c2l6ZSA7IGkrKyApIHsgbWF4X2FjdGlvbnNfZnJlZShhcnJfYWN0aW9uc1tpXSk7
IH0KCW1heF9hY3RhcnJheV9mcmVlKGFjdGFycmF5KTsKCWZyZWUoYXJyX2FjdGlvbnMpOwoJcmV0
dXJuIHJ1bjsKfQoKCi8qKgogKiBcYnJpZWYgQ29udmVydHMgYSBzdGF0aWMtaW50ZXJmYWNlIGFj
dGlvbiBzdHJ1Y3QgaW50byBhIGR5bmFtaWMtaW50ZXJmYWNlIG1heF9hY3Rpb25zX3Qgc3RydWN0
LgogKgogKiBOb3RlIHRoYXQgdGhpcyBpcyBhbiBpbnRlcm5hbCB1dGlsaXR5IGZ1bmN0aW9uIHVz
ZWQgYnkgb3RoZXIgZnVuY3Rpb25zIGluIHRoZSBzdGF0aWMgaW50ZXJmYWNlLgogKgogKiBccGFy
YW0gW2luXSBtYXhmaWxlIFRoZSBtYXhmaWxlIHRvIHVzZS4KICogXHBhcmFtIFtpbl0gaW50ZXJm
YWNlX2FjdGlvbnMgVGhlIGludGVyZmFjZS1zcGVjaWZpYyBhY3Rpb25zIHRvIHJ1bi4KICogXHJl
dHVybiBUaGUgZHluYW1pYy1pbnRlcmZhY2UgYWN0aW9ucyB0byBydW4sIG9yIE5VTEwgaW4gY2Fz
ZSBvZiBlcnJvci4KICovCm1heF9hY3Rpb25zX3QqIE1vdmluZ0F2ZXJhZ2VTaW1wbGVfY29udmVy
dChtYXhfZmlsZV90ICptYXhmaWxlLCBNb3ZpbmdBdmVyYWdlU2ltcGxlX2FjdGlvbnNfdCAqaW50
ZXJmYWNlX2FjdGlvbnMpCnsKCXJldHVybiBNb3ZpbmdBdmVyYWdlU2ltcGxlX2NvbnZlcnRfaW50
ZXJuYWwobWF4ZmlsZSwgaW50ZXJmYWNlX2FjdGlvbnMsIDAsIE5VTEwsIE5VTEwpOwp9CgojdW5k
ZWYgQ0hFQ0tfRVJST1JTX1NUCiN1bmRlZiBDSEVDS19OVUxMCgoK
#endif /* SLIC_B64_DEFINITIONS */

#ifdef SLIC_EXTRA_FILES
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PHVz
ZXJmaWxlcyBmb3JtYXQtdmVyc2lvbj0iMjAxMjAyMDAiLz4=
#endif /* SLIC_EXTRA_FILES */

#ifdef PHOTON_NODE_ADD_DATA
#define PHOTON_NODE_ADD_DATA_PRESENT 1
PHOTON_NODE_ADD_DATA(MovingAverageSimpleKernel, 10, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MovingAverageSimpleKernel, 11, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(MovingAverageSimpleKernel, 0, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MovingAverageSimpleKernel, 1, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(MovingAverageSimpleKernel, 2, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MovingAverageSimpleKernel, 26, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MovingAverageSimpleKernel, 3, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MovingAverageSimpleKernel, 5, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MovingAverageSimpleKernel, 4, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MovingAverageSimpleKernel, 28, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MovingAverageSimpleKernel, 6, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MovingAverageSimpleKernel, 31, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MovingAverageSimpleKernel, 8, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MovingAverageSimpleKernel, 13, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MovingAverageSimpleKernel, 18, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MovingAverageSimpleKernel, 30, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MovingAverageSimpleKernel, 15, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MovingAverageSimpleKernel, 16, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MovingAverageSimpleKernel, 17, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MovingAverageSimpleKernel, 19, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MovingAverageSimpleKernel, 29, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MovingAverageSimpleKernel, 21, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MovingAverageSimpleKernel, 22, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MovingAverageSimpleKernel, 24, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MovingAverageSimpleKernel, 25, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MovingAverageSimpleKernel, 23, "SquashFactor", 0.0)
#endif

#ifdef MAXFILE_SIGNATURE
#define MAXFILE_SIGNATURE_PRESENT 1
MAXFILE_SIGNATURE("302c02145639eabf6c15b9b24fd44dbd387bfa5a5e23502402144633476d0b19e87fc076884ed4b3675825243ef4")
#endif

