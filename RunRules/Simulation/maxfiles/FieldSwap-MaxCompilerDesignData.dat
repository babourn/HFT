#ifdef MAXCOMPILER_VERSION_INFO
#define MAXCOMPILER_VERSION_INFO_PRESENT 1
#define MAXFILE_MAXCOMPILER_VERSION_YEAR         2014
#define MAXFILE_MAXCOMPILER_VERSION_NUM          2
#define MAXFILE_MAXCOMPILER_VERSION_POINT        0
#define MAXFILE_MAXCOMPILER_VERSION_PATCH        ""
#define MAXFILE_MAXCOMPILER_VERSION_REV          44158
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_DATE "2015-01-23"
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_MODE true
#endif

#ifdef MAXFILE_BUILD_INFO
#define MAXFILE_BUILD_INFO_PRESENT 1
#define MAXFILE_BUILD_NAME "FieldSwap"
#define MAXFILE_BUILD_DIR  "/home/demo/Desktop/MaxCompiler-Builds/FieldSwap_VECTIS_DFE_SIM"
#define MAXFILE_BUILD_DATE  20150409
#define MAXFILE_BUILD_REV   1
#endif

#ifdef PARAM
#define PARAM_PRESENT 1
PARAM(USE_NETWORK_MANAGER, 1)
PARAM(ch2_sfp1_udp_has_rx, 1)
PARAM(ch2_sfp1_udp_has_tx, 1)
PARAM(ch2_sfp1_udp_has_demux, 0)
PARAM(APP_ID, 0)
PARAM(REV_ID, 0)
PARAM(CHAIN_LENGTH, 322)
PARAM(IS_SIMULATION, 1)
PARAM(MEC_SUPPORTED, 1)
PARAM(PCIE_SLAVE_STREAMING, 0)
PARAM(PCIE_ALIGNMENT, 16)
PARAM(NUM_IFPGA_LINKS, 0)
#endif

#ifdef STRING_PARAM
#define STRING_PARAM_PRESENT 1
STRING_PARAM(BOARD_MODEL, "MAX3424A")
#endif



#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "FieldSwapKernel.h"
#endif

#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "StateMachineManagerBlock_impl_network_mgmt_stream_to_host_rx_id_0.h"
#endif

#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "StateMachineManagerBlock_impl_SlicerFramer_network_mgmt_stream_from_host_tx_framed.h"
#endif

#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "StateMachineManagerBlock_impl_ch2_sfp1_udp_tx.h"
#endif

#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "StateMachineManagerBlock_impl_network_mgmt_stream_from_host_tx_demux.h"
#endif

#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "StateMachineManagerBlock_impl_ch2_sfp1_eth_tx_from_host_rem_conv.h"
#endif

#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "StateMachineManagerBlock_impl_ch2_sfp1_eth_tx_PacketMux.h"
#endif

#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "StateMachineManagerBlock_impl_ch2_sfp1_eth_rx_fanout.h"
#endif

#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "StateMachineManagerBlock_impl_ch2_sfp1_eth_rx_to_host_filter.h"
#endif

#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "StateMachineManagerBlock_impl_ch2_sfp1_arp_server.h"
#endif

#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "StateMachineManagerBlock_impl_ch2_sfp1_icmp_echo_server.h"
#endif

#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "StateMachineManagerBlock_impl_ch2_sfp1_udp_rx.h"
#endif

#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "StateMachineManagerBlock_impl_ch2_sfp1_eth_rx_to_host_drop.h"
#endif

#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "StateMachineManagerBlock_impl_ch2_sfp1_udp_rx_EOFEFrameDrop.h"
#endif

#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "StateMachineManagerBlock_impl_network_mgmt_stream_to_host_rx_prefix_0.h"
#endif

#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "StateMachineManagerBlock_impl_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor.h"
#endif

#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "StateMachineManagerBlock_impl_dualAspectPush_network_mgmt_stream_to_host_rx_framed.h"
#endif

#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "StateMachineManagerBlock_impl_network_mgmt_stream_to_host_rx_framed_FramedStreamAligner.h"
#endif



#ifdef ICMP_ECHO_SERVER
#define ICMP_ECHO_SERVER_PRESENT 1
ICMP_ECHO_SERVER(CH2_SFP1, 1)
#endif

#ifdef UDP_STREAM
#define UDP_STREAM_PRESENT 1
UDP_STREAM(udp_ch2_sfp1, 0, CH2_SFP1, ONE_TO_ONE)
#endif

#ifdef UDP
#define UDP_PRESENT 1
UDP(CH2_SFP1)
#endif

#ifdef FRAMED_STREAM
#define FRAMED_STREAM_PRESENT 1
FRAMED_STREAM(network_mgmt_stream_from_host_tx_framed, FROM_HOST, 8, 8)
#endif

#ifdef FRAMED_STREAM
#define FRAMED_STREAM_PRESENT 1
FRAMED_STREAM(network_mgmt_stream_to_host_rx_framed, TO_HOST, 4096, 8)
#endif

#ifdef ETHERNET_MANAGEMENT_HOST_STREAM_V2
#define ETHERNET_MANAGEMENT_HOST_STREAM_V2_PRESENT 1
ETHERNET_MANAGEMENT_HOST_STREAM_V2(0, CH2_SFP1, 0, ch2_sfp1_eth_rx_to_host_filter.enable, ch2_sfp1_eth_rx_to_host_drop.badFramesCounter, ch2_sfp1_eth_rx_to_host_drop.badFramesCounter)
#endif








#ifdef MANAGER_NODE
#define MANAGER_NODE_PRESENT 1
MANAGER_NODE(FieldSwapKernel, Kernel)
MANAGER_NODE(node1_ln108_WrapperNode, EthernetSim)
MANAGER_NODE(ch2_sfp1_eth_rx_fanout, ManagerStateMachine_ch2_sfp1_eth_rx_fanout)
MANAGER_NODE(ch2_sfp1_eth_rx_to_host_filter, ManagerStateMachine_ch2_sfp1_eth_rx_to_host_filter)
MANAGER_NODE(ch2_sfp1_eth_rx_to_host_drop, ManagerStateMachine_ch2_sfp1_eth_rx_to_host_drop)
MANAGER_NODE(ch2_sfp1_eth_tx_from_host_rem_conv, ManagerStateMachine_ch2_sfp1_eth_tx_from_host_rem_conv)
MANAGER_NODE(ch2_sfp1_arp_server, ManagerStateMachine_ch2_sfp1_arp_server)
MANAGER_NODE(ch2_sfp1_icmp_echo_server, ManagerStateMachine_ch2_sfp1_icmp_echo_server)
MANAGER_NODE(ch2_sfp1_udp_rx, ManagerStateMachine_ch2_sfp1_udp_rx)
MANAGER_NODE(ch2_sfp1_udp_rx_EOFEFrameDrop, ManagerStateMachine_ch2_sfp1_udp_rx_EOFEFrameDrop)
MANAGER_NODE(ch2_sfp1_udp_tx, ManagerStateMachine_ch2_sfp1_udp_tx)
MANAGER_NODE(ch2_sfp1_eth_tx_PacketMux, ManagerStateMachine_ch2_sfp1_eth_tx_PacketMux)
MANAGER_NODE(SlicerFramer_network_mgmt_stream_from_host_tx_framed, ManagerStateMachine_SlicerFramer_network_mgmt_stream_from_host_tx_framed)
MANAGER_NODE(network_mgmt_stream_from_host_tx_framed, PCIe_From_Host_fwd)
MANAGER_NODE(network_mgmt_stream_from_host_tx_demux, ManagerStateMachine_network_mgmt_stream_from_host_tx_demux)
MANAGER_NODE(network_mgmt_stream_to_host_rx_id_0, ManagerStateMachine_network_mgmt_stream_to_host_rx_id_0)
MANAGER_NODE(network_mgmt_stream_to_host_rx_prefix_0, ManagerStateMachine_network_mgmt_stream_to_host_rx_prefix_0)
MANAGER_NODE(network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor, ManagerStateMachine_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor)
MANAGER_NODE(network_mgmt_stream_to_host_rx_framed_FramedStreamAligner, ManagerStateMachine_network_mgmt_stream_to_host_rx_framed_FramedStreamAligner)
MANAGER_NODE(dualAspectPush_network_mgmt_stream_to_host_rx_framed, ManagerStateMachine_dualAspectPush_network_mgmt_stream_to_host_rx_framed)
MANAGER_NODE(network_mgmt_stream_to_host_rx_framed, PCIe_To_Host_fwd)
MANAGER_NODE(loop_0_sink, LoopSink)
MANAGER_NODE(loop_0_src, LoopSource)
MANAGER_NODE(loop_1_sink, LoopSink)
MANAGER_NODE(loop_1_src, LoopSource)
MANAGER_NODE(loop_2_sink, LoopSink)
MANAGER_NODE(loop_2_src, LoopSource)
MANAGER_NODE(Stream_47, DualAspectMux)
MANAGER_NODE(Stream_87, Fifo)
MANAGER_NODE(Stream_91, Fifo)
MANAGER_NODE(Stream_37, Fifo)
MANAGER_NODE(Stream_52, Fifo)
MANAGER_NODE(Stream_22, Fifo)
MANAGER_NODE(Stream_40, Fifo)
MANAGER_NODE(Stream_82, Fifo)
MANAGER_NODE(Stream_45, Fifo)
MANAGER_NODE(Stream_70, Fifo)
#endif

#ifdef MANAGER_NODE_IO
#define MANAGER_NODE_IO_PRESENT 1
MANAGER_NODE_IO(FieldSwapKernel, frameIn, IN, STREAM, 78, PULL)
MANAGER_NODE_IO(FieldSwapKernel, frameOut, OUT, STREAM, 77, PUSH)
MANAGER_NODE_IO(node1_ln108_WrapperNode, tx0, IN, CH2_SFP1_CLK156_0, 69, PULL)
MANAGER_NODE_IO(node1_ln108_WrapperNode, rx0, OUT, CH2_SFP1_CLK156_0, 70, PUSH)
MANAGER_NODE_IO(ch2_sfp1_eth_rx_fanout, input, IN, CH2_SFP1_CLK156_0, 70, PUSH)
MANAGER_NODE_IO(ch2_sfp1_eth_rx_fanout, output_0, OUT, CH2_SFP1_CLK156_0, 70, PUSH)
MANAGER_NODE_IO(ch2_sfp1_eth_rx_fanout, output_1, OUT, CH2_SFP1_CLK156_0, 70, PUSH)
MANAGER_NODE_IO(ch2_sfp1_eth_rx_fanout, output_2, OUT, CH2_SFP1_CLK156_0, 70, PUSH)
MANAGER_NODE_IO(ch2_sfp1_eth_rx_fanout, output_3, OUT, CH2_SFP1_CLK156_0, 70, PUSH)
MANAGER_NODE_IO(ch2_sfp1_eth_rx_to_host_filter, input, IN, CH2_SFP1_CLK156_0, 70, PUSH)
MANAGER_NODE_IO(ch2_sfp1_eth_rx_to_host_filter, output, OUT, CH2_SFP1_CLK156_0, 70, PUSH)
MANAGER_NODE_IO(ch2_sfp1_eth_rx_to_host_drop, src, IN, CH2_SFP1_CLK156_0, 70, PUSH)
MANAGER_NODE_IO(ch2_sfp1_eth_rx_to_host_drop, dst, OUT, CH2_SFP1_CLK156_0, 70, PUSH)
MANAGER_NODE_IO(ch2_sfp1_eth_tx_from_host_rem_conv, src, IN, CH2_SFP1_CLK156_0, 69, PULL)
MANAGER_NODE_IO(ch2_sfp1_eth_tx_from_host_rem_conv, dst, OUT, CH2_SFP1_CLK156_0, 69, PUSH)
MANAGER_NODE_IO(ch2_sfp1_arp_server, fromNet, IN, CH2_SFP1_CLK156_0, 70, PUSH)
MANAGER_NODE_IO(ch2_sfp1_arp_server, toNet, OUT, CH2_SFP1_CLK156_0, 69, PULL)
MANAGER_NODE_IO(ch2_sfp1_icmp_echo_server, rx, IN, CH2_SFP1_CLK156_0, 70, PUSH)
MANAGER_NODE_IO(ch2_sfp1_icmp_echo_server, tx, OUT, CH2_SFP1_CLK156_0, 69, PUSH)
MANAGER_NODE_IO(ch2_sfp1_udp_rx, net, IN, CH2_SFP1_CLK156_0, 70, PUSH)
MANAGER_NODE_IO(ch2_sfp1_udp_rx, payload, OUT, CH2_SFP1_CLK156_0, 78, PUSH)
MANAGER_NODE_IO(ch2_sfp1_udp_rx_EOFEFrameDrop, src, IN, CH2_SFP1_CLK156_0, 78, PUSH)
MANAGER_NODE_IO(ch2_sfp1_udp_rx_EOFEFrameDrop, dst, OUT, CH2_SFP1_CLK156_0, 78, PUSH)
MANAGER_NODE_IO(ch2_sfp1_udp_tx, src, IN, CH2_SFP1_CLK156_0, 77, PUSH)
MANAGER_NODE_IO(ch2_sfp1_udp_tx, toNet, OUT, CH2_SFP1_CLK156_0, 69, PULL)
MANAGER_NODE_IO(ch2_sfp1_eth_tx_PacketMux, input_0, IN, CH2_SFP1_CLK156_0, 69, PULL)
MANAGER_NODE_IO(ch2_sfp1_eth_tx_PacketMux, input_1, IN, CH2_SFP1_CLK156_0, 69, PULL)
MANAGER_NODE_IO(ch2_sfp1_eth_tx_PacketMux, input_2, IN, CH2_SFP1_CLK156_0, 69, PULL)
MANAGER_NODE_IO(ch2_sfp1_eth_tx_PacketMux, input_3, IN, CH2_SFP1_CLK156_0, 69, PULL)
MANAGER_NODE_IO(ch2_sfp1_eth_tx_PacketMux, output, OUT, CH2_SFP1_CLK156_0, 69, PUSH)
MANAGER_NODE_IO(SlicerFramer_network_mgmt_stream_from_host_tx_framed, src, IN, CH2_SFP1_CLK156_0, 64, PUSH)
MANAGER_NODE_IO(SlicerFramer_network_mgmt_stream_from_host_tx_framed, dst, OUT, CH2_SFP1_CLK156_0, 69, PUSH)
MANAGER_NODE_IO(network_mgmt_stream_from_host_tx_framed, network_mgmt_stream_from_host_tx_framed, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(network_mgmt_stream_from_host_tx_demux, src, IN, CH2_SFP1_CLK156_0, 69, PUSH)
MANAGER_NODE_IO(network_mgmt_stream_from_host_tx_demux, dst_0, OUT, CH2_SFP1_CLK156_0, 69, PUSH)
MANAGER_NODE_IO(network_mgmt_stream_to_host_rx_id_0, data, OUT, CH2_SFP1_CLK156_0, 64, PULL)
MANAGER_NODE_IO(network_mgmt_stream_to_host_rx_prefix_0, meta, IN, CH2_SFP1_CLK156_0, 64, PULL)
MANAGER_NODE_IO(network_mgmt_stream_to_host_rx_prefix_0, src, IN, CH2_SFP1_CLK156_0, 70, PUSH)
MANAGER_NODE_IO(network_mgmt_stream_to_host_rx_prefix_0, dst, OUT, CH2_SFP1_CLK156_0, 70, PUSH)
MANAGER_NODE_IO(network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor, src, IN, CH2_SFP1_CLK156_0, 70, PUSH)
MANAGER_NODE_IO(network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor, dst, OUT, CH2_SFP1_CLK156_0, 64, PUSH)
MANAGER_NODE_IO(network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor, metadata, OUT, CH2_SFP1_CLK156_0, 96, PUSH)
MANAGER_NODE_IO(network_mgmt_stream_to_host_rx_framed_FramedStreamAligner, metadata, IN, CH2_SFP1_CLK156_0, 96, PUSH)
MANAGER_NODE_IO(network_mgmt_stream_to_host_rx_framed_FramedStreamAligner, src, IN, CH2_SFP1_CLK156_0, 128, PUSH)
MANAGER_NODE_IO(network_mgmt_stream_to_host_rx_framed_FramedStreamAligner, dst, OUT, CH2_SFP1_CLK156_0, 128, PUSH)
MANAGER_NODE_IO(dualAspectPush_network_mgmt_stream_to_host_rx_framed, src, IN, CH2_SFP1_CLK156_0, 64, PUSH)
MANAGER_NODE_IO(dualAspectPush_network_mgmt_stream_to_host_rx_framed, dst, OUT, CH2_SFP1_CLK156_0, 128, PUSH)
MANAGER_NODE_IO(network_mgmt_stream_to_host_rx_framed, network_mgmt_stream_to_host_rx_framed, IN, STREAM, 128, PUSH)
MANAGER_NODE_IO(loop_0_sink, loop_0_sink, OUT, CH2_SFP1_CLK156_0, 69, PULL)
MANAGER_NODE_IO(loop_0_src, loop_0_src, IN, CH2_SFP1_CLK156_0, 69, PULL)
MANAGER_NODE_IO(loop_1_sink, loop_1_sink, OUT, CH2_SFP1_CLK156_0, 69, PUSH)
MANAGER_NODE_IO(loop_1_src, loop_1_src, IN, CH2_SFP1_CLK156_0, 69, PUSH)
MANAGER_NODE_IO(loop_2_sink, loop_2_sink, OUT, CH2_SFP1_CLK156_0, 78, PUSH)
MANAGER_NODE_IO(loop_2_src, loop_2_src, IN, CH2_SFP1_CLK156_0, 78, PUSH)
MANAGER_NODE_IO(Stream_47, input, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_47, output, OUT, STREAM, 64, PUSH)
MANAGER_NODE_IO(Stream_87, input, IN, CH2_SFP1_CLK156_0, 78, PUSH)
MANAGER_NODE_IO(Stream_87, output, OUT, STREAM, 78, PULL)
MANAGER_NODE_IO(Stream_91, input, IN, STREAM, 64, PUSH)
MANAGER_NODE_IO(Stream_91, output, OUT, CH2_SFP1_CLK156_0, 64, PUSH)
MANAGER_NODE_IO(Stream_37, input, IN, STREAM, 77, PUSH)
MANAGER_NODE_IO(Stream_37, output, OUT, CH2_SFP1_CLK156_0, 77, PUSH)
MANAGER_NODE_IO(Stream_52, input, IN, CH2_SFP1_CLK156_0, 69, PUSH)
MANAGER_NODE_IO(Stream_52, output, OUT, CH2_SFP1_CLK156_0, 69, PUSH)
MANAGER_NODE_IO(Stream_22, input, IN, CH2_SFP1_CLK156_0, 69, PUSH)
MANAGER_NODE_IO(Stream_22, output, OUT, CH2_SFP1_CLK156_0, 69, PULL)
MANAGER_NODE_IO(Stream_40, input, IN, CH2_SFP1_CLK156_0, 69, PUSH)
MANAGER_NODE_IO(Stream_40, output, OUT, CH2_SFP1_CLK156_0, 69, PULL)
MANAGER_NODE_IO(Stream_82, input, IN, CH2_SFP1_CLK156_0, 69, PUSH)
MANAGER_NODE_IO(Stream_82, output, OUT, CH2_SFP1_CLK156_0, 69, PULL)
MANAGER_NODE_IO(Stream_45, input, IN, CH2_SFP1_CLK156_0, 69, PUSH)
MANAGER_NODE_IO(Stream_45, output, OUT, CH2_SFP1_CLK156_0, 69, PULL)
MANAGER_NODE_IO(Stream_70, input, IN, CH2_SFP1_CLK156_0, 128, PUSH)
MANAGER_NODE_IO(Stream_70, output, OUT, STREAM, 128, PUSH)
#endif

#ifdef MANAGER_STREAM
#define MANAGER_STREAM_PRESENT 1
MANAGER_STREAM(FieldSwapKernel, frameOut, Stream_37, input, 77)
MANAGER_STREAM(node1_ln108_WrapperNode, rx0, ch2_sfp1_eth_rx_fanout, input, 70)
MANAGER_STREAM(ch2_sfp1_eth_rx_fanout, output_0, ch2_sfp1_eth_rx_to_host_filter, input, 70)
MANAGER_STREAM(ch2_sfp1_eth_rx_fanout, output_1, ch2_sfp1_arp_server, fromNet, 70)
MANAGER_STREAM(ch2_sfp1_eth_rx_fanout, output_2, ch2_sfp1_icmp_echo_server, rx, 70)
MANAGER_STREAM(ch2_sfp1_eth_rx_fanout, output_3, ch2_sfp1_udp_rx, net, 70)
MANAGER_STREAM(ch2_sfp1_eth_rx_to_host_filter, output, ch2_sfp1_eth_rx_to_host_drop, src, 70)
MANAGER_STREAM(ch2_sfp1_eth_rx_to_host_drop, dst, network_mgmt_stream_to_host_rx_prefix_0, src, 70)
MANAGER_STREAM(ch2_sfp1_eth_tx_from_host_rem_conv, dst, Stream_40, input, 69)
MANAGER_STREAM(ch2_sfp1_arp_server, toNet, loop_0_src, loop_0_src, 69)
MANAGER_STREAM(ch2_sfp1_icmp_echo_server, tx, loop_1_src, loop_1_src, 69)
MANAGER_STREAM(ch2_sfp1_udp_rx, payload, ch2_sfp1_udp_rx_EOFEFrameDrop, src, 78)
MANAGER_STREAM(ch2_sfp1_udp_rx_EOFEFrameDrop, dst, loop_2_src, loop_2_src, 78)
MANAGER_STREAM(ch2_sfp1_udp_tx, toNet, ch2_sfp1_eth_tx_PacketMux, input_3, 69)
MANAGER_STREAM(ch2_sfp1_eth_tx_PacketMux, output, Stream_45, input, 69)
MANAGER_STREAM(network_mgmt_stream_from_host_tx_framed, network_mgmt_stream_from_host_tx_framed, Stream_47, input, 128)
MANAGER_STREAM(SlicerFramer_network_mgmt_stream_from_host_tx_framed, dst, Stream_52, input, 69)
MANAGER_STREAM(network_mgmt_stream_from_host_tx_demux, dst_0, Stream_22, input, 69)
MANAGER_STREAM(network_mgmt_stream_to_host_rx_id_0, data, network_mgmt_stream_to_host_rx_prefix_0, meta, 64)
MANAGER_STREAM(network_mgmt_stream_to_host_rx_prefix_0, dst, network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor, src, 70)
MANAGER_STREAM(network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor, dst, dualAspectPush_network_mgmt_stream_to_host_rx_framed, src, 64)
MANAGER_STREAM(dualAspectPush_network_mgmt_stream_to_host_rx_framed, dst, network_mgmt_stream_to_host_rx_framed_FramedStreamAligner, src, 128)
MANAGER_STREAM(network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor, metadata, network_mgmt_stream_to_host_rx_framed_FramedStreamAligner, metadata, 96)
MANAGER_STREAM(network_mgmt_stream_to_host_rx_framed_FramedStreamAligner, dst, Stream_70, input, 128)
MANAGER_STREAM(loop_0_sink, loop_0_sink, ch2_sfp1_eth_tx_PacketMux, input_1, 69)
MANAGER_STREAM(loop_1_sink, loop_1_sink, Stream_82, input, 69)
MANAGER_STREAM(loop_2_sink, loop_2_sink, Stream_87, input, 78)
MANAGER_STREAM(Stream_47, output, Stream_91, input, 64)
MANAGER_STREAM(Stream_87, output, FieldSwapKernel, frameIn, 78)
MANAGER_STREAM(Stream_91, output, SlicerFramer_network_mgmt_stream_from_host_tx_framed, src, 64)
MANAGER_STREAM(Stream_37, output, ch2_sfp1_udp_tx, src, 77)
MANAGER_STREAM(Stream_52, output, network_mgmt_stream_from_host_tx_demux, src, 69)
MANAGER_STREAM(Stream_22, output, ch2_sfp1_eth_tx_from_host_rem_conv, src, 69)
MANAGER_STREAM(Stream_40, output, ch2_sfp1_eth_tx_PacketMux, input_0, 69)
MANAGER_STREAM(Stream_82, output, ch2_sfp1_eth_tx_PacketMux, input_2, 69)
MANAGER_STREAM(Stream_45, output, node1_ln108_WrapperNode, tx0, 69)
MANAGER_STREAM(Stream_70, output, network_mgmt_stream_to_host_rx_framed, network_mgmt_stream_to_host_rx_framed, 128)
#endif

#ifdef MANAGER_NODE_STACK_TRACE
#define MANAGER_NODE_STACK_TRACE_PRESENT 1
MANAGER_NODE_STACK_TRACE(FieldSwapKernel, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
MANAGER_NODE_STACK_TRACE(node1_ln108_WrapperNode, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
MANAGER_NODE_STACK_TRACE(ch2_sfp1_eth_rx_fanout, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStateMachine(CustomManager.java:1150)\ncom.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
MANAGER_NODE_STACK_TRACE(ch2_sfp1_eth_rx_to_host_filter, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStateMachine(CustomManager.java:1150)\ncom.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
MANAGER_NODE_STACK_TRACE(ch2_sfp1_eth_rx_to_host_drop, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStateMachine(CustomManager.java:1150)\ncom.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
MANAGER_NODE_STACK_TRACE(ch2_sfp1_eth_tx_from_host_rem_conv, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStateMachine(CustomManager.java:1150)\ncom.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
MANAGER_NODE_STACK_TRACE(ch2_sfp1_arp_server, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStateMachine(CustomManager.java:1150)\ncom.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
MANAGER_NODE_STACK_TRACE(ch2_sfp1_icmp_echo_server, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStateMachine(CustomManager.java:1150)\ncom.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
MANAGER_NODE_STACK_TRACE(ch2_sfp1_udp_rx, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStateMachine(CustomManager.java:1150)\ncom.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
MANAGER_NODE_STACK_TRACE(ch2_sfp1_udp_rx_EOFEFrameDrop, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStateMachine(CustomManager.java:1150)\ncom.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
MANAGER_NODE_STACK_TRACE(ch2_sfp1_udp_tx, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStateMachine(CustomManager.java:1150)\ncom.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
MANAGER_NODE_STACK_TRACE(ch2_sfp1_eth_tx_PacketMux, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStateMachine(CustomManager.java:1150)\ncom.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
MANAGER_NODE_STACK_TRACE(SlicerFramer_network_mgmt_stream_from_host_tx_framed, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStateMachine(CustomManager.java:1150)\ncom.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
MANAGER_NODE_STACK_TRACE(network_mgmt_stream_from_host_tx_framed, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
MANAGER_NODE_STACK_TRACE(network_mgmt_stream_from_host_tx_demux, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStateMachine(CustomManager.java:1150)\ncom.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
MANAGER_NODE_STACK_TRACE(network_mgmt_stream_to_host_rx_id_0, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStateMachine(CustomManager.java:1150)\ncom.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
MANAGER_NODE_STACK_TRACE(network_mgmt_stream_to_host_rx_prefix_0, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStateMachine(CustomManager.java:1150)\ncom.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
MANAGER_NODE_STACK_TRACE(network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStateMachine(CustomManager.java:1150)\ncom.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
MANAGER_NODE_STACK_TRACE(network_mgmt_stream_to_host_rx_framed_FramedStreamAligner, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStateMachine(CustomManager.java:1150)\ncom.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
MANAGER_NODE_STACK_TRACE(dualAspectPush_network_mgmt_stream_to_host_rx_framed, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStateMachine(CustomManager.java:1150)\ncom.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
MANAGER_NODE_STACK_TRACE(network_mgmt_stream_to_host_rx_framed, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
MANAGER_NODE_STACK_TRACE(loop_0_sink, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
MANAGER_NODE_STACK_TRACE(loop_0_src, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
MANAGER_NODE_STACK_TRACE(loop_1_sink, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
MANAGER_NODE_STACK_TRACE(loop_1_src, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
MANAGER_NODE_STACK_TRACE(loop_2_sink, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
MANAGER_NODE_STACK_TRACE(loop_2_src, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
MANAGER_NODE_STACK_TRACE(Stream_47, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
MANAGER_NODE_STACK_TRACE(Stream_87, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
MANAGER_NODE_STACK_TRACE(Stream_91, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
MANAGER_NODE_STACK_TRACE(Stream_37, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
MANAGER_NODE_STACK_TRACE(Stream_52, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
MANAGER_NODE_STACK_TRACE(Stream_22, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
MANAGER_NODE_STACK_TRACE(Stream_40, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
MANAGER_NODE_STACK_TRACE(Stream_82, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
MANAGER_NODE_STACK_TRACE(Stream_45, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
MANAGER_NODE_STACK_TRACE(Stream_70, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
#endif


#ifdef MANAGER_NODE_PROPERTY
#define MANAGER_NODE_PROPERTY_PRESENT 1
MANAGER_NODE_PROPERTY(FieldSwapKernel, control_pipelining_depth, 2)
#endif


#ifdef KERNEL_CORE
#define KERNEL_CORE_PRESENT 1
KERNEL_CORE(FieldSwapKernel)
#endif

#ifdef DEBUG_INPUT_BITS
#define DEBUG_INPUT_BITS_PRESENT 1
DEBUG_INPUT_BITS(FieldSwapKernel, frameIn, 0)
#endif

#ifdef DEBUG_OUTPUT_BITS
#define DEBUG_OUTPUT_BITS_PRESENT 1
DEBUG_OUTPUT_BITS(FieldSwapKernel, frameOut, 0)
#endif

#ifdef MANAGER_NODE_PROPERTY
#define MANAGER_NODE_PROPERTY_PRESENT 1
MANAGER_NODE_PROPERTY(loop_0_src, loop_sink, loop_0_sink)
#endif

#ifdef MANAGER_NODE_PROPERTY
#define MANAGER_NODE_PROPERTY_PRESENT 1
MANAGER_NODE_PROPERTY(loop_1_src, loop_sink, loop_1_sink)
#endif

#ifdef MANAGER_NODE_PROPERTY
#define MANAGER_NODE_PROPERTY_PRESENT 1
MANAGER_NODE_PROPERTY(loop_2_src, loop_sink, loop_2_sink)
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_CTOR
#define MANAGER_NODE_CPP_SIM_MODEL_CTOR_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_CTOR(network_mgmt_stream_from_host_tx_framed, PCIePullSourceSyncMax3, "network_mgmt_stream_from_host_tx_framed")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(network_mgmt_stream_to_host_rx_id_0, maxcompilersim::state_machine::ManagerBlockSM_network_mgmt_stream_to_host_rx_id_0, "network_mgmt_stream_to_host_rx_id_0")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(loop_0_sink, LoopPullSinkSync, "loop_0_sink")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(loop_1_sink, LoopPushSinkSync, "loop_1_sink")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(loop_2_sink, LoopPushSinkSync, "loop_2_sink")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_47, DualAspectMuxSync, "Stream_47", 64, 2)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_82, FifoPushToPullSync, "Stream_82", false, 512, 69)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_87, FifoPushToPullSync, "Stream_87", false, 512, 78)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_91, FifoPushToPushSync, "Stream_91", false, 512, 64)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(FieldSwapKernel, FieldSwapKernel, "FieldSwapKernel")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(SlicerFramer_network_mgmt_stream_from_host_tx_framed, maxcompilersim::state_machine::ManagerBlockSM_SlicerFramer_network_mgmt_stream_from_host_tx_framed, "SlicerFramer_network_mgmt_stream_from_host_tx_framed")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_37, FifoPushToPushSync, "Stream_37", false, 512, 77)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_52, FifoPushToPushSync, "Stream_52", false, 512, 69)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ch2_sfp1_udp_tx, maxcompilersim::state_machine::ManagerBlockSM_ch2_sfp1_udp_tx, "ch2_sfp1_udp_tx")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(network_mgmt_stream_from_host_tx_demux, maxcompilersim::state_machine::ManagerBlockSM_network_mgmt_stream_from_host_tx_demux, "network_mgmt_stream_from_host_tx_demux")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_22, FifoPushToPullSync, "Stream_22", false, 512, 69)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ch2_sfp1_eth_tx_from_host_rem_conv, maxcompilersim::state_machine::ManagerBlockSM_ch2_sfp1_eth_tx_from_host_rem_conv, "ch2_sfp1_eth_tx_from_host_rem_conv")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_40, FifoPushToPullSync, "Stream_40", false, 512, 69)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ch2_sfp1_eth_tx_PacketMux, maxcompilersim::state_machine::ManagerBlockSM_ch2_sfp1_eth_tx_PacketMux, "ch2_sfp1_eth_tx_PacketMux")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_45, FifoPushToPullSync, "Stream_45", false, 512, 69)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(node1_ln108_WrapperNode, Ethernet, "node1_ln108_WrapperNode", simulated_system_name, "CH2_SFP1", 1, "port0", 1, 1)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ch2_sfp1_eth_rx_fanout, maxcompilersim::state_machine::ManagerBlockSM_ch2_sfp1_eth_rx_fanout, "ch2_sfp1_eth_rx_fanout")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ch2_sfp1_eth_rx_to_host_filter, maxcompilersim::state_machine::ManagerBlockSM_ch2_sfp1_eth_rx_to_host_filter, "ch2_sfp1_eth_rx_to_host_filter")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ch2_sfp1_arp_server, maxcompilersim::state_machine::ManagerBlockSM_ch2_sfp1_arp_server, "ch2_sfp1_arp_server")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ch2_sfp1_icmp_echo_server, maxcompilersim::state_machine::ManagerBlockSM_ch2_sfp1_icmp_echo_server, "ch2_sfp1_icmp_echo_server")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ch2_sfp1_udp_rx, maxcompilersim::state_machine::ManagerBlockSM_ch2_sfp1_udp_rx, "ch2_sfp1_udp_rx")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ch2_sfp1_eth_rx_to_host_drop, maxcompilersim::state_machine::ManagerBlockSM_ch2_sfp1_eth_rx_to_host_drop, "ch2_sfp1_eth_rx_to_host_drop")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(loop_0_src, LoopPullSourceSync, "loop_0_src", *MANAGER_BLOCK_FIELD(ch2_sfp1_eth_tx_PacketMux), "input_1")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(loop_1_src, LoopPushSourceSync, "loop_1_src", *MANAGER_BLOCK_FIELD(Stream_82), "input")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ch2_sfp1_udp_rx_EOFEFrameDrop, maxcompilersim::state_machine::ManagerBlockSM_ch2_sfp1_udp_rx_EOFEFrameDrop, "ch2_sfp1_udp_rx_EOFEFrameDrop")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(network_mgmt_stream_to_host_rx_prefix_0, maxcompilersim::state_machine::ManagerBlockSM_network_mgmt_stream_to_host_rx_prefix_0, "network_mgmt_stream_to_host_rx_prefix_0")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(loop_2_src, LoopPushSourceSync, "loop_2_src", *MANAGER_BLOCK_FIELD(Stream_87), "input")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor, maxcompilersim::state_machine::ManagerBlockSM_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor, "network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(dualAspectPush_network_mgmt_stream_to_host_rx_framed, maxcompilersim::state_machine::ManagerBlockSM_dualAspectPush_network_mgmt_stream_to_host_rx_framed, "dualAspectPush_network_mgmt_stream_to_host_rx_framed")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(network_mgmt_stream_to_host_rx_framed_FramedStreamAligner, maxcompilersim::state_machine::ManagerBlockSM_network_mgmt_stream_to_host_rx_framed_FramedStreamAligner, "network_mgmt_stream_to_host_rx_framed_FramedStreamAligner")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_70, FifoPushToPushSync, "Stream_70", false, 512, 128)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(network_mgmt_stream_to_host_rx_framed, PCIePushSinkSyncMax3, "network_mgmt_stream_to_host_rx_framed")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(CapabilityReg, CapRegs, "CapabilityReg", 0, 1, 1, 0, 0, 0, 0, 0, 322)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ifpga, IFPGARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(sfa, SFARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ChecksumMemory, ChecksumMem, "ChecksumMemory", "af94ce666ee16fc0b8fc00ab64aafa13ccbe157a6548e24e4113fb1916bb4d4a")
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_SETUP
#define MANAGER_NODE_CPP_SIM_MODEL_SETUP_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_SETUP(FieldSwapKernel, addDebugRegister, reg_dbg_ctld_almost_empty, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(FieldSwapKernel, addDebugRegister, reg_dbg_ctld_done, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(FieldSwapKernel, addDebugRegister, reg_dbg_ctld_empty, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(FieldSwapKernel, addDebugRegister, reg_dbg_ctld_read, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(FieldSwapKernel, addDebugRegister, reg_dbg_ctld_read_pipe_dbg, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(FieldSwapKernel, addDebugRegister, reg_dbg_ctld_request, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(FieldSwapKernel, addDebugRegister, reg_dbg_done_out, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(FieldSwapKernel, addDebugRegister, reg_dbg_fill_level, 4, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(FieldSwapKernel, addDebugRegister, reg_dbg_flush_level, 4, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(FieldSwapKernel, addDebugRegister, reg_dbg_flush_start, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(FieldSwapKernel, addDebugRegister, reg_dbg_flush_start_level, 4, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(FieldSwapKernel, addDebugRegister, reg_dbg_flushing, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(FieldSwapKernel, addDebugRegister, reg_dbg_full_level, 4, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(FieldSwapKernel, addDebugRegister, reg_dbg_out_stall, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(FieldSwapKernel, addDebugRegister, reg_dbg_out_valid, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(FieldSwapKernel, addDebugRegister, reg_dbg_stall_vector, 1, 0)
#endif

#ifdef PCIE_STREAM
#define PCIE_STREAM_PRESENT 1
PCIE_STREAM(network_mgmt_stream_from_host_tx_framed, STREAM_FROM_HOST, 0)
PCIE_STREAM(network_mgmt_stream_to_host_rx_framed, STREAM_TO_HOST, 0)
#endif

#ifdef NETWORK
#define NETWORK_PRESENT 1
NETWORK(CH2_SFP1, V6TenGigEthernetPlugin, CH2_SFP1_MAC)
#endif

#ifdef REG
#define REG_PRESENT 1
REG(FieldSwapKernel.io_frameIn_force_disabled, 0x0, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(FieldSwapKernel.io_frameOut_force_disabled, 0x1, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(FieldSwapKernel.current_run_cycle_count, 0x2, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(FieldSwapKernel.dbg_ctld_almost_empty, 0x8, 1, hwBits(1))
REG(FieldSwapKernel.dbg_ctld_done, 0x9, 1, hwBits(1))
REG(FieldSwapKernel.dbg_ctld_empty, 0xa, 1, hwBits(1))
REG(FieldSwapKernel.dbg_ctld_read, 0xb, 1, hwBits(1))
REG(FieldSwapKernel.dbg_ctld_read_pipe_dbg, 0xc, 1, hwBits(3))
REG(FieldSwapKernel.dbg_ctld_request, 0xd, 1, hwBits(1))
REG(FieldSwapKernel.dbg_done_out, 0xe, 1, hwBits(1))
REG(FieldSwapKernel.dbg_fill_level, 0xf, 1, hwBits(4))
REG(FieldSwapKernel.dbg_flush_level, 0x10, 1, hwBits(4))
REG(FieldSwapKernel.dbg_flush_start, 0x11, 1, hwBits(1))
REG(FieldSwapKernel.dbg_flush_start_level, 0x12, 1, hwBits(4))
REG(FieldSwapKernel.dbg_flushing, 0x13, 1, hwBits(1))
REG(FieldSwapKernel.dbg_full_level, 0x14, 1, hwBits(4))
REG(FieldSwapKernel.dbg_out_stall, 0x15, 1, hwBits(1))
REG(FieldSwapKernel.dbg_out_valid, 0x16, 1, hwBits(1))
REG(FieldSwapKernel.dbg_stall_vector, 0x17, 1, hwBits(1))
REG(SlicerFramer_network_mgmt_stream_from_host_tx_framed.eofCount, 0x18, 8, hwOffsetFix(64, 0, UNSIGNED))
REG(SlicerFramer_network_mgmt_stream_from_host_tx_framed.sofCount, 0x20, 8, hwOffsetFix(64, 0, UNSIGNED))
REG(ch2_sfp1_udp_tx.self_ip, 0x28, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(ch2_sfp1_udp_tx.self_mac, 0x2c, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(ch2_sfp1_eth_tx_from_host_rem_conv.badFramesCounter, 0x32, 8, hwOffsetFix(64, 0, UNSIGNED))
REG(ch2_sfp1_eth_rx_to_host_filter.enable, 0x3a, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(ch2_sfp1_arp_server.ip_address, 0x3b, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(ch2_sfp1_arp_server.mac_address, 0x3f, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.bcast_ip, 0x45, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_local_port_0, 0x49, 2, hwOffsetFix(16, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_local_port_1, 0x4b, 2, hwOffsetFix(16, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_local_port_10, 0x4d, 2, hwOffsetFix(16, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_local_port_11, 0x4f, 2, hwOffsetFix(16, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_local_port_12, 0x51, 2, hwOffsetFix(16, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_local_port_13, 0x53, 2, hwOffsetFix(16, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_local_port_14, 0x55, 2, hwOffsetFix(16, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_local_port_15, 0x57, 2, hwOffsetFix(16, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_local_port_2, 0x59, 2, hwOffsetFix(16, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_local_port_3, 0x5b, 2, hwOffsetFix(16, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_local_port_4, 0x5d, 2, hwOffsetFix(16, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_local_port_5, 0x5f, 2, hwOffsetFix(16, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_local_port_6, 0x61, 2, hwOffsetFix(16, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_local_port_7, 0x63, 2, hwOffsetFix(16, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_local_port_8, 0x65, 2, hwOffsetFix(16, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_local_port_9, 0x67, 2, hwOffsetFix(16, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_mcast_ip_0, 0x69, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_mcast_ip_1, 0x6d, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_mcast_ip_10, 0x71, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_mcast_ip_11, 0x75, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_mcast_ip_12, 0x79, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_mcast_ip_13, 0x7d, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_mcast_ip_14, 0x81, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_mcast_ip_15, 0x85, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_mcast_ip_2, 0x89, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_mcast_ip_3, 0x8d, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_mcast_ip_4, 0x91, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_mcast_ip_5, 0x95, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_mcast_ip_6, 0x99, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_mcast_ip_7, 0x9d, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_mcast_ip_8, 0xa1, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_mcast_ip_9, 0xa5, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_src_ip_0, 0xa9, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_src_ip_1, 0xad, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_src_ip_10, 0xb1, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_src_ip_11, 0xb5, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_src_ip_12, 0xb9, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_src_ip_13, 0xbd, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_src_ip_14, 0xc1, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_src_ip_15, 0xc5, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_src_ip_2, 0xc9, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_src_ip_3, 0xcd, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_src_ip_4, 0xd1, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_src_ip_5, 0xd5, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_src_ip_6, 0xd9, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_src_ip_7, 0xdd, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_src_ip_8, 0xe1, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_src_ip_9, 0xe5, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_src_port_0, 0xe9, 2, hwOffsetFix(16, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_src_port_1, 0xeb, 2, hwOffsetFix(16, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_src_port_10, 0xed, 2, hwOffsetFix(16, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_src_port_11, 0xef, 2, hwOffsetFix(16, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_src_port_12, 0xf1, 2, hwOffsetFix(16, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_src_port_13, 0xf3, 2, hwOffsetFix(16, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_src_port_14, 0xf5, 2, hwOffsetFix(16, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_src_port_15, 0xf7, 2, hwOffsetFix(16, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_src_port_2, 0xf9, 2, hwOffsetFix(16, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_src_port_3, 0xfb, 2, hwOffsetFix(16, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_src_port_4, 0xfd, 2, hwOffsetFix(16, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_src_port_5, 0xff, 2, hwOffsetFix(16, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_src_port_6, 0x101, 2, hwOffsetFix(16, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_src_port_7, 0x103, 2, hwOffsetFix(16, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_src_port_8, 0x105, 2, hwOffsetFix(16, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_src_port_9, 0x107, 2, hwOffsetFix(16, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_valid_0, 0x109, 1, hwOffsetFix(2, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_valid_1, 0x10a, 1, hwOffsetFix(2, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_valid_10, 0x10b, 1, hwOffsetFix(2, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_valid_11, 0x10c, 1, hwOffsetFix(2, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_valid_12, 0x10d, 1, hwOffsetFix(2, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_valid_13, 0x10e, 1, hwOffsetFix(2, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_valid_14, 0x10f, 1, hwOffsetFix(2, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_valid_15, 0x110, 1, hwOffsetFix(2, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_valid_2, 0x111, 1, hwOffsetFix(2, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_valid_3, 0x112, 1, hwOffsetFix(2, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_valid_4, 0x113, 1, hwOffsetFix(2, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_valid_5, 0x114, 1, hwOffsetFix(2, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_valid_6, 0x115, 1, hwOffsetFix(2, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_valid_7, 0x116, 1, hwOffsetFix(2, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_valid_8, 0x117, 1, hwOffsetFix(2, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.filter_valid_9, 0x118, 1, hwOffsetFix(2, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx.self_ip, 0x119, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(ch2_sfp1_eth_rx_to_host_drop.badFramesCounter, 0x11d, 8, hwOffsetFix(64, 0, UNSIGNED))
REG(ch2_sfp1_udp_rx_EOFEFrameDrop.badFramesCounter, 0x125, 8, hwOffsetFix(64, 0, UNSIGNED))
REG(network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor.eofCount, 0x12d, 8, hwOffsetFix(64, 0, UNSIGNED))
REG(network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor.sofCount, 0x135, 8, hwOffsetFix(64, 0, UNSIGNED))
REG(ifpga.ifpga_ctrl, 0x13d, 1, hwBits(8))
REG(SignalForwardingAdapter.SFA_FORWARD_EN, 0x13e, 4, hwBits(32))
#endif

#ifdef REG_V2
#define REG_V2_PRESENT 1
REG_V2(FieldSwapKernel.io_frameIn_force_disabled, 0x0, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(FieldSwapKernel.io_frameOut_force_disabled, 0x1, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(FieldSwapKernel.current_run_cycle_count, 0x2, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(FieldSwapKernel.dbg_ctld_almost_empty, 0x8, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(FieldSwapKernel.dbg_ctld_done, 0x9, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(FieldSwapKernel.dbg_ctld_empty, 0xa, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(FieldSwapKernel.dbg_ctld_read, 0xb, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(FieldSwapKernel.dbg_ctld_read_pipe_dbg, 0xc, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(FieldSwapKernel.dbg_ctld_request, 0xd, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(FieldSwapKernel.dbg_done_out, 0xe, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(FieldSwapKernel.dbg_fill_level, 0xf, 1, hwBits(4), HOST_READ_ONLY, false)
REG_V2(FieldSwapKernel.dbg_flush_level, 0x10, 1, hwBits(4), HOST_READ_ONLY, false)
REG_V2(FieldSwapKernel.dbg_flush_start, 0x11, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(FieldSwapKernel.dbg_flush_start_level, 0x12, 1, hwBits(4), HOST_READ_ONLY, false)
REG_V2(FieldSwapKernel.dbg_flushing, 0x13, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(FieldSwapKernel.dbg_full_level, 0x14, 1, hwBits(4), HOST_READ_ONLY, false)
REG_V2(FieldSwapKernel.dbg_out_stall, 0x15, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(FieldSwapKernel.dbg_out_valid, 0x16, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(FieldSwapKernel.dbg_stall_vector, 0x17, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(SlicerFramer_network_mgmt_stream_from_host_tx_framed.eofCount, 0x18, 8, hwOffsetFix(64, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(SlicerFramer_network_mgmt_stream_from_host_tx_framed.sofCount, 0x20, 8, hwOffsetFix(64, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(ch2_sfp1_udp_tx.self_ip, 0x28, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_tx.self_mac, 0x2c, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_eth_tx_from_host_rem_conv.badFramesCounter, 0x32, 8, hwOffsetFix(64, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(ch2_sfp1_eth_rx_to_host_filter.enable, 0x3a, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_arp_server.ip_address, 0x3b, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_arp_server.mac_address, 0x3f, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.bcast_ip, 0x45, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_local_port_0, 0x49, 2, hwOffsetFix(16, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_local_port_1, 0x4b, 2, hwOffsetFix(16, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_local_port_10, 0x4d, 2, hwOffsetFix(16, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_local_port_11, 0x4f, 2, hwOffsetFix(16, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_local_port_12, 0x51, 2, hwOffsetFix(16, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_local_port_13, 0x53, 2, hwOffsetFix(16, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_local_port_14, 0x55, 2, hwOffsetFix(16, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_local_port_15, 0x57, 2, hwOffsetFix(16, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_local_port_2, 0x59, 2, hwOffsetFix(16, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_local_port_3, 0x5b, 2, hwOffsetFix(16, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_local_port_4, 0x5d, 2, hwOffsetFix(16, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_local_port_5, 0x5f, 2, hwOffsetFix(16, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_local_port_6, 0x61, 2, hwOffsetFix(16, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_local_port_7, 0x63, 2, hwOffsetFix(16, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_local_port_8, 0x65, 2, hwOffsetFix(16, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_local_port_9, 0x67, 2, hwOffsetFix(16, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_mcast_ip_0, 0x69, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_mcast_ip_1, 0x6d, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_mcast_ip_10, 0x71, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_mcast_ip_11, 0x75, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_mcast_ip_12, 0x79, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_mcast_ip_13, 0x7d, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_mcast_ip_14, 0x81, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_mcast_ip_15, 0x85, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_mcast_ip_2, 0x89, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_mcast_ip_3, 0x8d, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_mcast_ip_4, 0x91, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_mcast_ip_5, 0x95, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_mcast_ip_6, 0x99, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_mcast_ip_7, 0x9d, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_mcast_ip_8, 0xa1, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_mcast_ip_9, 0xa5, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_src_ip_0, 0xa9, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_src_ip_1, 0xad, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_src_ip_10, 0xb1, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_src_ip_11, 0xb5, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_src_ip_12, 0xb9, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_src_ip_13, 0xbd, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_src_ip_14, 0xc1, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_src_ip_15, 0xc5, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_src_ip_2, 0xc9, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_src_ip_3, 0xcd, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_src_ip_4, 0xd1, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_src_ip_5, 0xd5, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_src_ip_6, 0xd9, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_src_ip_7, 0xdd, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_src_ip_8, 0xe1, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_src_ip_9, 0xe5, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_src_port_0, 0xe9, 2, hwOffsetFix(16, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_src_port_1, 0xeb, 2, hwOffsetFix(16, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_src_port_10, 0xed, 2, hwOffsetFix(16, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_src_port_11, 0xef, 2, hwOffsetFix(16, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_src_port_12, 0xf1, 2, hwOffsetFix(16, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_src_port_13, 0xf3, 2, hwOffsetFix(16, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_src_port_14, 0xf5, 2, hwOffsetFix(16, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_src_port_15, 0xf7, 2, hwOffsetFix(16, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_src_port_2, 0xf9, 2, hwOffsetFix(16, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_src_port_3, 0xfb, 2, hwOffsetFix(16, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_src_port_4, 0xfd, 2, hwOffsetFix(16, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_src_port_5, 0xff, 2, hwOffsetFix(16, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_src_port_6, 0x101, 2, hwOffsetFix(16, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_src_port_7, 0x103, 2, hwOffsetFix(16, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_src_port_8, 0x105, 2, hwOffsetFix(16, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_src_port_9, 0x107, 2, hwOffsetFix(16, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_valid_0, 0x109, 1, hwOffsetFix(2, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_valid_1, 0x10a, 1, hwOffsetFix(2, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_valid_10, 0x10b, 1, hwOffsetFix(2, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_valid_11, 0x10c, 1, hwOffsetFix(2, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_valid_12, 0x10d, 1, hwOffsetFix(2, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_valid_13, 0x10e, 1, hwOffsetFix(2, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_valid_14, 0x10f, 1, hwOffsetFix(2, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_valid_15, 0x110, 1, hwOffsetFix(2, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_valid_2, 0x111, 1, hwOffsetFix(2, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_valid_3, 0x112, 1, hwOffsetFix(2, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_valid_4, 0x113, 1, hwOffsetFix(2, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_valid_5, 0x114, 1, hwOffsetFix(2, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_valid_6, 0x115, 1, hwOffsetFix(2, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_valid_7, 0x116, 1, hwOffsetFix(2, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_valid_8, 0x117, 1, hwOffsetFix(2, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.filter_valid_9, 0x118, 1, hwOffsetFix(2, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_udp_rx.self_ip, 0x119, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_eth_rx_to_host_drop.badFramesCounter, 0x11d, 8, hwOffsetFix(64, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(ch2_sfp1_udp_rx_EOFEFrameDrop.badFramesCounter, 0x125, 8, hwOffsetFix(64, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor.eofCount, 0x12d, 8, hwOffsetFix(64, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor.sofCount, 0x135, 8, hwOffsetFix(64, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(ifpga.ifpga_ctrl, 0x13d, 1, hwBits(8), HOST_READ_WRITE, false)
REG_V2(SignalForwardingAdapter.SFA_FORWARD_EN, 0x13e, 4, hwBits(32), HOST_READ_WRITE, false)
#endif


#ifdef MEM2
#define MEM2_PRESENT 1
MEM2(ch2_sfp1_udp_tx.routing_lookup_1, 0x400000, hwOffsetFix(64, 0, UNSIGNED))
MEM2(ch2_sfp1_udp_tx.routing_lookup_2, 0x410000, hwOffsetFix(57, 0, UNSIGNED))
MEM2(node1_ln108_WrapperNode.CH2_SFP1_MAC, 0x420000, hwBits(32))
MEM2(ch2_sfp1_icmp_echo_server.params, 0x430000, hwOffsetFix(48, 0, UNSIGNED))
#endif

#ifdef MEM_DEPTH
#define MEM_DEPTH_PRESENT 1
MEM_DEPTH(ch2_sfp1_udp_tx.routing_lookup_1, 16)
MEM_DEPTH(ch2_sfp1_udp_tx.routing_lookup_2, 16)
MEM_DEPTH(node1_ln108_WrapperNode.CH2_SFP1_MAC, 8192)
MEM_DEPTH(ch2_sfp1_icmp_echo_server.params, 2)
#endif

#ifdef CHECKSUM
#define CHECKSUM_PRESENT 1
CHECKSUM("af94ce666ee16fc0b8fc00ab64aafa13ccbe157a6548e24e4113fb1916bb4d4a")
#endif

#ifdef CAPABILITY
#define CAPABILITY_PRESENT 1
CAPABILITY(MAX3REV, MAX3REVA)
CAPABILITY(MAX3RAM, DDR3_24GB)
CAPABILITY(MAX3FPGA, SXT475_2ES)
#endif

#ifdef DEFINE_DESIGN_NAME
#define DESIGN_NAME FieldSwap
#endif /* DEFINE_DESIGN_NAME */

#ifndef SLIC_NO_DECLARATIONS
/**\file */
#ifndef SLIC_DECLARATIONS_FieldSwap_H
#define SLIC_DECLARATIONS_FieldSwap_H
#include "MaxSLiCInterface.h"
#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#define FieldSwap_USE_NETWORK_MANAGER (1)
#define FieldSwap_PCIE_ALIGNMENT (16)


/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/




/**
 * \brief Basic static function for the interface 'default'.
 * 
 * \param [out] outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_eofCount Output scalar parameter "SlicerFramer_network_mgmt_stream_from_host_tx_framed.eofCount".
 * \param [out] outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_sofCount Output scalar parameter "SlicerFramer_network_mgmt_stream_from_host_tx_framed.sofCount".
 * \param [out] outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_eofCount Output scalar parameter "network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor.eofCount".
 * \param [out] outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_sofCount Output scalar parameter "network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor.sofCount".
 * \param [in] instream_network_mgmt_stream_from_host_tx_framed Stream "network_mgmt_stream_from_host_tx_framed".
 * \param [in] instream_size_network_mgmt_stream_from_host_tx_framed The size of the stream instream_network_mgmt_stream_from_host_tx_framed in bytes.
 * \param [out] outstream_network_mgmt_stream_to_host_rx_framed Stream "network_mgmt_stream_to_host_rx_framed".
 * \param [in] outstream_size_network_mgmt_stream_to_host_rx_framed The size of the stream outstream_network_mgmt_stream_to_host_rx_framed in bytes.
 */
void FieldSwap(
	uint64_t *outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_eofCount,
	uint64_t *outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_sofCount,
	uint64_t *outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_eofCount,
	uint64_t *outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_sofCount,
	const void *instream_network_mgmt_stream_from_host_tx_framed,
	size_t instream_size_network_mgmt_stream_from_host_tx_framed,
	void *outstream_network_mgmt_stream_to_host_rx_framed,
	size_t outstream_size_network_mgmt_stream_to_host_rx_framed);

/**
 * \brief Basic static non-blocking function for the interface 'default'.
 * 
 * Schedule to run on an engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 * 
 * 
 * \param [out] outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_eofCount Output scalar parameter "SlicerFramer_network_mgmt_stream_from_host_tx_framed.eofCount".
 * \param [out] outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_sofCount Output scalar parameter "SlicerFramer_network_mgmt_stream_from_host_tx_framed.sofCount".
 * \param [out] outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_eofCount Output scalar parameter "network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor.eofCount".
 * \param [out] outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_sofCount Output scalar parameter "network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor.sofCount".
 * \param [in] instream_network_mgmt_stream_from_host_tx_framed Stream "network_mgmt_stream_from_host_tx_framed".
 * \param [in] instream_size_network_mgmt_stream_from_host_tx_framed The size of the stream instream_network_mgmt_stream_from_host_tx_framed in bytes.
 * \param [out] outstream_network_mgmt_stream_to_host_rx_framed Stream "network_mgmt_stream_to_host_rx_framed".
 * \param [in] outstream_size_network_mgmt_stream_to_host_rx_framed The size of the stream outstream_network_mgmt_stream_to_host_rx_framed in bytes.
 * \return A handle on the execution status, or NULL in case of error.
 */
max_run_t *FieldSwap_nonblock(
	uint64_t *outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_eofCount,
	uint64_t *outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_sofCount,
	uint64_t *outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_eofCount,
	uint64_t *outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_sofCount,
	const void *instream_network_mgmt_stream_from_host_tx_framed,
	size_t instream_size_network_mgmt_stream_from_host_tx_framed,
	void *outstream_network_mgmt_stream_to_host_rx_framed,
	size_t outstream_size_network_mgmt_stream_to_host_rx_framed);

/**
 * \brief Advanced static interface, structure for the engine interface 'default'
 * 
 */
typedef struct { 
	uint64_t *outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_eofCount; /**<  [out] Output scalar parameter "SlicerFramer_network_mgmt_stream_from_host_tx_framed.eofCount". */
	uint64_t *outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_sofCount; /**<  [out] Output scalar parameter "SlicerFramer_network_mgmt_stream_from_host_tx_framed.sofCount". */
	uint64_t *outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_eofCount; /**<  [out] Output scalar parameter "network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor.eofCount". */
	uint64_t *outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_sofCount; /**<  [out] Output scalar parameter "network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor.sofCount". */
	const void *instream_network_mgmt_stream_from_host_tx_framed; /**<  [in] Stream "network_mgmt_stream_from_host_tx_framed". */
	size_t instream_size_network_mgmt_stream_from_host_tx_framed; /**<  [in] The size of the stream instream_network_mgmt_stream_from_host_tx_framed in bytes. */
	void *outstream_network_mgmt_stream_to_host_rx_framed; /**<  [out] Stream "network_mgmt_stream_to_host_rx_framed". */
	size_t outstream_size_network_mgmt_stream_to_host_rx_framed; /**<  [in] The size of the stream outstream_network_mgmt_stream_to_host_rx_framed in bytes. */
} FieldSwap_actions_t;

/**
 * \brief Advanced static function for the interface 'default'.
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in,out] interface_actions Actions to be executed.
 */
void FieldSwap_run(
	max_engine_t *engine,
	FieldSwap_actions_t *interface_actions);

/**
 * \brief Advanced static non-blocking function for the interface 'default'.
 *
 * Schedule the actions to run on the engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in] interface_actions Actions to be executed.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *FieldSwap_run_nonblock(
	max_engine_t *engine,
	FieldSwap_actions_t *interface_actions);

/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void FieldSwap_run_group(max_group_t *group, FieldSwap_actions_t *interface_actions);

/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *FieldSwap_run_group_nonblock(max_group_t *group, FieldSwap_actions_t *interface_actions);

/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void FieldSwap_run_array(max_engarray_t *engarray, FieldSwap_actions_t *interface_actions[]);

/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *FieldSwap_run_array_nonblock(max_engarray_t *engarray, FieldSwap_actions_t *interface_actions[]);

/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* FieldSwap_convert(max_file_t *maxfile, FieldSwap_actions_t *interface_actions);

/**
 * \brief Initialise a maxfile.
 */
max_file_t* FieldSwap_init(void);

/* Error handling functions */
int FieldSwap_has_errors(void);
const char* FieldSwap_get_errors(void);
void FieldSwap_clear_errors(void);
/* Free statically allocated maxfile data */
void FieldSwap_free(void);
/* returns: -1 = error running command; 0 = no error reported */
int FieldSwap_simulator_start(void);
/* returns: -1 = error running command; 0 = no error reported */
int FieldSwap_simulator_stop(void);

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* SLIC_DECLARATIONS_FieldSwap_H */

#endif /* SLIC_NO_DECLARATIONS */

#ifdef PHOTON_NODE_DATA
#define PHOTON_NODE_DATA_PRESENT 1
PHOTON_NODE_DATA(FieldSwapKernel, 23, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x0; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:80)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:148)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:28)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 24, NodeDisableInput, "disableInput('frameIn')", "com.maxeler.maxcompiler.v2.kernelcompiler.Flush.disableInput(Flush.java:207)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:148)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:28)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 123, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:522)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:125)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:28)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 4, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:80)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.oneShotTrigger(FrameIO.java:50)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:125)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:28)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 5, NodeHold, "Hold", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions.streamHold(Reductions.java:715)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.oneShotTrigger(FrameIO.java:49)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:125)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:28)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 6, NodePulse, "pulse(1)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.pulse(Count.java:728)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.inputEnableForStaticFrame(FrameIO.java:218)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:138)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:28)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 7, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:522)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:143)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:28)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 8, NodeInputMappedReg, "Scalar input (io_frameIn_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:522)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:145)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:28)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 9, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:522)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:145)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:28)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 10, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:522)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:145)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:28)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 11, NodeInput, "Input(frameIn)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:522)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:145)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:28)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 17, NodeSlice, "[68:68]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:522)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:145)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:28)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 18, NodeReinterpret, "<{HWOffsetFix:1, 0, UNSIGNED}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:522)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:145)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:28)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 127, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 46, NodeConstantRawBits, "{HWOffsetFix:33, 0, UNSIGNED}\n0x100000000; 4.294967296E9", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.makeCounter(Count.java:388)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:166)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:28)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 47, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.makeCounter(Count.java:388)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:166)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:28)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 148, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:589)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:166)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:28)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 49, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:589)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:166)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:28)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 141, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 50, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:522)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:166)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:28)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 51, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:522)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:169)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:28)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 63, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:80)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.oneShotTrigger(FrameIO.java:50)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:287)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:39)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 64, NodeHold, "Hold", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions.streamHold(Reductions.java:715)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.oneShotTrigger(FrameIO.java:49)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:287)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:39)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 124, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000040; 64.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:883)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.makeBusOutput(SourcelessOutputManager.maxj:627)\ncom.maxeler.networking.v1.framed_kernels.FrameData.getBusOutput(FrameData.maxj:221)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:294)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:39)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 65, NodeStateMachine, "State Machine (outputSM_frameOut)", "com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib.addStateMachine(KernelLib.java:493)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.makeBusOutput(SourcelessOutputManager.maxj:600)\ncom.maxeler.networking.v1.framed_kernels.FrameData.getBusOutput(FrameData.maxj:221)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:294)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:39)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 98, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:522)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:315)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:39)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 99, NodeInputMappedReg, "Scalar input (io_frameOut_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:723)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:315)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:39)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 100, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:723)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:315)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:39)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 101, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:723)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:315)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:39)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 138, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 21, NodeSlice, "[77:70]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:522)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:145)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:28)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 22, NodeReinterpret, "<{HWOffsetFix:8, 0, UNSIGNED}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:522)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:145)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:28)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 110, NodeReinterpret, "<{HWRawBits:8}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:723)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:315)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:39)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 137, NodeFIFO, "FIFO(7)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 93, NodeReinterpret, "<{HWRawBits:1}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.pack(DFEVar.java:1320)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.forceConnect(FrameIO.java:223)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:304)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:39)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 94, NodeReinterpret, "<{HWOffsetFix:1, 0, UNSIGNED}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.KernelType.unpack(KernelType.java:62)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.forceConnect(FrameIO.java:223)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:304)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:39)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 108, NodeReinterpret, "<{HWRawBits:1}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:723)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:315)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:39)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 136, NodeFIFO, "FIFO(6)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 91, NodeReinterpret, "<{HWRawBits:1}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.pack(DFEVar.java:1320)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.forceConnect(FrameIO.java:223)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:301)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:39)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 92, NodeReinterpret, "<{HWOffsetFix:1, 0, UNSIGNED}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.KernelType.unpack(KernelType.java:62)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.forceConnect(FrameIO.java:223)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:301)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:39)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 106, NodeReinterpret, "<{HWRawBits:1}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:723)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:315)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:39)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 135, NodeFIFO, "FIFO(6)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 96, NodeReinterpret, "<{HWRawBits:3}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.pack(DFEVar.java:1320)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.forceConnect(FrameIO.java:223)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:309)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:39)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 97, NodeReinterpret, "<{HWOffsetFix:3, 0, UNSIGNED}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.KernelType.unpack(KernelType.java:62)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.forceConnect(FrameIO.java:223)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:309)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:39)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 104, NodeReinterpret, "<{HWRawBits:3}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:723)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:315)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:39)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 134, NodeFIFO, "FIFO(6)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 133, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 132, NodeFIFO, "FIFO(4)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 86, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:245)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.makeBusOutput(SourcelessOutputManager.maxj:692)\ncom.maxeler.networking.v1.framed_kernels.FrameData.getBusOutput(FrameData.maxj:221)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:294)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:39)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 129, NodeFIFO, "FIFO(4)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 72, NodeCast, "{HWOffsetFix:1, 0, TWOSCOMPLEMENT}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:165)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.makeBusOutput(SourcelessOutputManager.maxj:675)\ncom.maxeler.networking.v1.framed_kernels.FrameData.getBusOutput(FrameData.maxj:221)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:294)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:39)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 125, NodeReinterpret, "<{HWRawBits:1}>", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 74, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Bitops.padSignExtend(Bitops.java:195)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.makeBusOutput(SourcelessOutputManager.maxj:675)\ncom.maxeler.networking.v1.framed_kernels.FrameData.getBusOutput(FrameData.maxj:221)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:294)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:39)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 75, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Bitops.padSignExtend(Bitops.java:195)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.makeBusOutput(SourcelessOutputManager.maxj:675)\ncom.maxeler.networking.v1.framed_kernels.FrameData.getBusOutput(FrameData.maxj:221)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:294)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:39)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 76, NodeReinterpret, "<{HWOffsetFix:64, 0, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Bitops.padSignExtend(Bitops.java:195)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.makeBusOutput(SourcelessOutputManager.maxj:675)\ncom.maxeler.networking.v1.framed_kernels.FrameData.getBusOutput(FrameData.maxj:221)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:294)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:39)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 77, NodeCast, "{HWOffsetFix:1, 0, TWOSCOMPLEMENT}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:165)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.makeBusOutput(SourcelessOutputManager.maxj:676)\ncom.maxeler.networking.v1.framed_kernels.FrameData.getBusOutput(FrameData.maxj:221)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:294)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:39)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 130, NodeFIFO, "FIFO(4)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 126, NodeReinterpret, "<{HWRawBits:1}>", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 79, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Bitops.padSignExtend(Bitops.java:195)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.makeBusOutput(SourcelessOutputManager.maxj:676)\ncom.maxeler.networking.v1.framed_kernels.FrameData.getBusOutput(FrameData.maxj:221)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:294)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:39)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 80, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Bitops.padSignExtend(Bitops.java:195)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.makeBusOutput(SourcelessOutputManager.maxj:676)\ncom.maxeler.networking.v1.framed_kernels.FrameData.getBusOutput(FrameData.maxj:221)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:294)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:39)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 81, NodeReinterpret, "<{HWOffsetFix:64, 0, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Bitops.padSignExtend(Bitops.java:195)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.makeBusOutput(SourcelessOutputManager.maxj:676)\ncom.maxeler.networking.v1.framed_kernels.FrameData.getBusOutput(FrameData.maxj:221)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:294)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:39)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 82, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cat(DFEVar.java:188)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.makeBusOutput(SourcelessOutputManager.maxj:675)\ncom.maxeler.networking.v1.framed_kernels.FrameData.getBusOutput(FrameData.maxj:221)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:294)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:39)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 83, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:522)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.makeBusOutput(SourcelessOutputManager.maxj:681)\ncom.maxeler.networking.v1.framed_kernels.FrameData.getBusOutput(FrameData.maxj:221)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:294)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:39)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 69, NodeConstantRawBits, "{HWRawBits:64}\n0x0000000000000000", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.zero(Constant.java:484)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.makeBusOutput(SourcelessOutputManager.maxj:670)\ncom.maxeler.networking.v1.framed_kernels.FrameData.getBusOutput(FrameData.maxj:221)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:294)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:39)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 147, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.makeCounter(Count.java:388)\ncom.maxeler.networking.v1.framed_kernels.FrameData.holdFirstValue(FrameData.maxj:361)\ncom.maxeler.networking.v1.framed_kernels.FrameData.makeStaticFieldStream(FrameData.maxj:619)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:655)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:155)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:28)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 146, NodeConstantRawBits, "{HWOffsetFix:2, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.makeCounter(Count.java:388)\ncom.maxeler.networking.v1.framed_kernels.FrameData.holdFirstValue(FrameData.maxj:361)\ncom.maxeler.networking.v1.framed_kernels.FrameData.makeStaticFieldStream(FrameData.maxj:619)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:655)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:155)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:28)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 34, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.makeCounter(Count.java:388)\ncom.maxeler.networking.v1.framed_kernels.FrameData.holdFirstValue(FrameData.maxj:361)\ncom.maxeler.networking.v1.framed_kernels.FrameData.makeStaticFieldStream(FrameData.maxj:619)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:655)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:155)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:28)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 35, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.complement(DFEVar.java:1052)\ncom.maxeler.networking.v1.framed_kernels.FrameData.holdFirstValue(FrameData.maxj:367)\ncom.maxeler.networking.v1.framed_kernels.FrameData.makeStaticFieldStream(FrameData.maxj:619)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:655)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:155)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:28)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 12, NodeSlice, "[63:0]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:522)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:145)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:28)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 30, NodeSlice, "[31:0]", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.slice(DFEVar.java:322)\ncom.maxeler.networking.v1.framed_kernels.FrameData.busSlice(FrameData.maxj:580)\ncom.maxeler.networking.v1.framed_kernels.FrameData.makeStaticFieldStream(FrameData.maxj:606)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:655)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:155)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:28)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 36, NodeHold, "Hold", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions.streamHold(Reductions.java:641)\ncom.maxeler.networking.v1.framed_kernels.FrameData.holdFirstValue(FrameData.maxj:370)\ncom.maxeler.networking.v1.framed_kernels.FrameData.makeStaticFieldStream(FrameData.maxj:619)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:655)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:155)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:28)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 37, NodeReinterpret, "<{HWOffsetFix:32, 0, UNSIGNED}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:156)\ncom.maxeler.networking.v1.framed_kernels.FrameData.makeStaticFieldStream(FrameData.maxj:626)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:655)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:155)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:28)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 55, NodeReinterpret, "<{HWRawBits:32}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.pack(DFEVectorBase.java:216)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.addStaticField(SourcelessOutputManager.maxj:552)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:205)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:155)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:31)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 145, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.makeCounter(Count.java:388)\ncom.maxeler.networking.v1.framed_kernels.FrameData.holdFirstValue(FrameData.maxj:361)\ncom.maxeler.networking.v1.framed_kernels.FrameData.makeStaticFieldStream(FrameData.maxj:619)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:655)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:155)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:28)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 144, NodeConstantRawBits, "{HWOffsetFix:2, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.makeCounter(Count.java:388)\ncom.maxeler.networking.v1.framed_kernels.FrameData.holdFirstValue(FrameData.maxj:361)\ncom.maxeler.networking.v1.framed_kernels.FrameData.makeStaticFieldStream(FrameData.maxj:619)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:655)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:155)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:28)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 42, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.makeCounter(Count.java:388)\ncom.maxeler.networking.v1.framed_kernels.FrameData.holdFirstValue(FrameData.maxj:361)\ncom.maxeler.networking.v1.framed_kernels.FrameData.makeStaticFieldStream(FrameData.maxj:619)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:655)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:155)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:28)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 43, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.complement(DFEVar.java:1052)\ncom.maxeler.networking.v1.framed_kernels.FrameData.holdFirstValue(FrameData.maxj:367)\ncom.maxeler.networking.v1.framed_kernels.FrameData.makeStaticFieldStream(FrameData.maxj:619)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:655)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:155)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:28)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 38, NodeSlice, "[63:32]", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.slice(DFEVar.java:322)\ncom.maxeler.networking.v1.framed_kernels.FrameData.busSlice(FrameData.maxj:580)\ncom.maxeler.networking.v1.framed_kernels.FrameData.makeStaticFieldStream(FrameData.maxj:606)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:655)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:155)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:28)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 44, NodeHold, "Hold", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions.streamHold(Reductions.java:641)\ncom.maxeler.networking.v1.framed_kernels.FrameData.holdFirstValue(FrameData.maxj:370)\ncom.maxeler.networking.v1.framed_kernels.FrameData.makeStaticFieldStream(FrameData.maxj:619)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:655)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:155)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:28)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 45, NodeReinterpret, "<{HWOffsetFix:32, 0, UNSIGNED}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:156)\ncom.maxeler.networking.v1.framed_kernels.FrameData.makeStaticFieldStream(FrameData.maxj:626)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:655)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:155)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:28)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 52, NodeReinterpret, "<{HWRawBits:32}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.pack(DFEVectorBase.java:216)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.addStaticField(SourcelessOutputManager.maxj:552)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:205)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:155)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:31)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 60, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Bitops.concat(Bitops.java:158)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.commitStaticFragmentsToBus(SourcelessOutputManager.maxj:412)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.addStaticField(SourcelessOutputManager.maxj:570)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:205)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:155)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:31)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 70, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cat(DFEVar.java:188)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.makeBusOutput(SourcelessOutputManager.maxj:670)\ncom.maxeler.networking.v1.framed_kernels.FrameData.getBusOutput(FrameData.maxj:221)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:294)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:39)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 71, NodeShift, "<<", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Bitops.circularLeftShift(Bitops.java:306)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.makeBusOutput(SourcelessOutputManager.maxj:672)\ncom.maxeler.networking.v1.framed_kernels.FrameData.getBusOutput(FrameData.maxj:221)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:294)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:39)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 84, NodeOr, "|", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.or(DFEVar.java:410)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.makeBusOutput(SourcelessOutputManager.maxj:681)\ncom.maxeler.networking.v1.framed_kernels.FrameData.getBusOutput(FrameData.maxj:221)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:294)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:39)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 85, NodeHold, "Hold", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions.streamHold(Reductions.java:715)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.makeBusOutput(SourcelessOutputManager.maxj:686)\ncom.maxeler.networking.v1.framed_kernels.FrameData.getBusOutput(FrameData.maxj:221)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:294)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:39)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 88, NodeSlice, "[63:0]", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.slice(DFEVar.java:322)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.makeBusOutput(SourcelessOutputManager.maxj:696)\ncom.maxeler.networking.v1.framed_kernels.FrameData.getBusOutput(FrameData.maxj:221)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:294)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:39)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 87, NodeSlice, "[127:64]", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.slice(DFEVar.java:322)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.makeBusOutput(SourcelessOutputManager.maxj:695)\ncom.maxeler.networking.v1.framed_kernels.FrameData.getBusOutput(FrameData.maxj:221)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:294)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:39)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 89, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1152)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.makeBusOutput(SourcelessOutputManager.maxj:694)\ncom.maxeler.networking.v1.framed_kernels.FrameData.getBusOutput(FrameData.maxj:221)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:294)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:39)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 105, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:723)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:315)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:39)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 107, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:723)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:315)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:39)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 109, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:723)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:315)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:39)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 111, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:723)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:315)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:39)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 102, NodeOutput, "Output(frameOut)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:723)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:315)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:39)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 117, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 143, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 114, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 115, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 116, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 118, NodeOutputMappedReg, "Scalar output (current_run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 15, NodeSlice, "[67:67]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:522)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:145)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:28)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 16, NodeReinterpret, "<{HWOffsetFix:1, 0, UNSIGNED}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:522)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:145)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:28)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 142, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 25, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.complement(DFEVar.java:1052)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:149)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:28)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 26, NodeOr, "|", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.or(DFEVar.java:410)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:149)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:28)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 27, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:80)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.oneShotTrigger(FrameIO.java:50)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:149)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:28)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 28, NodeHold, "Hold", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions.streamHold(Reductions.java:715)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.oneShotTrigger(FrameIO.java:49)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:149)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:28)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 140, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 112, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:522)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:320)\nfieldswap.SpreadDeltaKernel.<init>(SpreadDeltaKernel.maxj:39)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:16)\n")
PHOTON_NODE_DATA(FieldSwapKernel, 122, NodeFlush, "flush after trigger", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldswap.SpreadDeltaManager.main(SpreadDeltaManager.maxj:21)\n")
#endif

#ifdef SLIC_USE_DEFINITIONS
#include <stdio.h>
#include <math.h>
#include <pthread.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
static max_file_t *stored_maxfile = NULL;
static max_engine_t *stored_engine = NULL;
static char *stored_error = NULL;
static int stored_has_error = 0;
static pthread_once_t slic_bs_is_initialised = PTHREAD_ONCE_INIT;

static void set_error(const char *error_str)
{
	stored_has_error = 1; 
	if(stored_error == NULL) {
		stored_error = strdup(error_str);
	} else {
		char *nerr = malloc(strlen(stored_error) + strlen(error_str) + 2);
		sprintf(nerr, "%s\n%s", stored_error, error_str);
		free(stored_error);
		stored_error = nerr;
	}
}
static void set_error_and_free(char *error_str){
	set_error(error_str);
	free(error_str);
}
int FieldSwap_has_errors(void)
{	return stored_has_error; }
const char* FieldSwap_get_errors(void)
{	return stored_error; }
void FieldSwap_clear_errors(void)
{
	free(stored_error);
	stored_error = NULL;
	stored_has_error = 0;
}

static char FieldSwap_use_simulation[16];
static void FieldSwap_def_use_simulation(void)
{
	long pid = ((long) getpid()) % 100000;
	snprintf(FieldSwap_use_simulation, 16, "FieldSwa_%05ld_", pid);
}
static const char *FieldSwap_check_use_simulation(void)
{
	FieldSwap_def_use_simulation();
	const char *use_sim = max_config_get_string(MAX_CONFIG_USE_SIMULATION);
	if (use_sim == NULL) {
		use_sim = FieldSwap_use_simulation;
		max_config_set_string(MAX_CONFIG_USE_SIMULATION, use_sim);
	}
	return use_sim;
}

static int FieldSwap_simulation_launch = 0;
int FieldSwap_simulator_start(void)
{
	int retval = 0;
	const char *use_sim = FieldSwap_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX3424A -S simutils restart", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		if (strstr(buff, "Error")) {
			set_error(buff);
			retval = -1;
		}
	}
	pclose(pipe_fp);
	return retval;
}

int FieldSwap_simulator_stop(void)
{
	const char *use_sim = FieldSwap_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX3424A -S simutils stop", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		;
	}
	pclose(pipe_fp);
	return 0;
}

static void FieldSwap_static_init(void) 
{
	stored_maxfile = FieldSwap_init();
	if (stored_maxfile == NULL || !max_ok(stored_maxfile->errors)) {
		stored_maxfile = NULL;
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to load maxfile"); return; }
	}
	if(!max_ok(max_global_errors())) {
		set_error_and_free(max_errors_trace(max_global_errors()));
		return;
	}
	if(!max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR))
		max_errors_mode(stored_maxfile->errors, 0);
	time_t timeout_previous = max_load_timeout(stored_maxfile, 30);
	const char *use_sim = FieldSwap_check_use_simulation();
	if (max_ping_daemon(stored_maxfile, use_sim) == 0) {
		int sim_stat = FieldSwap_simulator_start();
		if ((sim_stat == 0) && (max_ping_daemon(stored_maxfile, use_sim) == 1)) {
			FieldSwap_simulation_launch = 1;
		} else {
			set_error("Error: An error occurred while trying to start the simulation infrastructure automatically.");
			set_error("Error: Check that 'use_simulation=<simulator_name>' is set correctly in your SLiC configuration");
			set_error("Error: and that the associated simulated system daemon is running.");
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		}
	}
	stored_engine = max_load(stored_maxfile, "*");
	if (!max_ok(stored_maxfile->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) {
			fprintf(stderr, "\nUnable to load engine: aborting now.\n\n");
			fflush(stderr);
			abort();
		} else {
			set_error_and_free(max_errors_trace(stored_maxfile->errors));
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		} 
	} 
	max_load_timeout(stored_maxfile, timeout_previous);
}
void FieldSwap_free(void)
{
	if (stored_engine != NULL) {
		max_unload(stored_engine);
		stored_engine = NULL;
	}
	if (stored_maxfile != NULL) {
		max_file_free(stored_maxfile);
		stored_maxfile = NULL;
	}
	if (stored_error != NULL) {
		free(stored_error);
		stored_error = NULL;
	}
	if (FieldSwap_simulation_launch == 1) {
		int sim_stat = FieldSwap_simulator_stop();
		if (sim_stat != 0 ) {
			fprintf(stderr, "Error stopping simulator.");
		}
		FieldSwap_simulation_launch = 0;
	}
}

static int FieldSwap_get_pcie_alignment(void)
{
#ifdef FieldSwap_PCIE_ALIGNMENT
	return ((FieldSwap_PCIE_ALIGNMENT < 1) ? 16 : FieldSwap_PCIE_ALIGNMENT);
#else
	return 16;
#endif
}

static int FieldSwap_check_aligned(const void *data)
{
	uintptr_t pointer = (uintptr_t) data;
	int alignment = FieldSwap_get_pcie_alignment();
	return (pointer % alignment) ? 1 : 0;
}

static void *FieldSwap_malloc_aligned(const size_t size)
{
	void *ptr;
	int alignment = FieldSwap_get_pcie_alignment();
	posix_memalign(&ptr, alignment, size);
	return ptr;
}



/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/



#define CHECK_ERRORS_ST(ST, RET) if(!max_ok(ST->errors)) { if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n", max_errors_trace(ST->errors)); abort(); } set_error_and_free(max_errors_trace(ST->errors)); return RET; } 
#define CHECK_NULL(VALUE, MESSAGE, RET) if(VALUE == NULL) { if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n%s\n", (stored_error == NULL) ? "" : stored_error, MESSAGE); abort(); } set_error(MESSAGE); return RET; }

 
typedef struct FieldSwap_callback_stream {
	uint8_t *user_ptr;
	uint8_t *aligned_ptr;
	size_t   size;
	int      is_output;
} FieldSwap_callback_stream_t;

typedef struct FieldSwap_callback_data {
	FieldSwap_callback_stream_t stream[2]; 
	int count;
	int max_count;
} FieldSwap_callback_data_t;

static void FieldSwap_callback_internal(void *cb_data)
{
	FieldSwap_callback_data_t *data = (FieldSwap_callback_data_t*) cb_data;
	for (int i = 0 ; i < data->count ; i++ ) {
		FieldSwap_callback_stream_t *s = &data->stream[i];
		if (s->is_output && (s->size > 0)) {
			memcpy(s->user_ptr, s->aligned_ptr, s->size);
		}
		free(s->aligned_ptr);
	}
	free(data);
}

static max_actions_t* FieldSwap_convert_internal(
	max_file_t *maxfile,
	FieldSwap_actions_t *interface_actions,
	int  is_internal_call,
	void (**callback_func)(void*),
	void **callback_data)
{
	max_actions_t *actions = max_actions_init(maxfile, NULL);
	if(actions == NULL) return NULL;

#define CHECK_ERRORS if(!max_ok(actions->errors)) { set_error_and_free(max_errors_trace(actions->errors)); return NULL; } 

	FieldSwap_callback_data_t *cb_data = NULL;
	int use_callback = (callback_func != NULL) && (callback_data != NULL);
	if (use_callback) {
		cb_data = malloc(sizeof(FieldSwap_callback_data_t));
		if (cb_data == NULL) {
			fprintf(stderr, "Unable to allocate memory for stream callback data in function FieldSwap_convert_internal\n");
			return NULL;
		}
		cb_data->max_count = 2;
		cb_data->count     = 0;
		*callback_data     = cb_data;
		*callback_func     = &FieldSwap_callback_internal;
	}

	/* code for scalar SlicerFramer_network_mgmt_stream_from_host_tx_framed.eofCount */
	uint64_t *outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_eofCount = interface_actions->outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_eofCount;
	max_get_uint64t(actions, "SlicerFramer_network_mgmt_stream_from_host_tx_framed", "eofCount", outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_eofCount);
	CHECK_ERRORS;
	/* end of code for scalar SlicerFramer_network_mgmt_stream_from_host_tx_framed.eofCount*/
	
	/* code for scalar SlicerFramer_network_mgmt_stream_from_host_tx_framed.sofCount */
	uint64_t *outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_sofCount = interface_actions->outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_sofCount;
	max_get_uint64t(actions, "SlicerFramer_network_mgmt_stream_from_host_tx_framed", "sofCount", outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_sofCount);
	CHECK_ERRORS;
	/* end of code for scalar SlicerFramer_network_mgmt_stream_from_host_tx_framed.sofCount*/
	
	max_ignore_scalar(actions, "ch2_sfp1_arp_server", "ip_address" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_arp_server", "mac_address" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_eth_rx_to_host_drop", "badFramesCounter" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_eth_rx_to_host_filter", "enable" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_eth_tx_from_host_rem_conv", "badFramesCounter" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "bcast_ip" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_local_port_0" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_local_port_1" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_local_port_10" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_local_port_11" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_local_port_12" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_local_port_13" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_local_port_14" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_local_port_15" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_local_port_2" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_local_port_3" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_local_port_4" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_local_port_5" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_local_port_6" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_local_port_7" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_local_port_8" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_local_port_9" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_mcast_ip_0" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_mcast_ip_1" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_mcast_ip_10" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_mcast_ip_11" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_mcast_ip_12" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_mcast_ip_13" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_mcast_ip_14" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_mcast_ip_15" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_mcast_ip_2" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_mcast_ip_3" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_mcast_ip_4" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_mcast_ip_5" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_mcast_ip_6" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_mcast_ip_7" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_mcast_ip_8" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_mcast_ip_9" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_src_ip_0" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_src_ip_1" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_src_ip_10" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_src_ip_11" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_src_ip_12" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_src_ip_13" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_src_ip_14" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_src_ip_15" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_src_ip_2" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_src_ip_3" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_src_ip_4" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_src_ip_5" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_src_ip_6" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_src_ip_7" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_src_ip_8" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_src_ip_9" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_src_port_0" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_src_port_1" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_src_port_10" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_src_port_11" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_src_port_12" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_src_port_13" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_src_port_14" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_src_port_15" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_src_port_2" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_src_port_3" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_src_port_4" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_src_port_5" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_src_port_6" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_src_port_7" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_src_port_8" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_src_port_9" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_valid_0" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_valid_1" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_valid_10" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_valid_11" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_valid_12" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_valid_13" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_valid_14" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_valid_15" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_valid_2" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_valid_3" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_valid_4" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_valid_5" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_valid_6" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_valid_7" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_valid_8" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "filter_valid_9" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx", "self_ip" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_rx_EOFEFrameDrop", "badFramesCounter" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_tx", "self_ip" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_udp_tx", "self_mac" );
	CHECK_ERRORS;
	
	/* code for scalar network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor.eofCount */
	uint64_t *outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_eofCount = interface_actions->outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_eofCount;
	max_get_uint64t(actions, "network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor", "eofCount", outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_eofCount);
	CHECK_ERRORS;
	/* end of code for scalar network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor.eofCount*/
	
	/* code for scalar network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor.sofCount */
	uint64_t *outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_sofCount = interface_actions->outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_sofCount;
	max_get_uint64t(actions, "network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor", "sofCount", outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_sofCount);
	CHECK_ERRORS;
	/* end of code for scalar network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor.sofCount*/
	
	/* code for stream network_mgmt_stream_from_host_tx_framed */
	size_t instream_size_network_mgmt_stream_from_host_tx_framed = interface_actions->instream_size_network_mgmt_stream_from_host_tx_framed;
	if (instream_size_network_mgmt_stream_from_host_tx_framed > 0) {
		const void *stream_ptr = interface_actions->instream_network_mgmt_stream_from_host_tx_framed;
		if (use_callback && (1 == FieldSwap_check_aligned(interface_actions->instream_network_mgmt_stream_from_host_tx_framed))) {
			void *aligned_instream_network_mgmt_stream_from_host_tx_framed = malloc(instream_size_network_mgmt_stream_from_host_tx_framed);
			if (aligned_instream_network_mgmt_stream_from_host_tx_framed == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'network_mgmt_stream_from_host_tx_framed'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->instream_network_mgmt_stream_from_host_tx_framed;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_instream_network_mgmt_stream_from_host_tx_framed;
			(&cb_data->stream[cb_data->count])->size        = instream_size_network_mgmt_stream_from_host_tx_framed;
			(&cb_data->stream[cb_data->count])->is_output   = 0;
			cb_data->count += 1;
			memcpy(aligned_instream_network_mgmt_stream_from_host_tx_framed, interface_actions->instream_network_mgmt_stream_from_host_tx_framed, instream_size_network_mgmt_stream_from_host_tx_framed);
			stream_ptr = aligned_instream_network_mgmt_stream_from_host_tx_framed;
		}
		max_queue_input(actions, "network_mgmt_stream_from_host_tx_framed", stream_ptr, instream_size_network_mgmt_stream_from_host_tx_framed);
		CHECK_ERRORS;
	}
	/* end of code for stream network_mgmt_stream_from_host_tx_framed */
	
	/* code for stream network_mgmt_stream_to_host_rx_framed */
	size_t outstream_size_network_mgmt_stream_to_host_rx_framed = interface_actions->outstream_size_network_mgmt_stream_to_host_rx_framed;
	if (outstream_size_network_mgmt_stream_to_host_rx_framed > 0) {
		void *stream_ptr = interface_actions->outstream_network_mgmt_stream_to_host_rx_framed;
		if (use_callback && (1 == FieldSwap_check_aligned(interface_actions->outstream_network_mgmt_stream_to_host_rx_framed))) {
			void *aligned_outstream_network_mgmt_stream_to_host_rx_framed = malloc(outstream_size_network_mgmt_stream_to_host_rx_framed);
			if (aligned_outstream_network_mgmt_stream_to_host_rx_framed == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'network_mgmt_stream_to_host_rx_framed'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->outstream_network_mgmt_stream_to_host_rx_framed;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_outstream_network_mgmt_stream_to_host_rx_framed;
			(&cb_data->stream[cb_data->count])->size        = outstream_size_network_mgmt_stream_to_host_rx_framed;
			(&cb_data->stream[cb_data->count])->is_output   = 1;
			cb_data->count += 1;
			stream_ptr = aligned_outstream_network_mgmt_stream_to_host_rx_framed;
		}
		max_queue_output(actions, "network_mgmt_stream_to_host_rx_framed", stream_ptr, outstream_size_network_mgmt_stream_to_host_rx_framed);
		CHECK_ERRORS;
	}
	/* end of code for stream network_mgmt_stream_to_host_rx_framed */
	
	max_ignore_mem(actions, "ch2_sfp1_icmp_echo_server", "params" );
	CHECK_ERRORS;
	
	max_ignore_mem(actions, "ch2_sfp1_udp_tx", "routing_lookup_1" );
	CHECK_ERRORS;
	
	max_ignore_mem(actions, "ch2_sfp1_udp_tx", "routing_lookup_2" );
	CHECK_ERRORS;
	
	if (use_callback && cb_data->count == 0) {
		*callback_data = NULL;
		*callback_func = NULL;
		free(cb_data);
	}
	return actions;
#undef CHECK_ERRORS
}

void FieldSwap(
	uint64_t *outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_eofCount,
	uint64_t *outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_sofCount,
	uint64_t *outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_eofCount,
	uint64_t *outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_sofCount,
	const void *instream_network_mgmt_stream_from_host_tx_framed,
	size_t instream_size_network_mgmt_stream_from_host_tx_framed,
	void *outstream_network_mgmt_stream_to_host_rx_framed,
	size_t outstream_size_network_mgmt_stream_to_host_rx_framed)
{
	(void) pthread_once(&slic_bs_is_initialised, FieldSwap_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", );
	max_run_t *run = FieldSwap_nonblock(outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_eofCount, outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_sofCount, outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_eofCount, outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_sofCount, instream_network_mgmt_stream_from_host_tx_framed, instream_size_network_mgmt_stream_from_host_tx_framed, outstream_network_mgmt_stream_to_host_rx_framed, outstream_size_network_mgmt_stream_to_host_rx_framed);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *FieldSwap_nonblock(
	uint64_t *outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_eofCount,
	uint64_t *outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_sofCount,
	uint64_t *outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_eofCount,
	uint64_t *outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_sofCount,
	const void *instream_network_mgmt_stream_from_host_tx_framed,
	size_t instream_size_network_mgmt_stream_from_host_tx_framed,
	void *outstream_network_mgmt_stream_to_host_rx_framed,
	size_t outstream_size_network_mgmt_stream_to_host_rx_framed)
{
	FieldSwap_actions_t interface_actions;
	interface_actions.outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_eofCount = outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_eofCount;
	interface_actions.outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_sofCount = outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_sofCount;
	interface_actions.outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_eofCount = outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_eofCount;
	interface_actions.outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_sofCount = outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_sofCount;
	interface_actions.instream_network_mgmt_stream_from_host_tx_framed = instream_network_mgmt_stream_from_host_tx_framed;
	interface_actions.instream_size_network_mgmt_stream_from_host_tx_framed = instream_size_network_mgmt_stream_from_host_tx_framed;
	interface_actions.outstream_network_mgmt_stream_to_host_rx_framed = outstream_network_mgmt_stream_to_host_rx_framed;
	interface_actions.outstream_size_network_mgmt_stream_to_host_rx_framed = outstream_size_network_mgmt_stream_to_host_rx_framed;
	(void) pthread_once(&slic_bs_is_initialised, FieldSwap_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", NULL);
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = FieldSwap_convert_internal(stored_maxfile, &interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	CHECK_ERRORS_ST(stored_engine, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(stored_engine, actions);
	} else {
		run = max_run_nonblock_with_cb(stored_engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	CHECK_ERRORS_ST(actions, NULL);
	max_actions_free(actions);
	return run;
}

void FieldSwap_run(
	max_engine_t *engine,
	FieldSwap_actions_t *interface_actions)
{
	max_run_t *run = FieldSwap_run_nonblock(engine, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *FieldSwap_run_nonblock(
	max_engine_t *engine,
	FieldSwap_actions_t *interface_actions)
{
	max_file_t *maxfile = max_engine_get_max_file(engine); 
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = FieldSwap_convert_internal(maxfile, interface_actions, 1, &cb_func, &cb_data);
	CHECK_ERRORS_ST(actions, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(engine, actions);
	} else {
		run = max_run_nonblock_with_cb(engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void FieldSwap_run_group(max_group_t *group, FieldSwap_actions_t *interface_actions)
{
	max_run_t *run = FieldSwap_run_group_nonblock(group, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *FieldSwap_run_group_nonblock(max_group_t *group, FieldSwap_actions_t *interface_actions)
{
	max_file_t *maxfile = max_group_get_max_file(group);
	max_actions_t *actions = FieldSwap_convert_internal(maxfile, interface_actions, 1, NULL, NULL);
	if(actions == NULL) return NULL;
	if(!max_ok(actions->errors)) return NULL;
	max_validate(actions);
	max_run_t *run = max_run_group_nonblock(group, actions);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void FieldSwap_run_array(max_engarray_t *engarray, FieldSwap_actions_t *interface_actions[])
{
	max_run_t *run = FieldSwap_run_array_nonblock(engarray, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *FieldSwap_run_array_nonblock(max_engarray_t *engarray, FieldSwap_actions_t *interface_actions[])
{
	max_file_t *maxfile = max_engarray_get_max_file(engarray, 0);
	int i;
	max_actarray_t *actarray = max_actarray_init(maxfile, engarray->size);
	if (actarray == NULL) return NULL;
	max_actions_t **arr_actions = malloc(engarray->size * sizeof(max_actions_t*));
	for ( i = 0 ; i < actarray->size; i++ ) {
		max_actions_t *actions = FieldSwap_convert_internal(maxfile, interface_actions[i], 1, NULL, NULL);
		if (actions == NULL) return NULL;
		arr_actions[i] = actions;
		max_set_action(actarray, i, actions);
	}
	max_run_t *run = max_run_array_nonblock(engarray, actarray);
	for ( i = 0 ; i < actarray->size ; i++ ) { max_actions_free(arr_actions[i]); }
	max_actarray_free(actarray);
	free(arr_actions);
	return run;
}


/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* FieldSwap_convert(max_file_t *maxfile, FieldSwap_actions_t *interface_actions)
{
	return FieldSwap_convert_internal(maxfile, interface_actions, 0, NULL, NULL);
}

#undef CHECK_ERRORS_ST
#undef CHECK_NULL



#endif /* SLIC_USE_DEFINITIONS */

#ifdef SLIC_DYNAMIC_CODE
SLIC_MODE_START(default)	
SLIC_SCALAR_DISABLED(ch2_sfp1_arp_server, ip_address)	
SLIC_SCALAR_DISABLED(ch2_sfp1_arp_server, mac_address)	
SLIC_SCALAR_DISABLED(ch2_sfp1_eth_rx_to_host_drop, badFramesCounter)	
SLIC_SCALAR_DISABLED(ch2_sfp1_eth_rx_to_host_filter, enable)	
SLIC_SCALAR_DISABLED(ch2_sfp1_eth_tx_from_host_rem_conv, badFramesCounter)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, bcast_ip)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_local_port_0)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_local_port_1)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_local_port_10)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_local_port_11)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_local_port_12)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_local_port_13)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_local_port_14)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_local_port_15)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_local_port_2)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_local_port_3)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_local_port_4)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_local_port_5)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_local_port_6)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_local_port_7)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_local_port_8)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_local_port_9)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_mcast_ip_0)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_mcast_ip_1)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_mcast_ip_10)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_mcast_ip_11)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_mcast_ip_12)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_mcast_ip_13)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_mcast_ip_14)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_mcast_ip_15)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_mcast_ip_2)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_mcast_ip_3)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_mcast_ip_4)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_mcast_ip_5)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_mcast_ip_6)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_mcast_ip_7)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_mcast_ip_8)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_mcast_ip_9)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_src_ip_0)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_src_ip_1)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_src_ip_10)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_src_ip_11)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_src_ip_12)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_src_ip_13)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_src_ip_14)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_src_ip_15)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_src_ip_2)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_src_ip_3)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_src_ip_4)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_src_ip_5)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_src_ip_6)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_src_ip_7)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_src_ip_8)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_src_ip_9)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_src_port_0)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_src_port_1)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_src_port_10)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_src_port_11)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_src_port_12)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_src_port_13)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_src_port_14)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_src_port_15)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_src_port_2)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_src_port_3)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_src_port_4)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_src_port_5)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_src_port_6)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_src_port_7)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_src_port_8)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_src_port_9)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_valid_0)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_valid_1)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_valid_10)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_valid_11)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_valid_12)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_valid_13)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_valid_14)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_valid_15)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_valid_2)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_valid_3)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_valid_4)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_valid_5)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_valid_6)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_valid_7)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_valid_8)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, filter_valid_9)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx, self_ip)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_rx_EOFEFrameDrop, badFramesCounter)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_tx, self_ip)	
SLIC_SCALAR_DISABLED(ch2_sfp1_udp_tx, self_mac)	
SLIC_ROM_DISABLED(ch2_sfp1_icmp_echo_server, params)	
SLIC_ROM_DISABLED(ch2_sfp1_udp_tx, routing_lookup_1)	
SLIC_ROM_DISABLED(ch2_sfp1_udp_tx, routing_lookup_2)	
SLIC_MODE_END(default)

#endif /* SLIC_DYNAMIC_CODE */

#ifdef SKIN_META_DATA
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PG1h
eGZpbGUgZm9ybWF0LXZlcnNpb249IjIwMTIwMjAwIiBoZWFkZXI9IkZpZWxkU3dhcC5oIiBuYW1l
PSJGaWVsZFN3YXAiPjxjb25zdGFudCBuYW1lPSJVU0VfTkVUV09SS19NQU5BR0VSIiB0eXBlPSJs
b25nIiB2YWx1ZT0iMSIvPjxjb25zdGFudCBuYW1lPSJQQ0lFX0FMSUdOTUVOVCIgdHlwZT0ibG9u
ZyIgdmFsdWU9IjE2Ii8+PGVuZ2luZW1vZGUgbmFtZT0iZGVmYXVsdCI+PGZ1bmN0aW9uIG5hbWU9
IkZpZWxkU3dhcCIgcmV0dXJuLXZhbHVlPSJ2b2lkIj48c2NhbGFyIGRlc2M9Ik91dHB1dCBzY2Fs
YXIgcGFyYW1ldGVyICZxdW90O1NsaWNlckZyYW1lcl9uZXR3b3JrX21nbXRfc3RyZWFtX2Zyb21f
aG9zdF90eF9mcmFtZWQuZW9mQ291bnQmcXVvdDsuIiBkaXJlY3Rpb249Ik91dHB1dCIgbmFtZT0i
b3V0c2NhbGFyX1NsaWNlckZyYW1lcl9uZXR3b3JrX21nbXRfc3RyZWFtX2Zyb21faG9zdF90eF9m
cmFtZWRfZW9mQ291bnQiIHR5cGU9InVpbnQ2NF90Ii8+PHNjYWxhciBkZXNjPSJPdXRwdXQgc2Nh
bGFyIHBhcmFtZXRlciAmcXVvdDtTbGljZXJGcmFtZXJfbmV0d29ya19tZ210X3N0cmVhbV9mcm9t
X2hvc3RfdHhfZnJhbWVkLnNvZkNvdW50JnF1b3Q7LiIgZGlyZWN0aW9uPSJPdXRwdXQiIG5hbWU9
Im91dHNjYWxhcl9TbGljZXJGcmFtZXJfbmV0d29ya19tZ210X3N0cmVhbV9mcm9tX2hvc3RfdHhf
ZnJhbWVkX3NvZkNvdW50IiB0eXBlPSJ1aW50NjRfdCIvPjxzY2FsYXIgZGVzYz0iT3V0cHV0IHNj
YWxhciBwYXJhbWV0ZXIgJnF1b3Q7bmV0d29ya19tZ210X3N0cmVhbV90b19ob3N0X3J4X2ZyYW1l
ZF9GcmFtZWRTdHJlYW1QcmVwcm9jZXNzb3IuZW9mQ291bnQmcXVvdDsuIiBkaXJlY3Rpb249Ik91
dHB1dCIgbmFtZT0ib3V0c2NhbGFyX25ldHdvcmtfbWdtdF9zdHJlYW1fdG9faG9zdF9yeF9mcmFt
ZWRfRnJhbWVkU3RyZWFtUHJlcHJvY2Vzc29yX2VvZkNvdW50IiB0eXBlPSJ1aW50NjRfdCIvPjxz
Y2FsYXIgZGVzYz0iT3V0cHV0IHNjYWxhciBwYXJhbWV0ZXIgJnF1b3Q7bmV0d29ya19tZ210X3N0
cmVhbV90b19ob3N0X3J4X2ZyYW1lZF9GcmFtZWRTdHJlYW1QcmVwcm9jZXNzb3Iuc29mQ291bnQm
cXVvdDsuIiBkaXJlY3Rpb249Ik91dHB1dCIgbmFtZT0ib3V0c2NhbGFyX25ldHdvcmtfbWdtdF9z
dHJlYW1fdG9faG9zdF9yeF9mcmFtZWRfRnJhbWVkU3RyZWFtUHJlcHJvY2Vzc29yX3NvZkNvdW50
IiB0eXBlPSJ1aW50NjRfdCIvPjxhcnJheSBkZXNjPSJTdHJlYW0gJnF1b3Q7bmV0d29ya19tZ210
X3N0cmVhbV9mcm9tX2hvc3RfdHhfZnJhbWVkJnF1b3Q7LiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFt
ZT0iaW5zdHJlYW1fbmV0d29ya19tZ210X3N0cmVhbV9mcm9tX2hvc3RfdHhfZnJhbWVkIiBzaXpl
PSJpbnN0cmVhbV9zaXplX25ldHdvcmtfbWdtdF9zdHJlYW1fZnJvbV9ob3N0X3R4X2ZyYW1lZCIg
dHJhbnNwb3NlPSJmYWxzZSIgdHlwZT0idm9pZCIvPjxzY2FsYXIgZGVzYz0iVGhlIHNpemUgb2Yg
dGhlIHN0cmVhbSBpbnN0cmVhbV9uZXR3b3JrX21nbXRfc3RyZWFtX2Zyb21faG9zdF90eF9mcmFt
ZWQgaW4gYnl0ZXMuIiBkaXJlY3Rpb249IklucHV0IiBuYW1lPSJpbnN0cmVhbV9zaXplX25ldHdv
cmtfbWdtdF9zdHJlYW1fZnJvbV9ob3N0X3R4X2ZyYW1lZCIgdHlwZT0idWludDY0X3QiLz48YXJy
YXkgZGVzYz0iU3RyZWFtICZxdW90O25ldHdvcmtfbWdtdF9zdHJlYW1fdG9faG9zdF9yeF9mcmFt
ZWQmcXVvdDsuIiBkaXJlY3Rpb249Ik91dHB1dCIgbmFtZT0ib3V0c3RyZWFtX25ldHdvcmtfbWdt
dF9zdHJlYW1fdG9faG9zdF9yeF9mcmFtZWQiIHNpemU9Im91dHN0cmVhbV9zaXplX25ldHdvcmtf
bWdtdF9zdHJlYW1fdG9faG9zdF9yeF9mcmFtZWQiIHRyYW5zcG9zZT0iZmFsc2UiIHR5cGU9InZv
aWQiLz48c2NhbGFyIGRlc2M9IlRoZSBzaXplIG9mIHRoZSBzdHJlYW0gb3V0c3RyZWFtX25ldHdv
cmtfbWdtdF9zdHJlYW1fdG9faG9zdF9yeF9mcmFtZWQgaW4gYnl0ZXMuIiBkaXJlY3Rpb249Iklu
cHV0IiBuYW1lPSJvdXRzdHJlYW1fc2l6ZV9uZXR3b3JrX21nbXRfc3RyZWFtX3RvX2hvc3Rfcnhf
ZnJhbWVkIiB0eXBlPSJ1aW50NjRfdCIvPjwvZnVuY3Rpb24+PC9lbmdpbmVtb2RlPjwvbWF4Zmls
ZT4=
#endif /* SKIN_META_DATA */

#ifdef SLIC_B64_DEFINITIONS
I2luY2x1ZGUgPHN0ZGlvLmg+CiNpbmNsdWRlIDxtYXRoLmg+CiNpbmNsdWRlIDxwdGhyZWFkLmg+
CiNpbmNsdWRlIDxzdHJpbmcuaD4KI2luY2x1ZGUgPHVuaXN0ZC5oPgojaW5jbHVkZSA8c3RkbGli
Lmg+CnN0YXRpYyBtYXhfZmlsZV90ICpzdG9yZWRfbWF4ZmlsZSA9IE5VTEw7CnN0YXRpYyBtYXhf
ZW5naW5lX3QgKnN0b3JlZF9lbmdpbmUgPSBOVUxMOwpzdGF0aWMgY2hhciAqc3RvcmVkX2Vycm9y
ID0gTlVMTDsKc3RhdGljIGludCBzdG9yZWRfaGFzX2Vycm9yID0gMDsKc3RhdGljIHB0aHJlYWRf
b25jZV90IHNsaWNfYnNfaXNfaW5pdGlhbGlzZWQgPSBQVEhSRUFEX09OQ0VfSU5JVDsKCnN0YXRp
YyB2b2lkIHNldF9lcnJvcihjb25zdCBjaGFyICplcnJvcl9zdHIpCnsKCXN0b3JlZF9oYXNfZXJy
b3IgPSAxOyAKCWlmKHN0b3JlZF9lcnJvciA9PSBOVUxMKSB7CgkJc3RvcmVkX2Vycm9yID0gc3Ry
ZHVwKGVycm9yX3N0cik7Cgl9IGVsc2UgewoJCWNoYXIgKm5lcnIgPSBtYWxsb2Moc3RybGVuKHN0
b3JlZF9lcnJvcikgKyBzdHJsZW4oZXJyb3Jfc3RyKSArIDIpOwoJCXNwcmludGYobmVyciwgIiVz
XG4lcyIsIHN0b3JlZF9lcnJvciwgZXJyb3Jfc3RyKTsKCQlmcmVlKHN0b3JlZF9lcnJvcik7CgkJ
c3RvcmVkX2Vycm9yID0gbmVycjsKCX0KfQpzdGF0aWMgdm9pZCBzZXRfZXJyb3JfYW5kX2ZyZWUo
Y2hhciAqZXJyb3Jfc3RyKXsKCXNldF9lcnJvcihlcnJvcl9zdHIpOwoJZnJlZShlcnJvcl9zdHIp
Owp9CmludCBGaWVsZFN3YXBfaGFzX2Vycm9ycyh2b2lkKQp7CXJldHVybiBzdG9yZWRfaGFzX2Vy
cm9yOyB9CmNvbnN0IGNoYXIqIEZpZWxkU3dhcF9nZXRfZXJyb3JzKHZvaWQpCnsJcmV0dXJuIHN0
b3JlZF9lcnJvcjsgfQp2b2lkIEZpZWxkU3dhcF9jbGVhcl9lcnJvcnModm9pZCkKewoJZnJlZShz
dG9yZWRfZXJyb3IpOwoJc3RvcmVkX2Vycm9yID0gTlVMTDsKCXN0b3JlZF9oYXNfZXJyb3IgPSAw
Owp9CgpzdGF0aWMgY2hhciBGaWVsZFN3YXBfdXNlX3NpbXVsYXRpb25bMTZdOwpzdGF0aWMgdm9p
ZCBGaWVsZFN3YXBfZGVmX3VzZV9zaW11bGF0aW9uKHZvaWQpCnsKCWxvbmcgcGlkID0gKChsb25n
KSBnZXRwaWQoKSkgJSAxMDAwMDA7CglzbnByaW50ZihGaWVsZFN3YXBfdXNlX3NpbXVsYXRpb24s
IDE2LCAiRmllbGRTd2FfJTA1bGRfIiwgcGlkKTsKfQpzdGF0aWMgY29uc3QgY2hhciAqRmllbGRT
d2FwX2NoZWNrX3VzZV9zaW11bGF0aW9uKHZvaWQpCnsKCUZpZWxkU3dhcF9kZWZfdXNlX3NpbXVs
YXRpb24oKTsKCWNvbnN0IGNoYXIgKnVzZV9zaW0gPSBtYXhfY29uZmlnX2dldF9zdHJpbmcoTUFY
X0NPTkZJR19VU0VfU0lNVUxBVElPTik7CglpZiAodXNlX3NpbSA9PSBOVUxMKSB7CgkJdXNlX3Np
bSA9IEZpZWxkU3dhcF91c2Vfc2ltdWxhdGlvbjsKCQltYXhfY29uZmlnX3NldF9zdHJpbmcoTUFY
X0NPTkZJR19VU0VfU0lNVUxBVElPTiwgdXNlX3NpbSk7Cgl9CglyZXR1cm4gdXNlX3NpbTsKfQoK
c3RhdGljIGludCBGaWVsZFN3YXBfc2ltdWxhdGlvbl9sYXVuY2ggPSAwOwppbnQgRmllbGRTd2Fw
X3NpbXVsYXRvcl9zdGFydCh2b2lkKQp7CglpbnQgcmV0dmFsID0gMDsKCWNvbnN0IGNoYXIgKnVz
ZV9zaW0gPSBGaWVsZFN3YXBfY2hlY2tfdXNlX3NpbXVsYXRpb24oKTsKCWNoYXIgYnVmZlsxMDI0
XTsKCXNucHJpbnRmKGJ1ZmYsIDEwMjQsICJQQVRIPXNpbXV0aWxzOiRQQVRIIG1heGNvbXBpbGVy
c2ltIC1kIDEgLW4gJXMgLWMgTUFYMzQyNEEgLVMgc2ltdXRpbHMgcmVzdGFydCIsIHVzZV9zaW0p
OwoJRklMRSAqcGlwZV9mcCA9IHBvcGVuKGJ1ZmYsICJyIik7CglpZiAocGlwZV9mcCA9PSBOVUxM
KSB7CgkJc3RybmNhdChidWZmLCAiIDogZmFpbGVkIHRvIGV4ZWN1dGUuIiwgKDEwMjQgLSBzdHJs
ZW4oYnVmZikpKTsKCQlzZXRfZXJyb3IoYnVmZik7CgkJcmV0dXJuIC0xOwoJfQoJd2hpbGUgKGZn
ZXRzKGJ1ZmYsIDEwMjQsIHBpcGVfZnApICE9IE5VTEwpIHsKCQkvKiBVbmNvbW1lbnQgdGhpcyB0
byBnZXQgc2ltdWxhdG9yIGNvbW1hbmQgb3V0cHV0ICovCgkJLyogZnByaW50ZihzdGRlcnIsIGJ1
ZmYpOyAqLwoJCWlmIChzdHJzdHIoYnVmZiwgIkVycm9yIikpIHsKCQkJc2V0X2Vycm9yKGJ1ZmYp
OwoJCQlyZXR2YWwgPSAtMTsKCQl9Cgl9CglwY2xvc2UocGlwZV9mcCk7CglyZXR1cm4gcmV0dmFs
Owp9CgppbnQgRmllbGRTd2FwX3NpbXVsYXRvcl9zdG9wKHZvaWQpCnsKCWNvbnN0IGNoYXIgKnVz
ZV9zaW0gPSBGaWVsZFN3YXBfY2hlY2tfdXNlX3NpbXVsYXRpb24oKTsKCWNoYXIgYnVmZlsxMDI0
XTsKCXNucHJpbnRmKGJ1ZmYsIDEwMjQsICJQQVRIPXNpbXV0aWxzOiRQQVRIIG1heGNvbXBpbGVy
c2ltIC1kIDEgLW4gJXMgLWMgTUFYMzQyNEEgLVMgc2ltdXRpbHMgc3RvcCIsIHVzZV9zaW0pOwoJ
RklMRSAqcGlwZV9mcCA9IHBvcGVuKGJ1ZmYsICJyIik7CglpZiAocGlwZV9mcCA9PSBOVUxMKSB7
CgkJc3RybmNhdChidWZmLCAiIDogZmFpbGVkIHRvIGV4ZWN1dGUuIiwgKDEwMjQgLSBzdHJsZW4o
YnVmZikpKTsKCQlzZXRfZXJyb3IoYnVmZik7CgkJcmV0dXJuIC0xOwoJfQoJd2hpbGUgKGZnZXRz
KGJ1ZmYsIDEwMjQsIHBpcGVfZnApICE9IE5VTEwpIHsKCQkvKiBVbmNvbW1lbnQgdGhpcyB0byBn
ZXQgc2ltdWxhdG9yIGNvbW1hbmQgb3V0cHV0ICovCgkJLyogZnByaW50ZihzdGRlcnIsIGJ1ZmYp
OyAqLwoJCTsKCX0KCXBjbG9zZShwaXBlX2ZwKTsKCXJldHVybiAwOwp9CgpzdGF0aWMgdm9pZCBG
aWVsZFN3YXBfc3RhdGljX2luaXQodm9pZCkgCnsKCXN0b3JlZF9tYXhmaWxlID0gRmllbGRTd2Fw
X2luaXQoKTsKCWlmIChzdG9yZWRfbWF4ZmlsZSA9PSBOVUxMIHx8ICFtYXhfb2soc3RvcmVkX21h
eGZpbGUtPmVycm9ycykpIHsKCQlzdG9yZWRfbWF4ZmlsZSA9IE5VTEw7CgkJaWYobWF4X2NvbmZp
Z19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKSBh
Ym9ydCgpOwoJCWVsc2UgeyBzZXRfZXJyb3IoIlVuYWJsZSB0byBsb2FkIG1heGZpbGUiKTsgcmV0
dXJuOyB9Cgl9CglpZighbWF4X29rKG1heF9nbG9iYWxfZXJyb3JzKCkpKSB7CgkJc2V0X2Vycm9y
X2FuZF9mcmVlKG1heF9lcnJvcnNfdHJhY2UobWF4X2dsb2JhbF9lcnJvcnMoKSkpOwoJCXJldHVy
bjsKCX0KCWlmKCFtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFD
RV9BQk9SVF9PTl9FUlJPUikpCgkJbWF4X2Vycm9yc19tb2RlKHN0b3JlZF9tYXhmaWxlLT5lcnJv
cnMsIDApOwoJdGltZV90IHRpbWVvdXRfcHJldmlvdXMgPSBtYXhfbG9hZF90aW1lb3V0KHN0b3Jl
ZF9tYXhmaWxlLCAzMCk7Cgljb25zdCBjaGFyICp1c2Vfc2ltID0gRmllbGRTd2FwX2NoZWNrX3Vz
ZV9zaW11bGF0aW9uKCk7CglpZiAobWF4X3BpbmdfZGFlbW9uKHN0b3JlZF9tYXhmaWxlLCB1c2Vf
c2ltKSA9PSAwKSB7CgkJaW50IHNpbV9zdGF0ID0gRmllbGRTd2FwX3NpbXVsYXRvcl9zdGFydCgp
OwoJCWlmICgoc2ltX3N0YXQgPT0gMCkgJiYgKG1heF9waW5nX2RhZW1vbihzdG9yZWRfbWF4Zmls
ZSwgdXNlX3NpbSkgPT0gMSkpIHsKCQkJRmllbGRTd2FwX3NpbXVsYXRpb25fbGF1bmNoID0gMTsK
CQl9IGVsc2UgewoJCQlzZXRfZXJyb3IoIkVycm9yOiBBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSB0
cnlpbmcgdG8gc3RhcnQgdGhlIHNpbXVsYXRpb24gaW5mcmFzdHJ1Y3R1cmUgYXV0b21hdGljYWxs
eS4iKTsKCQkJc2V0X2Vycm9yKCJFcnJvcjogQ2hlY2sgdGhhdCAndXNlX3NpbXVsYXRpb249PHNp
bXVsYXRvcl9uYW1lPicgaXMgc2V0IGNvcnJlY3RseSBpbiB5b3VyIFNMaUMgY29uZmlndXJhdGlv
biIpOwoJCQlzZXRfZXJyb3IoIkVycm9yOiBhbmQgdGhhdCB0aGUgYXNzb2NpYXRlZCBzaW11bGF0
ZWQgc3lzdGVtIGRhZW1vbiBpcyBydW5uaW5nLiIpOwoJCQltYXhfZmlsZV9mcmVlKHN0b3JlZF9t
YXhmaWxlKTsKCQkJc3RvcmVkX21heGZpbGUgPSBOVUxMOwoJCQlyZXR1cm47CgkJfQoJfQoJc3Rv
cmVkX2VuZ2luZSA9IG1heF9sb2FkKHN0b3JlZF9tYXhmaWxlLCAiKiIpOwoJaWYgKCFtYXhfb2so
c3RvcmVkX21heGZpbGUtPmVycm9ycykpIHsKCQlpZihtYXhfY29uZmlnX2dldF9ib29sKE1BWF9D
T05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIHsKCQkJZnByaW50ZihzdGRl
cnIsICJcblVuYWJsZSB0byBsb2FkIGVuZ2luZTogYWJvcnRpbmcgbm93LlxuXG4iKTsKCQkJZmZs
dXNoKHN0ZGVycik7CgkJCWFib3J0KCk7CgkJfSBlbHNlIHsKCQkJc2V0X2Vycm9yX2FuZF9mcmVl
KG1heF9lcnJvcnNfdHJhY2Uoc3RvcmVkX21heGZpbGUtPmVycm9ycykpOwoJCQltYXhfZmlsZV9m
cmVlKHN0b3JlZF9tYXhmaWxlKTsKCQkJc3RvcmVkX21heGZpbGUgPSBOVUxMOwoJCQlyZXR1cm47
CgkJfSAKCX0gCgltYXhfbG9hZF90aW1lb3V0KHN0b3JlZF9tYXhmaWxlLCB0aW1lb3V0X3ByZXZp
b3VzKTsKfQp2b2lkIEZpZWxkU3dhcF9mcmVlKHZvaWQpCnsKCWlmIChzdG9yZWRfZW5naW5lICE9
IE5VTEwpIHsKCQltYXhfdW5sb2FkKHN0b3JlZF9lbmdpbmUpOwoJCXN0b3JlZF9lbmdpbmUgPSBO
VUxMOwoJfQoJaWYgKHN0b3JlZF9tYXhmaWxlICE9IE5VTEwpIHsKCQltYXhfZmlsZV9mcmVlKHN0
b3JlZF9tYXhmaWxlKTsKCQlzdG9yZWRfbWF4ZmlsZSA9IE5VTEw7Cgl9CglpZiAoc3RvcmVkX2Vy
cm9yICE9IE5VTEwpIHsKCQlmcmVlKHN0b3JlZF9lcnJvcik7CgkJc3RvcmVkX2Vycm9yID0gTlVM
TDsKCX0KCWlmIChGaWVsZFN3YXBfc2ltdWxhdGlvbl9sYXVuY2ggPT0gMSkgewoJCWludCBzaW1f
c3RhdCA9IEZpZWxkU3dhcF9zaW11bGF0b3Jfc3RvcCgpOwoJCWlmIChzaW1fc3RhdCAhPSAwICkg
ewoJCQlmcHJpbnRmKHN0ZGVyciwgIkVycm9yIHN0b3BwaW5nIHNpbXVsYXRvci4iKTsKCQl9CgkJ
RmllbGRTd2FwX3NpbXVsYXRpb25fbGF1bmNoID0gMDsKCX0KfQoKc3RhdGljIGludCBGaWVsZFN3
YXBfZ2V0X3BjaWVfYWxpZ25tZW50KHZvaWQpCnsKI2lmZGVmIEZpZWxkU3dhcF9QQ0lFX0FMSUdO
TUVOVAoJcmV0dXJuICgoRmllbGRTd2FwX1BDSUVfQUxJR05NRU5UIDwgMSkgPyAxNiA6IEZpZWxk
U3dhcF9QQ0lFX0FMSUdOTUVOVCk7CiNlbHNlCglyZXR1cm4gMTY7CiNlbmRpZgp9CgpzdGF0aWMg
aW50IEZpZWxkU3dhcF9jaGVja19hbGlnbmVkKGNvbnN0IHZvaWQgKmRhdGEpCnsKCXVpbnRwdHJf
dCBwb2ludGVyID0gKHVpbnRwdHJfdCkgZGF0YTsKCWludCBhbGlnbm1lbnQgPSBGaWVsZFN3YXBf
Z2V0X3BjaWVfYWxpZ25tZW50KCk7CglyZXR1cm4gKHBvaW50ZXIgJSBhbGlnbm1lbnQpID8gMSA6
IDA7Cn0KCnN0YXRpYyB2b2lkICpGaWVsZFN3YXBfbWFsbG9jX2FsaWduZWQoY29uc3Qgc2l6ZV90
IHNpemUpCnsKCXZvaWQgKnB0cjsKCWludCBhbGlnbm1lbnQgPSBGaWVsZFN3YXBfZ2V0X3BjaWVf
YWxpZ25tZW50KCk7Cglwb3NpeF9tZW1hbGlnbigmcHRyLCBhbGlnbm1lbnQsIHNpemUpOwoJcmV0
dXJuIHB0cjsKfQoKCgovKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwovKi0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0gSW50ZXJmYWNlIGRlZmF1bHQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0qLwovKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoKCgojZGVmaW5lIENIRUNLX0VSUk9SU19TVChT
VCwgUkVUKSBpZighbWF4X29rKFNULT5lcnJvcnMpKSB7IGlmKG1heF9jb25maWdfZ2V0X2Jvb2wo
TUFYX0NPTkZJR19TVEFUSUNfSU5URVJGQUNFX0FCT1JUX09OX0VSUk9SKSkgeyBmcHJpbnRmKHN0
ZGVyciwgIiVzXG4iLCBtYXhfZXJyb3JzX3RyYWNlKFNULT5lcnJvcnMpKTsgYWJvcnQoKTsgfSBz
ZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vycm9yc190cmFjZShTVC0+ZXJyb3JzKSk7IHJldHVybiBS
RVQ7IH0gCiNkZWZpbmUgQ0hFQ0tfTlVMTChWQUxVRSwgTUVTU0FHRSwgUkVUKSBpZihWQUxVRSA9
PSBOVUxMKSB7IGlmIChtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVS
RkFDRV9BQk9SVF9PTl9FUlJPUikpIHsgZnByaW50ZihzdGRlcnIsICIlc1xuJXNcbiIsIChzdG9y
ZWRfZXJyb3IgPT0gTlVMTCkgPyAiIiA6IHN0b3JlZF9lcnJvciwgTUVTU0FHRSk7IGFib3J0KCk7
IH0gc2V0X2Vycm9yKE1FU1NBR0UpOyByZXR1cm4gUkVUOyB9CgogCnR5cGVkZWYgc3RydWN0IEZp
ZWxkU3dhcF9jYWxsYmFja19zdHJlYW0gewoJdWludDhfdCAqdXNlcl9wdHI7Cgl1aW50OF90ICph
bGlnbmVkX3B0cjsKCXNpemVfdCAgIHNpemU7CglpbnQgICAgICBpc19vdXRwdXQ7Cn0gRmllbGRT
d2FwX2NhbGxiYWNrX3N0cmVhbV90OwoKdHlwZWRlZiBzdHJ1Y3QgRmllbGRTd2FwX2NhbGxiYWNr
X2RhdGEgewoJRmllbGRTd2FwX2NhbGxiYWNrX3N0cmVhbV90IHN0cmVhbVsyXTsgCglpbnQgY291
bnQ7CglpbnQgbWF4X2NvdW50Owp9IEZpZWxkU3dhcF9jYWxsYmFja19kYXRhX3Q7CgpzdGF0aWMg
dm9pZCBGaWVsZFN3YXBfY2FsbGJhY2tfaW50ZXJuYWwodm9pZCAqY2JfZGF0YSkKewoJRmllbGRT
d2FwX2NhbGxiYWNrX2RhdGFfdCAqZGF0YSA9IChGaWVsZFN3YXBfY2FsbGJhY2tfZGF0YV90Kikg
Y2JfZGF0YTsKCWZvciAoaW50IGkgPSAwIDsgaSA8IGRhdGEtPmNvdW50IDsgaSsrICkgewoJCUZp
ZWxkU3dhcF9jYWxsYmFja19zdHJlYW1fdCAqcyA9ICZkYXRhLT5zdHJlYW1baV07CgkJaWYgKHMt
PmlzX291dHB1dCAmJiAocy0+c2l6ZSA+IDApKSB7CgkJCW1lbWNweShzLT51c2VyX3B0ciwgcy0+
YWxpZ25lZF9wdHIsIHMtPnNpemUpOwoJCX0KCQlmcmVlKHMtPmFsaWduZWRfcHRyKTsKCX0KCWZy
ZWUoZGF0YSk7Cn0KCnN0YXRpYyBtYXhfYWN0aW9uc190KiBGaWVsZFN3YXBfY29udmVydF9pbnRl
cm5hbCgKCW1heF9maWxlX3QgKm1heGZpbGUsCglGaWVsZFN3YXBfYWN0aW9uc190ICppbnRlcmZh
Y2VfYWN0aW9ucywKCWludCAgaXNfaW50ZXJuYWxfY2FsbCwKCXZvaWQgKCoqY2FsbGJhY2tfZnVu
Yykodm9pZCopLAoJdm9pZCAqKmNhbGxiYWNrX2RhdGEpCnsKCW1heF9hY3Rpb25zX3QgKmFjdGlv
bnMgPSBtYXhfYWN0aW9uc19pbml0KG1heGZpbGUsIE5VTEwpOwoJaWYoYWN0aW9ucyA9PSBOVUxM
KSByZXR1cm4gTlVMTDsKCiNkZWZpbmUgQ0hFQ0tfRVJST1JTIGlmKCFtYXhfb2soYWN0aW9ucy0+
ZXJyb3JzKSkgeyBzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vycm9yc190cmFjZShhY3Rpb25zLT5l
cnJvcnMpKTsgcmV0dXJuIE5VTEw7IH0gCgoJRmllbGRTd2FwX2NhbGxiYWNrX2RhdGFfdCAqY2Jf
ZGF0YSA9IE5VTEw7CglpbnQgdXNlX2NhbGxiYWNrID0gKGNhbGxiYWNrX2Z1bmMgIT0gTlVMTCkg
JiYgKGNhbGxiYWNrX2RhdGEgIT0gTlVMTCk7CglpZiAodXNlX2NhbGxiYWNrKSB7CgkJY2JfZGF0
YSA9IG1hbGxvYyhzaXplb2YoRmllbGRTd2FwX2NhbGxiYWNrX2RhdGFfdCkpOwoJCWlmIChjYl9k
YXRhID09IE5VTEwpIHsKCQkJZnByaW50ZihzdGRlcnIsICJVbmFibGUgdG8gYWxsb2NhdGUgbWVt
b3J5IGZvciBzdHJlYW0gY2FsbGJhY2sgZGF0YSBpbiBmdW5jdGlvbiBGaWVsZFN3YXBfY29udmVy
dF9pbnRlcm5hbFxuIik7CgkJCXJldHVybiBOVUxMOwoJCX0KCQljYl9kYXRhLT5tYXhfY291bnQg
PSAyOwoJCWNiX2RhdGEtPmNvdW50ICAgICA9IDA7CgkJKmNhbGxiYWNrX2RhdGEgICAgID0gY2Jf
ZGF0YTsKCQkqY2FsbGJhY2tfZnVuYyAgICAgPSAmRmllbGRTd2FwX2NhbGxiYWNrX2ludGVybmFs
OwoJfQoKCS8qIGNvZGUgZm9yIHNjYWxhciBTbGljZXJGcmFtZXJfbmV0d29ya19tZ210X3N0cmVh
bV9mcm9tX2hvc3RfdHhfZnJhbWVkLmVvZkNvdW50ICovCgl1aW50NjRfdCAqb3V0c2NhbGFyX1Ns
aWNlckZyYW1lcl9uZXR3b3JrX21nbXRfc3RyZWFtX2Zyb21faG9zdF90eF9mcmFtZWRfZW9mQ291
bnQgPSBpbnRlcmZhY2VfYWN0aW9ucy0+b3V0c2NhbGFyX1NsaWNlckZyYW1lcl9uZXR3b3JrX21n
bXRfc3RyZWFtX2Zyb21faG9zdF90eF9mcmFtZWRfZW9mQ291bnQ7CgltYXhfZ2V0X3VpbnQ2NHQo
YWN0aW9ucywgIlNsaWNlckZyYW1lcl9uZXR3b3JrX21nbXRfc3RyZWFtX2Zyb21faG9zdF90eF9m
cmFtZWQiLCAiZW9mQ291bnQiLCBvdXRzY2FsYXJfU2xpY2VyRnJhbWVyX25ldHdvcmtfbWdtdF9z
dHJlYW1fZnJvbV9ob3N0X3R4X2ZyYW1lZF9lb2ZDb3VudCk7CglDSEVDS19FUlJPUlM7CgkvKiBl
bmQgb2YgY29kZSBmb3Igc2NhbGFyIFNsaWNlckZyYW1lcl9uZXR3b3JrX21nbXRfc3RyZWFtX2Zy
b21faG9zdF90eF9mcmFtZWQuZW9mQ291bnQqLwoJCgkvKiBjb2RlIGZvciBzY2FsYXIgU2xpY2Vy
RnJhbWVyX25ldHdvcmtfbWdtdF9zdHJlYW1fZnJvbV9ob3N0X3R4X2ZyYW1lZC5zb2ZDb3VudCAq
LwoJdWludDY0X3QgKm91dHNjYWxhcl9TbGljZXJGcmFtZXJfbmV0d29ya19tZ210X3N0cmVhbV9m
cm9tX2hvc3RfdHhfZnJhbWVkX3NvZkNvdW50ID0gaW50ZXJmYWNlX2FjdGlvbnMtPm91dHNjYWxh
cl9TbGljZXJGcmFtZXJfbmV0d29ya19tZ210X3N0cmVhbV9mcm9tX2hvc3RfdHhfZnJhbWVkX3Nv
ZkNvdW50OwoJbWF4X2dldF91aW50NjR0KGFjdGlvbnMsICJTbGljZXJGcmFtZXJfbmV0d29ya19t
Z210X3N0cmVhbV9mcm9tX2hvc3RfdHhfZnJhbWVkIiwgInNvZkNvdW50Iiwgb3V0c2NhbGFyX1Ns
aWNlckZyYW1lcl9uZXR3b3JrX21nbXRfc3RyZWFtX2Zyb21faG9zdF90eF9mcmFtZWRfc29mQ291
bnQpOwoJQ0hFQ0tfRVJST1JTOwoJLyogZW5kIG9mIGNvZGUgZm9yIHNjYWxhciBTbGljZXJGcmFt
ZXJfbmV0d29ya19tZ210X3N0cmVhbV9mcm9tX2hvc3RfdHhfZnJhbWVkLnNvZkNvdW50Ki8KCQoJ
bWF4X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywgImNoMl9zZnAxX2FycF9zZXJ2ZXIiLCAiaXBfYWRk
cmVzcyIgKTsKCUNIRUNLX0VSUk9SUzsKCQoJbWF4X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywgImNo
Ml9zZnAxX2FycF9zZXJ2ZXIiLCAibWFjX2FkZHJlc3MiICk7CglDSEVDS19FUlJPUlM7CgkKCW1h
eF9pZ25vcmVfc2NhbGFyKGFjdGlvbnMsICJjaDJfc2ZwMV9ldGhfcnhfdG9faG9zdF9kcm9wIiwg
ImJhZEZyYW1lc0NvdW50ZXIiICk7CglDSEVDS19FUlJPUlM7CgkKCW1heF9pZ25vcmVfc2NhbGFy
KGFjdGlvbnMsICJjaDJfc2ZwMV9ldGhfcnhfdG9faG9zdF9maWx0ZXIiLCAiZW5hYmxlIiApOwoJ
Q0hFQ0tfRVJST1JTOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAiY2gyX3NmcDFfZXRo
X3R4X2Zyb21faG9zdF9yZW1fY29udiIsICJiYWRGcmFtZXNDb3VudGVyIiApOwoJQ0hFQ0tfRVJS
T1JTOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAiY2gyX3NmcDFfdWRwX3J4IiwgImJj
YXN0X2lwIiApOwoJQ0hFQ0tfRVJST1JTOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAi
Y2gyX3NmcDFfdWRwX3J4IiwgImZpbHRlcl9sb2NhbF9wb3J0XzAiICk7CglDSEVDS19FUlJPUlM7
CgkKCW1heF9pZ25vcmVfc2NhbGFyKGFjdGlvbnMsICJjaDJfc2ZwMV91ZHBfcngiLCAiZmlsdGVy
X2xvY2FsX3BvcnRfMSIgKTsKCUNIRUNLX0VSUk9SUzsKCQoJbWF4X2lnbm9yZV9zY2FsYXIoYWN0
aW9ucywgImNoMl9zZnAxX3VkcF9yeCIsICJmaWx0ZXJfbG9jYWxfcG9ydF8xMCIgKTsKCUNIRUNL
X0VSUk9SUzsKCQoJbWF4X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywgImNoMl9zZnAxX3VkcF9yeCIs
ICJmaWx0ZXJfbG9jYWxfcG9ydF8xMSIgKTsKCUNIRUNLX0VSUk9SUzsKCQoJbWF4X2lnbm9yZV9z
Y2FsYXIoYWN0aW9ucywgImNoMl9zZnAxX3VkcF9yeCIsICJmaWx0ZXJfbG9jYWxfcG9ydF8xMiIg
KTsKCUNIRUNLX0VSUk9SUzsKCQoJbWF4X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywgImNoMl9zZnAx
X3VkcF9yeCIsICJmaWx0ZXJfbG9jYWxfcG9ydF8xMyIgKTsKCUNIRUNLX0VSUk9SUzsKCQoJbWF4
X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywgImNoMl9zZnAxX3VkcF9yeCIsICJmaWx0ZXJfbG9jYWxf
cG9ydF8xNCIgKTsKCUNIRUNLX0VSUk9SUzsKCQoJbWF4X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywg
ImNoMl9zZnAxX3VkcF9yeCIsICJmaWx0ZXJfbG9jYWxfcG9ydF8xNSIgKTsKCUNIRUNLX0VSUk9S
UzsKCQoJbWF4X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywgImNoMl9zZnAxX3VkcF9yeCIsICJmaWx0
ZXJfbG9jYWxfcG9ydF8yIiApOwoJQ0hFQ0tfRVJST1JTOwoJCgltYXhfaWdub3JlX3NjYWxhcihh
Y3Rpb25zLCAiY2gyX3NmcDFfdWRwX3J4IiwgImZpbHRlcl9sb2NhbF9wb3J0XzMiICk7CglDSEVD
S19FUlJPUlM7CgkKCW1heF9pZ25vcmVfc2NhbGFyKGFjdGlvbnMsICJjaDJfc2ZwMV91ZHBfcngi
LCAiZmlsdGVyX2xvY2FsX3BvcnRfNCIgKTsKCUNIRUNLX0VSUk9SUzsKCQoJbWF4X2lnbm9yZV9z
Y2FsYXIoYWN0aW9ucywgImNoMl9zZnAxX3VkcF9yeCIsICJmaWx0ZXJfbG9jYWxfcG9ydF81IiAp
OwoJQ0hFQ0tfRVJST1JTOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAiY2gyX3NmcDFf
dWRwX3J4IiwgImZpbHRlcl9sb2NhbF9wb3J0XzYiICk7CglDSEVDS19FUlJPUlM7CgkKCW1heF9p
Z25vcmVfc2NhbGFyKGFjdGlvbnMsICJjaDJfc2ZwMV91ZHBfcngiLCAiZmlsdGVyX2xvY2FsX3Bv
cnRfNyIgKTsKCUNIRUNLX0VSUk9SUzsKCQoJbWF4X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywgImNo
Ml9zZnAxX3VkcF9yeCIsICJmaWx0ZXJfbG9jYWxfcG9ydF84IiApOwoJQ0hFQ0tfRVJST1JTOwoJ
CgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAiY2gyX3NmcDFfdWRwX3J4IiwgImZpbHRlcl9s
b2NhbF9wb3J0XzkiICk7CglDSEVDS19FUlJPUlM7CgkKCW1heF9pZ25vcmVfc2NhbGFyKGFjdGlv
bnMsICJjaDJfc2ZwMV91ZHBfcngiLCAiZmlsdGVyX21jYXN0X2lwXzAiICk7CglDSEVDS19FUlJP
UlM7CgkKCW1heF9pZ25vcmVfc2NhbGFyKGFjdGlvbnMsICJjaDJfc2ZwMV91ZHBfcngiLCAiZmls
dGVyX21jYXN0X2lwXzEiICk7CglDSEVDS19FUlJPUlM7CgkKCW1heF9pZ25vcmVfc2NhbGFyKGFj
dGlvbnMsICJjaDJfc2ZwMV91ZHBfcngiLCAiZmlsdGVyX21jYXN0X2lwXzEwIiApOwoJQ0hFQ0tf
RVJST1JTOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAiY2gyX3NmcDFfdWRwX3J4Iiwg
ImZpbHRlcl9tY2FzdF9pcF8xMSIgKTsKCUNIRUNLX0VSUk9SUzsKCQoJbWF4X2lnbm9yZV9zY2Fs
YXIoYWN0aW9ucywgImNoMl9zZnAxX3VkcF9yeCIsICJmaWx0ZXJfbWNhc3RfaXBfMTIiICk7CglD
SEVDS19FUlJPUlM7CgkKCW1heF9pZ25vcmVfc2NhbGFyKGFjdGlvbnMsICJjaDJfc2ZwMV91ZHBf
cngiLCAiZmlsdGVyX21jYXN0X2lwXzEzIiApOwoJQ0hFQ0tfRVJST1JTOwoJCgltYXhfaWdub3Jl
X3NjYWxhcihhY3Rpb25zLCAiY2gyX3NmcDFfdWRwX3J4IiwgImZpbHRlcl9tY2FzdF9pcF8xNCIg
KTsKCUNIRUNLX0VSUk9SUzsKCQoJbWF4X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywgImNoMl9zZnAx
X3VkcF9yeCIsICJmaWx0ZXJfbWNhc3RfaXBfMTUiICk7CglDSEVDS19FUlJPUlM7CgkKCW1heF9p
Z25vcmVfc2NhbGFyKGFjdGlvbnMsICJjaDJfc2ZwMV91ZHBfcngiLCAiZmlsdGVyX21jYXN0X2lw
XzIiICk7CglDSEVDS19FUlJPUlM7CgkKCW1heF9pZ25vcmVfc2NhbGFyKGFjdGlvbnMsICJjaDJf
c2ZwMV91ZHBfcngiLCAiZmlsdGVyX21jYXN0X2lwXzMiICk7CglDSEVDS19FUlJPUlM7CgkKCW1h
eF9pZ25vcmVfc2NhbGFyKGFjdGlvbnMsICJjaDJfc2ZwMV91ZHBfcngiLCAiZmlsdGVyX21jYXN0
X2lwXzQiICk7CglDSEVDS19FUlJPUlM7CgkKCW1heF9pZ25vcmVfc2NhbGFyKGFjdGlvbnMsICJj
aDJfc2ZwMV91ZHBfcngiLCAiZmlsdGVyX21jYXN0X2lwXzUiICk7CglDSEVDS19FUlJPUlM7CgkK
CW1heF9pZ25vcmVfc2NhbGFyKGFjdGlvbnMsICJjaDJfc2ZwMV91ZHBfcngiLCAiZmlsdGVyX21j
YXN0X2lwXzYiICk7CglDSEVDS19FUlJPUlM7CgkKCW1heF9pZ25vcmVfc2NhbGFyKGFjdGlvbnMs
ICJjaDJfc2ZwMV91ZHBfcngiLCAiZmlsdGVyX21jYXN0X2lwXzciICk7CglDSEVDS19FUlJPUlM7
CgkKCW1heF9pZ25vcmVfc2NhbGFyKGFjdGlvbnMsICJjaDJfc2ZwMV91ZHBfcngiLCAiZmlsdGVy
X21jYXN0X2lwXzgiICk7CglDSEVDS19FUlJPUlM7CgkKCW1heF9pZ25vcmVfc2NhbGFyKGFjdGlv
bnMsICJjaDJfc2ZwMV91ZHBfcngiLCAiZmlsdGVyX21jYXN0X2lwXzkiICk7CglDSEVDS19FUlJP
UlM7CgkKCW1heF9pZ25vcmVfc2NhbGFyKGFjdGlvbnMsICJjaDJfc2ZwMV91ZHBfcngiLCAiZmls
dGVyX3NyY19pcF8wIiApOwoJQ0hFQ0tfRVJST1JTOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rp
b25zLCAiY2gyX3NmcDFfdWRwX3J4IiwgImZpbHRlcl9zcmNfaXBfMSIgKTsKCUNIRUNLX0VSUk9S
UzsKCQoJbWF4X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywgImNoMl9zZnAxX3VkcF9yeCIsICJmaWx0
ZXJfc3JjX2lwXzEwIiApOwoJQ0hFQ0tfRVJST1JTOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rp
b25zLCAiY2gyX3NmcDFfdWRwX3J4IiwgImZpbHRlcl9zcmNfaXBfMTEiICk7CglDSEVDS19FUlJP
UlM7CgkKCW1heF9pZ25vcmVfc2NhbGFyKGFjdGlvbnMsICJjaDJfc2ZwMV91ZHBfcngiLCAiZmls
dGVyX3NyY19pcF8xMiIgKTsKCUNIRUNLX0VSUk9SUzsKCQoJbWF4X2lnbm9yZV9zY2FsYXIoYWN0
aW9ucywgImNoMl9zZnAxX3VkcF9yeCIsICJmaWx0ZXJfc3JjX2lwXzEzIiApOwoJQ0hFQ0tfRVJS
T1JTOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAiY2gyX3NmcDFfdWRwX3J4IiwgImZp
bHRlcl9zcmNfaXBfMTQiICk7CglDSEVDS19FUlJPUlM7CgkKCW1heF9pZ25vcmVfc2NhbGFyKGFj
dGlvbnMsICJjaDJfc2ZwMV91ZHBfcngiLCAiZmlsdGVyX3NyY19pcF8xNSIgKTsKCUNIRUNLX0VS
Uk9SUzsKCQoJbWF4X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywgImNoMl9zZnAxX3VkcF9yeCIsICJm
aWx0ZXJfc3JjX2lwXzIiICk7CglDSEVDS19FUlJPUlM7CgkKCW1heF9pZ25vcmVfc2NhbGFyKGFj
dGlvbnMsICJjaDJfc2ZwMV91ZHBfcngiLCAiZmlsdGVyX3NyY19pcF8zIiApOwoJQ0hFQ0tfRVJS
T1JTOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAiY2gyX3NmcDFfdWRwX3J4IiwgImZp
bHRlcl9zcmNfaXBfNCIgKTsKCUNIRUNLX0VSUk9SUzsKCQoJbWF4X2lnbm9yZV9zY2FsYXIoYWN0
aW9ucywgImNoMl9zZnAxX3VkcF9yeCIsICJmaWx0ZXJfc3JjX2lwXzUiICk7CglDSEVDS19FUlJP
UlM7CgkKCW1heF9pZ25vcmVfc2NhbGFyKGFjdGlvbnMsICJjaDJfc2ZwMV91ZHBfcngiLCAiZmls
dGVyX3NyY19pcF82IiApOwoJQ0hFQ0tfRVJST1JTOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rp
b25zLCAiY2gyX3NmcDFfdWRwX3J4IiwgImZpbHRlcl9zcmNfaXBfNyIgKTsKCUNIRUNLX0VSUk9S
UzsKCQoJbWF4X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywgImNoMl9zZnAxX3VkcF9yeCIsICJmaWx0
ZXJfc3JjX2lwXzgiICk7CglDSEVDS19FUlJPUlM7CgkKCW1heF9pZ25vcmVfc2NhbGFyKGFjdGlv
bnMsICJjaDJfc2ZwMV91ZHBfcngiLCAiZmlsdGVyX3NyY19pcF85IiApOwoJQ0hFQ0tfRVJST1JT
OwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAiY2gyX3NmcDFfdWRwX3J4IiwgImZpbHRl
cl9zcmNfcG9ydF8wIiApOwoJQ0hFQ0tfRVJST1JTOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rp
b25zLCAiY2gyX3NmcDFfdWRwX3J4IiwgImZpbHRlcl9zcmNfcG9ydF8xIiApOwoJQ0hFQ0tfRVJS
T1JTOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAiY2gyX3NmcDFfdWRwX3J4IiwgImZp
bHRlcl9zcmNfcG9ydF8xMCIgKTsKCUNIRUNLX0VSUk9SUzsKCQoJbWF4X2lnbm9yZV9zY2FsYXIo
YWN0aW9ucywgImNoMl9zZnAxX3VkcF9yeCIsICJmaWx0ZXJfc3JjX3BvcnRfMTEiICk7CglDSEVD
S19FUlJPUlM7CgkKCW1heF9pZ25vcmVfc2NhbGFyKGFjdGlvbnMsICJjaDJfc2ZwMV91ZHBfcngi
LCAiZmlsdGVyX3NyY19wb3J0XzEyIiApOwoJQ0hFQ0tfRVJST1JTOwoJCgltYXhfaWdub3JlX3Nj
YWxhcihhY3Rpb25zLCAiY2gyX3NmcDFfdWRwX3J4IiwgImZpbHRlcl9zcmNfcG9ydF8xMyIgKTsK
CUNIRUNLX0VSUk9SUzsKCQoJbWF4X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywgImNoMl9zZnAxX3Vk
cF9yeCIsICJmaWx0ZXJfc3JjX3BvcnRfMTQiICk7CglDSEVDS19FUlJPUlM7CgkKCW1heF9pZ25v
cmVfc2NhbGFyKGFjdGlvbnMsICJjaDJfc2ZwMV91ZHBfcngiLCAiZmlsdGVyX3NyY19wb3J0XzE1
IiApOwoJQ0hFQ0tfRVJST1JTOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAiY2gyX3Nm
cDFfdWRwX3J4IiwgImZpbHRlcl9zcmNfcG9ydF8yIiApOwoJQ0hFQ0tfRVJST1JTOwoJCgltYXhf
aWdub3JlX3NjYWxhcihhY3Rpb25zLCAiY2gyX3NmcDFfdWRwX3J4IiwgImZpbHRlcl9zcmNfcG9y
dF8zIiApOwoJQ0hFQ0tfRVJST1JTOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAiY2gy
X3NmcDFfdWRwX3J4IiwgImZpbHRlcl9zcmNfcG9ydF80IiApOwoJQ0hFQ0tfRVJST1JTOwoJCglt
YXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAiY2gyX3NmcDFfdWRwX3J4IiwgImZpbHRlcl9zcmNf
cG9ydF81IiApOwoJQ0hFQ0tfRVJST1JTOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAi
Y2gyX3NmcDFfdWRwX3J4IiwgImZpbHRlcl9zcmNfcG9ydF82IiApOwoJQ0hFQ0tfRVJST1JTOwoJ
CgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAiY2gyX3NmcDFfdWRwX3J4IiwgImZpbHRlcl9z
cmNfcG9ydF83IiApOwoJQ0hFQ0tfRVJST1JTOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25z
LCAiY2gyX3NmcDFfdWRwX3J4IiwgImZpbHRlcl9zcmNfcG9ydF84IiApOwoJQ0hFQ0tfRVJST1JT
OwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAiY2gyX3NmcDFfdWRwX3J4IiwgImZpbHRl
cl9zcmNfcG9ydF85IiApOwoJQ0hFQ0tfRVJST1JTOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rp
b25zLCAiY2gyX3NmcDFfdWRwX3J4IiwgImZpbHRlcl92YWxpZF8wIiApOwoJQ0hFQ0tfRVJST1JT
OwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAiY2gyX3NmcDFfdWRwX3J4IiwgImZpbHRl
cl92YWxpZF8xIiApOwoJQ0hFQ0tfRVJST1JTOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25z
LCAiY2gyX3NmcDFfdWRwX3J4IiwgImZpbHRlcl92YWxpZF8xMCIgKTsKCUNIRUNLX0VSUk9SUzsK
CQoJbWF4X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywgImNoMl9zZnAxX3VkcF9yeCIsICJmaWx0ZXJf
dmFsaWRfMTEiICk7CglDSEVDS19FUlJPUlM7CgkKCW1heF9pZ25vcmVfc2NhbGFyKGFjdGlvbnMs
ICJjaDJfc2ZwMV91ZHBfcngiLCAiZmlsdGVyX3ZhbGlkXzEyIiApOwoJQ0hFQ0tfRVJST1JTOwoJ
CgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAiY2gyX3NmcDFfdWRwX3J4IiwgImZpbHRlcl92
YWxpZF8xMyIgKTsKCUNIRUNLX0VSUk9SUzsKCQoJbWF4X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywg
ImNoMl9zZnAxX3VkcF9yeCIsICJmaWx0ZXJfdmFsaWRfMTQiICk7CglDSEVDS19FUlJPUlM7CgkK
CW1heF9pZ25vcmVfc2NhbGFyKGFjdGlvbnMsICJjaDJfc2ZwMV91ZHBfcngiLCAiZmlsdGVyX3Zh
bGlkXzE1IiApOwoJQ0hFQ0tfRVJST1JTOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAi
Y2gyX3NmcDFfdWRwX3J4IiwgImZpbHRlcl92YWxpZF8yIiApOwoJQ0hFQ0tfRVJST1JTOwoJCglt
YXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAiY2gyX3NmcDFfdWRwX3J4IiwgImZpbHRlcl92YWxp
ZF8zIiApOwoJQ0hFQ0tfRVJST1JTOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAiY2gy
X3NmcDFfdWRwX3J4IiwgImZpbHRlcl92YWxpZF80IiApOwoJQ0hFQ0tfRVJST1JTOwoJCgltYXhf
aWdub3JlX3NjYWxhcihhY3Rpb25zLCAiY2gyX3NmcDFfdWRwX3J4IiwgImZpbHRlcl92YWxpZF81
IiApOwoJQ0hFQ0tfRVJST1JTOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAiY2gyX3Nm
cDFfdWRwX3J4IiwgImZpbHRlcl92YWxpZF82IiApOwoJQ0hFQ0tfRVJST1JTOwoJCgltYXhfaWdu
b3JlX3NjYWxhcihhY3Rpb25zLCAiY2gyX3NmcDFfdWRwX3J4IiwgImZpbHRlcl92YWxpZF83IiAp
OwoJQ0hFQ0tfRVJST1JTOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAiY2gyX3NmcDFf
dWRwX3J4IiwgImZpbHRlcl92YWxpZF84IiApOwoJQ0hFQ0tfRVJST1JTOwoJCgltYXhfaWdub3Jl
X3NjYWxhcihhY3Rpb25zLCAiY2gyX3NmcDFfdWRwX3J4IiwgImZpbHRlcl92YWxpZF85IiApOwoJ
Q0hFQ0tfRVJST1JTOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAiY2gyX3NmcDFfdWRw
X3J4IiwgInNlbGZfaXAiICk7CglDSEVDS19FUlJPUlM7CgkKCW1heF9pZ25vcmVfc2NhbGFyKGFj
dGlvbnMsICJjaDJfc2ZwMV91ZHBfcnhfRU9GRUZyYW1lRHJvcCIsICJiYWRGcmFtZXNDb3VudGVy
IiApOwoJQ0hFQ0tfRVJST1JTOwoJCgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAiY2gyX3Nm
cDFfdWRwX3R4IiwgInNlbGZfaXAiICk7CglDSEVDS19FUlJPUlM7CgkKCW1heF9pZ25vcmVfc2Nh
bGFyKGFjdGlvbnMsICJjaDJfc2ZwMV91ZHBfdHgiLCAic2VsZl9tYWMiICk7CglDSEVDS19FUlJP
UlM7CgkKCS8qIGNvZGUgZm9yIHNjYWxhciBuZXR3b3JrX21nbXRfc3RyZWFtX3RvX2hvc3Rfcnhf
ZnJhbWVkX0ZyYW1lZFN0cmVhbVByZXByb2Nlc3Nvci5lb2ZDb3VudCAqLwoJdWludDY0X3QgKm91
dHNjYWxhcl9uZXR3b3JrX21nbXRfc3RyZWFtX3RvX2hvc3RfcnhfZnJhbWVkX0ZyYW1lZFN0cmVh
bVByZXByb2Nlc3Nvcl9lb2ZDb3VudCA9IGludGVyZmFjZV9hY3Rpb25zLT5vdXRzY2FsYXJfbmV0
d29ya19tZ210X3N0cmVhbV90b19ob3N0X3J4X2ZyYW1lZF9GcmFtZWRTdHJlYW1QcmVwcm9jZXNz
b3JfZW9mQ291bnQ7CgltYXhfZ2V0X3VpbnQ2NHQoYWN0aW9ucywgIm5ldHdvcmtfbWdtdF9zdHJl
YW1fdG9faG9zdF9yeF9mcmFtZWRfRnJhbWVkU3RyZWFtUHJlcHJvY2Vzc29yIiwgImVvZkNvdW50
Iiwgb3V0c2NhbGFyX25ldHdvcmtfbWdtdF9zdHJlYW1fdG9faG9zdF9yeF9mcmFtZWRfRnJhbWVk
U3RyZWFtUHJlcHJvY2Vzc29yX2VvZkNvdW50KTsKCUNIRUNLX0VSUk9SUzsKCS8qIGVuZCBvZiBj
b2RlIGZvciBzY2FsYXIgbmV0d29ya19tZ210X3N0cmVhbV90b19ob3N0X3J4X2ZyYW1lZF9GcmFt
ZWRTdHJlYW1QcmVwcm9jZXNzb3IuZW9mQ291bnQqLwoJCgkvKiBjb2RlIGZvciBzY2FsYXIgbmV0
d29ya19tZ210X3N0cmVhbV90b19ob3N0X3J4X2ZyYW1lZF9GcmFtZWRTdHJlYW1QcmVwcm9jZXNz
b3Iuc29mQ291bnQgKi8KCXVpbnQ2NF90ICpvdXRzY2FsYXJfbmV0d29ya19tZ210X3N0cmVhbV90
b19ob3N0X3J4X2ZyYW1lZF9GcmFtZWRTdHJlYW1QcmVwcm9jZXNzb3Jfc29mQ291bnQgPSBpbnRl
cmZhY2VfYWN0aW9ucy0+b3V0c2NhbGFyX25ldHdvcmtfbWdtdF9zdHJlYW1fdG9faG9zdF9yeF9m
cmFtZWRfRnJhbWVkU3RyZWFtUHJlcHJvY2Vzc29yX3NvZkNvdW50OwoJbWF4X2dldF91aW50NjR0
KGFjdGlvbnMsICJuZXR3b3JrX21nbXRfc3RyZWFtX3RvX2hvc3RfcnhfZnJhbWVkX0ZyYW1lZFN0
cmVhbVByZXByb2Nlc3NvciIsICJzb2ZDb3VudCIsIG91dHNjYWxhcl9uZXR3b3JrX21nbXRfc3Ry
ZWFtX3RvX2hvc3RfcnhfZnJhbWVkX0ZyYW1lZFN0cmVhbVByZXByb2Nlc3Nvcl9zb2ZDb3VudCk7
CglDSEVDS19FUlJPUlM7CgkvKiBlbmQgb2YgY29kZSBmb3Igc2NhbGFyIG5ldHdvcmtfbWdtdF9z
dHJlYW1fdG9faG9zdF9yeF9mcmFtZWRfRnJhbWVkU3RyZWFtUHJlcHJvY2Vzc29yLnNvZkNvdW50
Ki8KCQoJLyogY29kZSBmb3Igc3RyZWFtIG5ldHdvcmtfbWdtdF9zdHJlYW1fZnJvbV9ob3N0X3R4
X2ZyYW1lZCAqLwoJc2l6ZV90IGluc3RyZWFtX3NpemVfbmV0d29ya19tZ210X3N0cmVhbV9mcm9t
X2hvc3RfdHhfZnJhbWVkID0gaW50ZXJmYWNlX2FjdGlvbnMtPmluc3RyZWFtX3NpemVfbmV0d29y
a19tZ210X3N0cmVhbV9mcm9tX2hvc3RfdHhfZnJhbWVkOwoJaWYgKGluc3RyZWFtX3NpemVfbmV0
d29ya19tZ210X3N0cmVhbV9mcm9tX2hvc3RfdHhfZnJhbWVkID4gMCkgewoJCWNvbnN0IHZvaWQg
KnN0cmVhbV9wdHIgPSBpbnRlcmZhY2VfYWN0aW9ucy0+aW5zdHJlYW1fbmV0d29ya19tZ210X3N0
cmVhbV9mcm9tX2hvc3RfdHhfZnJhbWVkOwoJCWlmICh1c2VfY2FsbGJhY2sgJiYgKDEgPT0gRmll
bGRTd2FwX2NoZWNrX2FsaWduZWQoaW50ZXJmYWNlX2FjdGlvbnMtPmluc3RyZWFtX25ldHdvcmtf
bWdtdF9zdHJlYW1fZnJvbV9ob3N0X3R4X2ZyYW1lZCkpKSB7CgkJCXZvaWQgKmFsaWduZWRfaW5z
dHJlYW1fbmV0d29ya19tZ210X3N0cmVhbV9mcm9tX2hvc3RfdHhfZnJhbWVkID0gbWFsbG9jKGlu
c3RyZWFtX3NpemVfbmV0d29ya19tZ210X3N0cmVhbV9mcm9tX2hvc3RfdHhfZnJhbWVkKTsKCQkJ
aWYgKGFsaWduZWRfaW5zdHJlYW1fbmV0d29ya19tZ210X3N0cmVhbV9mcm9tX2hvc3RfdHhfZnJh
bWVkID09IE5VTEwpIHsKCQkJCW1heF9yZXBvcnRfZXJyb3Jfc2xpYyhhY3Rpb25zLT5lcnJvcnMs
IF9fRklMRV9fLCBfX0xJTkVfXywgNTI2LCAiRmFpbGVkIHRvIGFsbG9jYXRlIGFsaWduZWQgbWVt
b3J5IGZvciBzdHJlYW0gJ25ldHdvcmtfbWdtdF9zdHJlYW1fZnJvbV9ob3N0X3R4X2ZyYW1lZCci
KTsKCQkJCUNIRUNLX0VSUk9SUzsKCQkJfQoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5j
b3VudF0pLT51c2VyX3B0ciAgICA9ICh1aW50OF90KikgaW50ZXJmYWNlX2FjdGlvbnMtPmluc3Ry
ZWFtX25ldHdvcmtfbWdtdF9zdHJlYW1fZnJvbV9ob3N0X3R4X2ZyYW1lZDsKCQkJKCZjYl9kYXRh
LT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+YWxpZ25lZF9wdHIgPSAodWludDhfdCopIGFsaWdu
ZWRfaW5zdHJlYW1fbmV0d29ya19tZ210X3N0cmVhbV9mcm9tX2hvc3RfdHhfZnJhbWVkOwoJCQko
JmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5zaXplICAgICAgICA9IGluc3RyZWFt
X3NpemVfbmV0d29ya19tZ210X3N0cmVhbV9mcm9tX2hvc3RfdHhfZnJhbWVkOwoJCQkoJmNiX2Rh
dGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5pc19vdXRwdXQgICA9IDA7CgkJCWNiX2RhdGEt
PmNvdW50ICs9IDE7CgkJCW1lbWNweShhbGlnbmVkX2luc3RyZWFtX25ldHdvcmtfbWdtdF9zdHJl
YW1fZnJvbV9ob3N0X3R4X2ZyYW1lZCwgaW50ZXJmYWNlX2FjdGlvbnMtPmluc3RyZWFtX25ldHdv
cmtfbWdtdF9zdHJlYW1fZnJvbV9ob3N0X3R4X2ZyYW1lZCwgaW5zdHJlYW1fc2l6ZV9uZXR3b3Jr
X21nbXRfc3RyZWFtX2Zyb21faG9zdF90eF9mcmFtZWQpOwoJCQlzdHJlYW1fcHRyID0gYWxpZ25l
ZF9pbnN0cmVhbV9uZXR3b3JrX21nbXRfc3RyZWFtX2Zyb21faG9zdF90eF9mcmFtZWQ7CgkJfQoJ
CW1heF9xdWV1ZV9pbnB1dChhY3Rpb25zLCAibmV0d29ya19tZ210X3N0cmVhbV9mcm9tX2hvc3Rf
dHhfZnJhbWVkIiwgc3RyZWFtX3B0ciwgaW5zdHJlYW1fc2l6ZV9uZXR3b3JrX21nbXRfc3RyZWFt
X2Zyb21faG9zdF90eF9mcmFtZWQpOwoJCUNIRUNLX0VSUk9SUzsKCX0KCS8qIGVuZCBvZiBjb2Rl
IGZvciBzdHJlYW0gbmV0d29ya19tZ210X3N0cmVhbV9mcm9tX2hvc3RfdHhfZnJhbWVkICovCgkK
CS8qIGNvZGUgZm9yIHN0cmVhbSBuZXR3b3JrX21nbXRfc3RyZWFtX3RvX2hvc3RfcnhfZnJhbWVk
ICovCglzaXplX3Qgb3V0c3RyZWFtX3NpemVfbmV0d29ya19tZ210X3N0cmVhbV90b19ob3N0X3J4
X2ZyYW1lZCA9IGludGVyZmFjZV9hY3Rpb25zLT5vdXRzdHJlYW1fc2l6ZV9uZXR3b3JrX21nbXRf
c3RyZWFtX3RvX2hvc3RfcnhfZnJhbWVkOwoJaWYgKG91dHN0cmVhbV9zaXplX25ldHdvcmtfbWdt
dF9zdHJlYW1fdG9faG9zdF9yeF9mcmFtZWQgPiAwKSB7CgkJdm9pZCAqc3RyZWFtX3B0ciA9IGlu
dGVyZmFjZV9hY3Rpb25zLT5vdXRzdHJlYW1fbmV0d29ya19tZ210X3N0cmVhbV90b19ob3N0X3J4
X2ZyYW1lZDsKCQlpZiAodXNlX2NhbGxiYWNrICYmICgxID09IEZpZWxkU3dhcF9jaGVja19hbGln
bmVkKGludGVyZmFjZV9hY3Rpb25zLT5vdXRzdHJlYW1fbmV0d29ya19tZ210X3N0cmVhbV90b19o
b3N0X3J4X2ZyYW1lZCkpKSB7CgkJCXZvaWQgKmFsaWduZWRfb3V0c3RyZWFtX25ldHdvcmtfbWdt
dF9zdHJlYW1fdG9faG9zdF9yeF9mcmFtZWQgPSBtYWxsb2Mob3V0c3RyZWFtX3NpemVfbmV0d29y
a19tZ210X3N0cmVhbV90b19ob3N0X3J4X2ZyYW1lZCk7CgkJCWlmIChhbGlnbmVkX291dHN0cmVh
bV9uZXR3b3JrX21nbXRfc3RyZWFtX3RvX2hvc3RfcnhfZnJhbWVkID09IE5VTEwpIHsKCQkJCW1h
eF9yZXBvcnRfZXJyb3Jfc2xpYyhhY3Rpb25zLT5lcnJvcnMsIF9fRklMRV9fLCBfX0xJTkVfXywg
NTI2LCAiRmFpbGVkIHRvIGFsbG9jYXRlIGFsaWduZWQgbWVtb3J5IGZvciBzdHJlYW0gJ25ldHdv
cmtfbWdtdF9zdHJlYW1fdG9faG9zdF9yeF9mcmFtZWQnIik7CgkJCQlDSEVDS19FUlJPUlM7CgkJ
CX0KCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+dXNlcl9wdHIgICAgPSAo
dWludDhfdCopIGludGVyZmFjZV9hY3Rpb25zLT5vdXRzdHJlYW1fbmV0d29ya19tZ210X3N0cmVh
bV90b19ob3N0X3J4X2ZyYW1lZDsKCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRd
KS0+YWxpZ25lZF9wdHIgPSAodWludDhfdCopIGFsaWduZWRfb3V0c3RyZWFtX25ldHdvcmtfbWdt
dF9zdHJlYW1fdG9faG9zdF9yeF9mcmFtZWQ7CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEt
PmNvdW50XSktPnNpemUgICAgICAgID0gb3V0c3RyZWFtX3NpemVfbmV0d29ya19tZ210X3N0cmVh
bV90b19ob3N0X3J4X2ZyYW1lZDsKCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRd
KS0+aXNfb3V0cHV0ICAgPSAxOwoJCQljYl9kYXRhLT5jb3VudCArPSAxOwoJCQlzdHJlYW1fcHRy
ID0gYWxpZ25lZF9vdXRzdHJlYW1fbmV0d29ya19tZ210X3N0cmVhbV90b19ob3N0X3J4X2ZyYW1l
ZDsKCQl9CgkJbWF4X3F1ZXVlX291dHB1dChhY3Rpb25zLCAibmV0d29ya19tZ210X3N0cmVhbV90
b19ob3N0X3J4X2ZyYW1lZCIsIHN0cmVhbV9wdHIsIG91dHN0cmVhbV9zaXplX25ldHdvcmtfbWdt
dF9zdHJlYW1fdG9faG9zdF9yeF9mcmFtZWQpOwoJCUNIRUNLX0VSUk9SUzsKCX0KCS8qIGVuZCBv
ZiBjb2RlIGZvciBzdHJlYW0gbmV0d29ya19tZ210X3N0cmVhbV90b19ob3N0X3J4X2ZyYW1lZCAq
LwoJCgltYXhfaWdub3JlX21lbShhY3Rpb25zLCAiY2gyX3NmcDFfaWNtcF9lY2hvX3NlcnZlciIs
ICJwYXJhbXMiICk7CglDSEVDS19FUlJPUlM7CgkKCW1heF9pZ25vcmVfbWVtKGFjdGlvbnMsICJj
aDJfc2ZwMV91ZHBfdHgiLCAicm91dGluZ19sb29rdXBfMSIgKTsKCUNIRUNLX0VSUk9SUzsKCQoJ
bWF4X2lnbm9yZV9tZW0oYWN0aW9ucywgImNoMl9zZnAxX3VkcF90eCIsICJyb3V0aW5nX2xvb2t1
cF8yIiApOwoJQ0hFQ0tfRVJST1JTOwoJCglpZiAodXNlX2NhbGxiYWNrICYmIGNiX2RhdGEtPmNv
dW50ID09IDApIHsKCQkqY2FsbGJhY2tfZGF0YSA9IE5VTEw7CgkJKmNhbGxiYWNrX2Z1bmMgPSBO
VUxMOwoJCWZyZWUoY2JfZGF0YSk7Cgl9CglyZXR1cm4gYWN0aW9uczsKI3VuZGVmIENIRUNLX0VS
Uk9SUwp9Cgp2b2lkIEZpZWxkU3dhcCgKCXVpbnQ2NF90ICpvdXRzY2FsYXJfU2xpY2VyRnJhbWVy
X25ldHdvcmtfbWdtdF9zdHJlYW1fZnJvbV9ob3N0X3R4X2ZyYW1lZF9lb2ZDb3VudCwKCXVpbnQ2
NF90ICpvdXRzY2FsYXJfU2xpY2VyRnJhbWVyX25ldHdvcmtfbWdtdF9zdHJlYW1fZnJvbV9ob3N0
X3R4X2ZyYW1lZF9zb2ZDb3VudCwKCXVpbnQ2NF90ICpvdXRzY2FsYXJfbmV0d29ya19tZ210X3N0
cmVhbV90b19ob3N0X3J4X2ZyYW1lZF9GcmFtZWRTdHJlYW1QcmVwcm9jZXNzb3JfZW9mQ291bnQs
Cgl1aW50NjRfdCAqb3V0c2NhbGFyX25ldHdvcmtfbWdtdF9zdHJlYW1fdG9faG9zdF9yeF9mcmFt
ZWRfRnJhbWVkU3RyZWFtUHJlcHJvY2Vzc29yX3NvZkNvdW50LAoJY29uc3Qgdm9pZCAqaW5zdHJl
YW1fbmV0d29ya19tZ210X3N0cmVhbV9mcm9tX2hvc3RfdHhfZnJhbWVkLAoJc2l6ZV90IGluc3Ry
ZWFtX3NpemVfbmV0d29ya19tZ210X3N0cmVhbV9mcm9tX2hvc3RfdHhfZnJhbWVkLAoJdm9pZCAq
b3V0c3RyZWFtX25ldHdvcmtfbWdtdF9zdHJlYW1fdG9faG9zdF9yeF9mcmFtZWQsCglzaXplX3Qg
b3V0c3RyZWFtX3NpemVfbmV0d29ya19tZ210X3N0cmVhbV90b19ob3N0X3J4X2ZyYW1lZCkKewoJ
KHZvaWQpIHB0aHJlYWRfb25jZSgmc2xpY19ic19pc19pbml0aWFsaXNlZCwgRmllbGRTd2FwX3N0
YXRpY19pbml0KTsKCUNIRUNLX05VTEwoc3RvcmVkX21heGZpbGUsICJNYXhmaWxlIHdhcyBub3Qg
bG9hZGVkIiwgKTsKCW1heF9ydW5fdCAqcnVuID0gRmllbGRTd2FwX25vbmJsb2NrKG91dHNjYWxh
cl9TbGljZXJGcmFtZXJfbmV0d29ya19tZ210X3N0cmVhbV9mcm9tX2hvc3RfdHhfZnJhbWVkX2Vv
ZkNvdW50LCBvdXRzY2FsYXJfU2xpY2VyRnJhbWVyX25ldHdvcmtfbWdtdF9zdHJlYW1fZnJvbV9o
b3N0X3R4X2ZyYW1lZF9zb2ZDb3VudCwgb3V0c2NhbGFyX25ldHdvcmtfbWdtdF9zdHJlYW1fdG9f
aG9zdF9yeF9mcmFtZWRfRnJhbWVkU3RyZWFtUHJlcHJvY2Vzc29yX2VvZkNvdW50LCBvdXRzY2Fs
YXJfbmV0d29ya19tZ210X3N0cmVhbV90b19ob3N0X3J4X2ZyYW1lZF9GcmFtZWRTdHJlYW1QcmVw
cm9jZXNzb3Jfc29mQ291bnQsIGluc3RyZWFtX25ldHdvcmtfbWdtdF9zdHJlYW1fZnJvbV9ob3N0
X3R4X2ZyYW1lZCwgaW5zdHJlYW1fc2l6ZV9uZXR3b3JrX21nbXRfc3RyZWFtX2Zyb21faG9zdF90
eF9mcmFtZWQsIG91dHN0cmVhbV9uZXR3b3JrX21nbXRfc3RyZWFtX3RvX2hvc3RfcnhfZnJhbWVk
LCBvdXRzdHJlYW1fc2l6ZV9uZXR3b3JrX21nbXRfc3RyZWFtX3RvX2hvc3RfcnhfZnJhbWVkKTsK
CUNIRUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgKTsKCW1heF93YWl0KHJ1
bik7Cn0KCm1heF9ydW5fdCAqRmllbGRTd2FwX25vbmJsb2NrKAoJdWludDY0X3QgKm91dHNjYWxh
cl9TbGljZXJGcmFtZXJfbmV0d29ya19tZ210X3N0cmVhbV9mcm9tX2hvc3RfdHhfZnJhbWVkX2Vv
ZkNvdW50LAoJdWludDY0X3QgKm91dHNjYWxhcl9TbGljZXJGcmFtZXJfbmV0d29ya19tZ210X3N0
cmVhbV9mcm9tX2hvc3RfdHhfZnJhbWVkX3NvZkNvdW50LAoJdWludDY0X3QgKm91dHNjYWxhcl9u
ZXR3b3JrX21nbXRfc3RyZWFtX3RvX2hvc3RfcnhfZnJhbWVkX0ZyYW1lZFN0cmVhbVByZXByb2Nl
c3Nvcl9lb2ZDb3VudCwKCXVpbnQ2NF90ICpvdXRzY2FsYXJfbmV0d29ya19tZ210X3N0cmVhbV90
b19ob3N0X3J4X2ZyYW1lZF9GcmFtZWRTdHJlYW1QcmVwcm9jZXNzb3Jfc29mQ291bnQsCgljb25z
dCB2b2lkICppbnN0cmVhbV9uZXR3b3JrX21nbXRfc3RyZWFtX2Zyb21faG9zdF90eF9mcmFtZWQs
CglzaXplX3QgaW5zdHJlYW1fc2l6ZV9uZXR3b3JrX21nbXRfc3RyZWFtX2Zyb21faG9zdF90eF9m
cmFtZWQsCgl2b2lkICpvdXRzdHJlYW1fbmV0d29ya19tZ210X3N0cmVhbV90b19ob3N0X3J4X2Zy
YW1lZCwKCXNpemVfdCBvdXRzdHJlYW1fc2l6ZV9uZXR3b3JrX21nbXRfc3RyZWFtX3RvX2hvc3Rf
cnhfZnJhbWVkKQp7CglGaWVsZFN3YXBfYWN0aW9uc190IGludGVyZmFjZV9hY3Rpb25zOwoJaW50
ZXJmYWNlX2FjdGlvbnMub3V0c2NhbGFyX1NsaWNlckZyYW1lcl9uZXR3b3JrX21nbXRfc3RyZWFt
X2Zyb21faG9zdF90eF9mcmFtZWRfZW9mQ291bnQgPSBvdXRzY2FsYXJfU2xpY2VyRnJhbWVyX25l
dHdvcmtfbWdtdF9zdHJlYW1fZnJvbV9ob3N0X3R4X2ZyYW1lZF9lb2ZDb3VudDsKCWludGVyZmFj
ZV9hY3Rpb25zLm91dHNjYWxhcl9TbGljZXJGcmFtZXJfbmV0d29ya19tZ210X3N0cmVhbV9mcm9t
X2hvc3RfdHhfZnJhbWVkX3NvZkNvdW50ID0gb3V0c2NhbGFyX1NsaWNlckZyYW1lcl9uZXR3b3Jr
X21nbXRfc3RyZWFtX2Zyb21faG9zdF90eF9mcmFtZWRfc29mQ291bnQ7CglpbnRlcmZhY2VfYWN0
aW9ucy5vdXRzY2FsYXJfbmV0d29ya19tZ210X3N0cmVhbV90b19ob3N0X3J4X2ZyYW1lZF9GcmFt
ZWRTdHJlYW1QcmVwcm9jZXNzb3JfZW9mQ291bnQgPSBvdXRzY2FsYXJfbmV0d29ya19tZ210X3N0
cmVhbV90b19ob3N0X3J4X2ZyYW1lZF9GcmFtZWRTdHJlYW1QcmVwcm9jZXNzb3JfZW9mQ291bnQ7
CglpbnRlcmZhY2VfYWN0aW9ucy5vdXRzY2FsYXJfbmV0d29ya19tZ210X3N0cmVhbV90b19ob3N0
X3J4X2ZyYW1lZF9GcmFtZWRTdHJlYW1QcmVwcm9jZXNzb3Jfc29mQ291bnQgPSBvdXRzY2FsYXJf
bmV0d29ya19tZ210X3N0cmVhbV90b19ob3N0X3J4X2ZyYW1lZF9GcmFtZWRTdHJlYW1QcmVwcm9j
ZXNzb3Jfc29mQ291bnQ7CglpbnRlcmZhY2VfYWN0aW9ucy5pbnN0cmVhbV9uZXR3b3JrX21nbXRf
c3RyZWFtX2Zyb21faG9zdF90eF9mcmFtZWQgPSBpbnN0cmVhbV9uZXR3b3JrX21nbXRfc3RyZWFt
X2Zyb21faG9zdF90eF9mcmFtZWQ7CglpbnRlcmZhY2VfYWN0aW9ucy5pbnN0cmVhbV9zaXplX25l
dHdvcmtfbWdtdF9zdHJlYW1fZnJvbV9ob3N0X3R4X2ZyYW1lZCA9IGluc3RyZWFtX3NpemVfbmV0
d29ya19tZ210X3N0cmVhbV9mcm9tX2hvc3RfdHhfZnJhbWVkOwoJaW50ZXJmYWNlX2FjdGlvbnMu
b3V0c3RyZWFtX25ldHdvcmtfbWdtdF9zdHJlYW1fdG9faG9zdF9yeF9mcmFtZWQgPSBvdXRzdHJl
YW1fbmV0d29ya19tZ210X3N0cmVhbV90b19ob3N0X3J4X2ZyYW1lZDsKCWludGVyZmFjZV9hY3Rp
b25zLm91dHN0cmVhbV9zaXplX25ldHdvcmtfbWdtdF9zdHJlYW1fdG9faG9zdF9yeF9mcmFtZWQg
PSBvdXRzdHJlYW1fc2l6ZV9uZXR3b3JrX21nbXRfc3RyZWFtX3RvX2hvc3RfcnhfZnJhbWVkOwoJ
KHZvaWQpIHB0aHJlYWRfb25jZSgmc2xpY19ic19pc19pbml0aWFsaXNlZCwgRmllbGRTd2FwX3N0
YXRpY19pbml0KTsKCUNIRUNLX05VTEwoc3RvcmVkX21heGZpbGUsICJNYXhmaWxlIHdhcyBub3Qg
bG9hZGVkIiwgTlVMTCk7Cgl2b2lkICgqY2JfZnVuYykodm9pZCopID0gTlVMTDsKCXZvaWQgICpj
Yl9kYXRhICAgICAgICAgPSBOVUxMOwoJbWF4X2FjdGlvbnNfdCAqYWN0aW9ucyA9IEZpZWxkU3dh
cF9jb252ZXJ0X2ludGVybmFsKHN0b3JlZF9tYXhmaWxlLCAmaW50ZXJmYWNlX2FjdGlvbnMsIDEs
ICZjYl9mdW5jLCAmY2JfZGF0YSk7CglDSEVDS19OVUxMKGFjdGlvbnMsICJVbmFibGUgdG8gYnVp
bGQgYWN0aW9ucyIsIE5VTEwpOwoJbWF4X3ZhbGlkYXRlKGFjdGlvbnMpOwoJQ0hFQ0tfRVJST1JT
X1NUKGFjdGlvbnMsIE5VTEwpOwoJQ0hFQ0tfRVJST1JTX1NUKHN0b3JlZF9lbmdpbmUsIE5VTEwp
OwoJbWF4X3J1bl90ICpydW47CglpZiAoY2JfZnVuYyA9PSBOVUxMKSB7CgkJcnVuID0gbWF4X3J1
bl9ub25ibG9jayhzdG9yZWRfZW5naW5lLCBhY3Rpb25zKTsKCX0gZWxzZSB7CgkJcnVuID0gbWF4
X3J1bl9ub25ibG9ja193aXRoX2NiKHN0b3JlZF9lbmdpbmUsIGFjdGlvbnMsIGNiX2Z1bmMsIGNi
X2RhdGEpOwoJfQoJQ0hFQ0tfTlVMTChydW4sICJVbmFibGUgdG8gcnVuIGFjdGlvbnMiLCBOVUxM
KTsKCUNIRUNLX0VSUk9SU19TVChhY3Rpb25zLCBOVUxMKTsKCW1heF9hY3Rpb25zX2ZyZWUoYWN0
aW9ucyk7CglyZXR1cm4gcnVuOwp9Cgp2b2lkIEZpZWxkU3dhcF9ydW4oCgltYXhfZW5naW5lX3Qg
KmVuZ2luZSwKCUZpZWxkU3dhcF9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zKQp7CgltYXhf
cnVuX3QgKnJ1biA9IEZpZWxkU3dhcF9ydW5fbm9uYmxvY2soZW5naW5lLCBpbnRlcmZhY2VfYWN0
aW9ucyk7CglDSEVDS19OVUxMKHJ1biwgIlVuYWJsZSB0byBydW4gYWN0aW9ucyIsICk7CgltYXhf
d2FpdChydW4pOwp9CgptYXhfcnVuX3QgKkZpZWxkU3dhcF9ydW5fbm9uYmxvY2soCgltYXhfZW5n
aW5lX3QgKmVuZ2luZSwKCUZpZWxkU3dhcF9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zKQp7
CgltYXhfZmlsZV90ICptYXhmaWxlID0gbWF4X2VuZ2luZV9nZXRfbWF4X2ZpbGUoZW5naW5lKTsg
Cgl2b2lkICgqY2JfZnVuYykodm9pZCopID0gTlVMTDsKCXZvaWQgICpjYl9kYXRhICAgICAgICAg
PSBOVUxMOwoJbWF4X2FjdGlvbnNfdCAqYWN0aW9ucyA9IEZpZWxkU3dhcF9jb252ZXJ0X2ludGVy
bmFsKG1heGZpbGUsIGludGVyZmFjZV9hY3Rpb25zLCAxLCAmY2JfZnVuYywgJmNiX2RhdGEpOwoJ
Q0hFQ0tfRVJST1JTX1NUKGFjdGlvbnMsIE5VTEwpOwoJbWF4X3J1bl90ICpydW47CglpZiAoY2Jf
ZnVuYyA9PSBOVUxMKSB7CgkJcnVuID0gbWF4X3J1bl9ub25ibG9jayhlbmdpbmUsIGFjdGlvbnMp
OwoJfSBlbHNlIHsKCQlydW4gPSBtYXhfcnVuX25vbmJsb2NrX3dpdGhfY2IoZW5naW5lLCBhY3Rp
b25zLCBjYl9mdW5jLCBjYl9kYXRhKTsKCX0KCUNIRUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1
biBhY3Rpb25zIiwgTlVMTCk7CgltYXhfYWN0aW9uc19mcmVlKGFjdGlvbnMpOwoJcmV0dXJuIHJ1
bjsKfQoKCi8qKgogKiBcYnJpZWYgR3JvdXAgcnVuIGFkdmFuY2VkIHN0YXRpYyBmdW5jdGlvbiBm
b3IgdGhlIGludGVyZmFjZSAnZGVmYXVsdCcuCiAqIAogKiBccGFyYW0gW2luXSBncm91cCBHcm91
cCB0byB1c2UuCiAqIFxwYXJhbSBbaW4sb3V0XSBpbnRlcmZhY2VfYWN0aW9ucyBBY3Rpb25zIHRv
IHJ1bi4KICoKICogUnVuIHRoZSBhY3Rpb25zIG9uIHRoZSBmaXJzdCBkZXZpY2UgYXZhaWxhYmxl
IGluIHRoZSBncm91cC4KICovCnZvaWQgRmllbGRTd2FwX3J1bl9ncm91cChtYXhfZ3JvdXBfdCAq
Z3JvdXAsIEZpZWxkU3dhcF9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zKQp7CgltYXhfcnVu
X3QgKnJ1biA9IEZpZWxkU3dhcF9ydW5fZ3JvdXBfbm9uYmxvY2soZ3JvdXAsIGludGVyZmFjZV9h
Y3Rpb25zKTsKCUNIRUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgKTsKCW1h
eF93YWl0KHJ1bik7Cn0KCgovKioKICogXGJyaWVmIEdyb3VwIHJ1biBhZHZhbmNlZCBzdGF0aWMg
bm9uLWJsb2NraW5nIGZ1bmN0aW9uIGZvciB0aGUgaW50ZXJmYWNlICdkZWZhdWx0Jy4KICogCiAq
CiAqIFNjaGVkdWxlIHRoZSBhY3Rpb25zIHRvIHJ1biBvbiB0aGUgZmlyc3QgZGV2aWNlIGF2YWls
YWJsZSBpbiB0aGUgZ3JvdXAgYW5kIHJldHVybiBpbW1lZGlhdGVseS4KICogVGhlIHN0YXR1cyBv
ZiB0aGUgcnVuIG11c3QgYmUgY2hlY2tlZCB3aXRoIDo6bWF4X3dhaXQuIAogKiBOb3RlIHRoYXQg
dXNlIG9mIDo6bWF4X25vd2FpdCBpcyBwcm9oaWJpdGVkIHdpdGggbm9uLWJsb2NraW5nIHJ1bm5p
bmcgb24gZ3JvdXBzOgogKiBzZWUgdGhlIDo6bWF4X3J1bl9ncm91cF9ub25ibG9jayBkb2N1bWVu
dGF0aW9uIGZvciBtb3JlIGV4cGxhbmF0aW9uLgogKgogKiBccGFyYW0gW2luXSBncm91cCBHcm91
cCB0byB1c2UuCiAqIFxwYXJhbSBbaW5dIGludGVyZmFjZV9hY3Rpb25zIEFjdGlvbnMgdG8gcnVu
LgogKiBccmV0dXJuIEEgaGFuZGxlIG9uIHRoZSBleGVjdXRpb24gc3RhdHVzIG9mIHRoZSBhY3Rp
b25zLCBvciBOVUxMIGluIGNhc2Ugb2YgZXJyb3IuCiAqLwptYXhfcnVuX3QgKkZpZWxkU3dhcF9y
dW5fZ3JvdXBfbm9uYmxvY2sobWF4X2dyb3VwX3QgKmdyb3VwLCBGaWVsZFN3YXBfYWN0aW9uc190
ICppbnRlcmZhY2VfYWN0aW9ucykKewoJbWF4X2ZpbGVfdCAqbWF4ZmlsZSA9IG1heF9ncm91cF9n
ZXRfbWF4X2ZpbGUoZ3JvdXApOwoJbWF4X2FjdGlvbnNfdCAqYWN0aW9ucyA9IEZpZWxkU3dhcF9j
b252ZXJ0X2ludGVybmFsKG1heGZpbGUsIGludGVyZmFjZV9hY3Rpb25zLCAxLCBOVUxMLCBOVUxM
KTsKCWlmKGFjdGlvbnMgPT0gTlVMTCkgcmV0dXJuIE5VTEw7CglpZighbWF4X29rKGFjdGlvbnMt
PmVycm9ycykpIHJldHVybiBOVUxMOwoJbWF4X3ZhbGlkYXRlKGFjdGlvbnMpOwoJbWF4X3J1bl90
ICpydW4gPSBtYXhfcnVuX2dyb3VwX25vbmJsb2NrKGdyb3VwLCBhY3Rpb25zKTsKCW1heF9hY3Rp
b25zX2ZyZWUoYWN0aW9ucyk7CglyZXR1cm4gcnVuOwp9CgoKLyoqCiAqIFxicmllZiBBcnJheSBy
dW4gYWR2YW5jZWQgc3RhdGljIGZ1bmN0aW9uIGZvciB0aGUgaW50ZXJmYWNlICdkZWZhdWx0Jy4K
ICogCiAqIFxwYXJhbSBbaW5dIGVuZ2FycmF5IFRoZSBhcnJheSBvZiBkZXZpY2VzIHRvIHVzZS4K
ICogXHBhcmFtIFtpbixvdXRdIGludGVyZmFjZV9hY3Rpb25zIFRoZSBhcnJheSBvZiBhY3Rpb25z
IHRvIHJ1bi4KICoKICogUnVuIHRoZSBhcnJheSBvZiBhY3Rpb25zIG9uIHRoZSBhcnJheSBvZiBl
bmdpbmVzLiAgVGhlIGxlbmd0aCBvZiBpbnRlcmZhY2VfYWN0aW9ucwogKiBtdXN0IG1hdGNoIHRo
ZSBzaXplIG9mIGVuZ2FycmF5LgogKi8Kdm9pZCBGaWVsZFN3YXBfcnVuX2FycmF5KG1heF9lbmdh
cnJheV90ICplbmdhcnJheSwgRmllbGRTd2FwX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnNb
XSkKewoJbWF4X3J1bl90ICpydW4gPSBGaWVsZFN3YXBfcnVuX2FycmF5X25vbmJsb2NrKGVuZ2Fy
cmF5LCBpbnRlcmZhY2VfYWN0aW9ucyk7CglDSEVDS19OVUxMKHJ1biwgIlVuYWJsZSB0byBydW4g
YWN0aW9ucyIsICk7CgltYXhfd2FpdChydW4pOwp9CgoKLyoqCiAqIFxicmllZiBBcnJheSBydW4g
YWR2YW5jZWQgc3RhdGljIG5vbi1ibG9ja2luZyBmdW5jdGlvbiBmb3IgdGhlIGludGVyZmFjZSAn
ZGVmYXVsdCcuCiAqIAogKgogKiBTY2hlZHVsZSB0byBydW4gdGhlIGFycmF5IG9mIGFjdGlvbnMg
b24gdGhlIGFycmF5IG9mIGVuZ2luZXMsIGFuZCByZXR1cm4gaW1tZWRpYXRlbHkuCiAqIFRoZSBs
ZW5ndGggb2YgaW50ZXJmYWNlX2FjdGlvbnMgbXVzdCBtYXRjaCB0aGUgc2l6ZSBvZiBlbmdhcnJh
eS4KICogVGhlIHN0YXR1cyBvZiB0aGUgcnVuIGNhbiBiZSBjaGVja2VkIGVpdGhlciBieSA6Om1h
eF93YWl0IG9yIDo6bWF4X25vd2FpdDsKICogbm90ZSB0aGF0IG9uZSBvZiB0aGVzZSAqbXVzdCog
YmUgY2FsbGVkLCBzbyB0aGF0IGFzc29jaWF0ZWQgbWVtb3J5IGNhbiBiZSByZWxlYXNlZC4KICoK
ICogXHBhcmFtIFtpbl0gZW5nYXJyYXkgVGhlIGFycmF5IG9mIGRldmljZXMgdG8gdXNlLgogKiBc
cGFyYW0gW2luXSBpbnRlcmZhY2VfYWN0aW9ucyBUaGUgYXJyYXkgb2YgYWN0aW9ucyB0byBydW4u
CiAqIFxyZXR1cm4gQSBoYW5kbGUgb24gdGhlIGV4ZWN1dGlvbiBzdGF0dXMgb2YgdGhlIGFjdGlv
bnMsIG9yIE5VTEwgaW4gY2FzZSBvZiBlcnJvci4KICovCm1heF9ydW5fdCAqRmllbGRTd2FwX3J1
bl9hcnJheV9ub25ibG9jayhtYXhfZW5nYXJyYXlfdCAqZW5nYXJyYXksIEZpZWxkU3dhcF9hY3Rp
b25zX3QgKmludGVyZmFjZV9hY3Rpb25zW10pCnsKCW1heF9maWxlX3QgKm1heGZpbGUgPSBtYXhf
ZW5nYXJyYXlfZ2V0X21heF9maWxlKGVuZ2FycmF5LCAwKTsKCWludCBpOwoJbWF4X2FjdGFycmF5
X3QgKmFjdGFycmF5ID0gbWF4X2FjdGFycmF5X2luaXQobWF4ZmlsZSwgZW5nYXJyYXktPnNpemUp
OwoJaWYgKGFjdGFycmF5ID09IE5VTEwpIHJldHVybiBOVUxMOwoJbWF4X2FjdGlvbnNfdCAqKmFy
cl9hY3Rpb25zID0gbWFsbG9jKGVuZ2FycmF5LT5zaXplICogc2l6ZW9mKG1heF9hY3Rpb25zX3Qq
KSk7Cglmb3IgKCBpID0gMCA7IGkgPCBhY3RhcnJheS0+c2l6ZTsgaSsrICkgewoJCW1heF9hY3Rp
b25zX3QgKmFjdGlvbnMgPSBGaWVsZFN3YXBfY29udmVydF9pbnRlcm5hbChtYXhmaWxlLCBpbnRl
cmZhY2VfYWN0aW9uc1tpXSwgMSwgTlVMTCwgTlVMTCk7CgkJaWYgKGFjdGlvbnMgPT0gTlVMTCkg
cmV0dXJuIE5VTEw7CgkJYXJyX2FjdGlvbnNbaV0gPSBhY3Rpb25zOwoJCW1heF9zZXRfYWN0aW9u
KGFjdGFycmF5LCBpLCBhY3Rpb25zKTsKCX0KCW1heF9ydW5fdCAqcnVuID0gbWF4X3J1bl9hcnJh
eV9ub25ibG9jayhlbmdhcnJheSwgYWN0YXJyYXkpOwoJZm9yICggaSA9IDAgOyBpIDwgYWN0YXJy
YXktPnNpemUgOyBpKysgKSB7IG1heF9hY3Rpb25zX2ZyZWUoYXJyX2FjdGlvbnNbaV0pOyB9Cglt
YXhfYWN0YXJyYXlfZnJlZShhY3RhcnJheSk7CglmcmVlKGFycl9hY3Rpb25zKTsKCXJldHVybiBy
dW47Cn0KCgovKioKICogXGJyaWVmIENvbnZlcnRzIGEgc3RhdGljLWludGVyZmFjZSBhY3Rpb24g
c3RydWN0IGludG8gYSBkeW5hbWljLWludGVyZmFjZSBtYXhfYWN0aW9uc190IHN0cnVjdC4KICoK
ICogTm90ZSB0aGF0IHRoaXMgaXMgYW4gaW50ZXJuYWwgdXRpbGl0eSBmdW5jdGlvbiB1c2VkIGJ5
IG90aGVyIGZ1bmN0aW9ucyBpbiB0aGUgc3RhdGljIGludGVyZmFjZS4KICoKICogXHBhcmFtIFtp
bl0gbWF4ZmlsZSBUaGUgbWF4ZmlsZSB0byB1c2UuCiAqIFxwYXJhbSBbaW5dIGludGVyZmFjZV9h
Y3Rpb25zIFRoZSBpbnRlcmZhY2Utc3BlY2lmaWMgYWN0aW9ucyB0byBydW4uCiAqIFxyZXR1cm4g
VGhlIGR5bmFtaWMtaW50ZXJmYWNlIGFjdGlvbnMgdG8gcnVuLCBvciBOVUxMIGluIGNhc2Ugb2Yg
ZXJyb3IuCiAqLwptYXhfYWN0aW9uc190KiBGaWVsZFN3YXBfY29udmVydChtYXhfZmlsZV90ICpt
YXhmaWxlLCBGaWVsZFN3YXBfYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucykKewoJcmV0dXJu
IEZpZWxkU3dhcF9jb252ZXJ0X2ludGVybmFsKG1heGZpbGUsIGludGVyZmFjZV9hY3Rpb25zLCAw
LCBOVUxMLCBOVUxMKTsKfQoKI3VuZGVmIENIRUNLX0VSUk9SU19TVAojdW5kZWYgQ0hFQ0tfTlVM
TAoKCg==
#endif /* SLIC_B64_DEFINITIONS */

#ifdef SLIC_EXTRA_FILES
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PHVz
ZXJmaWxlcyBmb3JtYXQtdmVyc2lvbj0iMjAxMjAyMDAiLz4=
#endif /* SLIC_EXTRA_FILES */

#ifdef PHOTON_NODE_ADD_DATA
#define PHOTON_NODE_ADD_DATA_PRESENT 1
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 23, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 24, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 123, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 4, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 5, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 6, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 7, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 8, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 9, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 10, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 11, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 17, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 18, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 127, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 46, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 47, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 148, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 49, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 141, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 50, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 51, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 63, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 64, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 124, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 65, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 98, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 99, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 100, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 101, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 138, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 21, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 22, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 110, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 137, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 93, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 94, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 108, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 136, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 91, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 92, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 106, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 135, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 96, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 97, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 104, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 134, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 133, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 132, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 86, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 129, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 72, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 125, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 74, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 75, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 76, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 77, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 130, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 126, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 79, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 80, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 81, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 82, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 83, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 69, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 147, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 146, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 34, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 35, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 12, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 30, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 36, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 37, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 55, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 145, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 144, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 42, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 43, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 38, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 44, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 45, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 52, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 60, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 70, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 71, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 84, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 85, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 88, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 87, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 89, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 105, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 107, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 109, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 111, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 102, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 117, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 143, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 114, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 115, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 116, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 118, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 15, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 16, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 142, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 25, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 26, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 27, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 28, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 140, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 112, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(FieldSwapKernel, 122, "SquashFactor", 0.0)
#endif

#ifdef MAXFILE_SIGNATURE
#define MAXFILE_SIGNATURE_PRESENT 1
MAXFILE_SIGNATURE("302c0214784e2d83030b9cf4c69b381fa452dbb85026ecd702142cbc6bb66fb8fa4631084543f28405eb441f2386")
#endif

